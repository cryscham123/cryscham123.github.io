{
  "hash": "70c01eddb603feb656bb7f1eb86571ab",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Homework - 2\"\ndate: last-modified\ncategories: [\"data mining\"]\n---\n\n::: {#64feb5e7 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ndataset = pd.read_csv(\"./_data/class/FFvote.csv\", encoding='utf-8')\ndataset.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>gender_female</th>\n      <th>gender_male</th>\n      <th>region_Chuncheung</th>\n      <th>region_Honam</th>\n      <th>region_Sudo</th>\n      <th>region_Youngnam</th>\n      <th>region_others</th>\n      <th>edu</th>\n      <th>income</th>\n      <th>age</th>\n      <th>score_gov</th>\n      <th>score_progress</th>\n      <th>score_intention</th>\n      <th>vote</th>\n      <th>parties</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>0.666667</td>\n      <td>0.666667</td>\n      <td>0.25</td>\n      <td>0.25</td>\n      <td>0.75</td>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.5</td>\n      <td>0.666667</td>\n      <td>0.666667</td>\n      <td>0.25</td>\n      <td>0.75</td>\n      <td>0.50</td>\n      <td>0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.333333</td>\n      <td>1.000000</td>\n      <td>0.00</td>\n      <td>0.50</td>\n      <td>0.45</td>\n      <td>1</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.5</td>\n      <td>0.000000</td>\n      <td>0.666667</td>\n      <td>1.00</td>\n      <td>0.75</td>\n      <td>0.40</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.333333</td>\n      <td>1.000000</td>\n      <td>0.75</td>\n      <td>0.50</td>\n      <td>0.35</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#50fd98ac .cell execution_count=2}\n``` {.python .cell-code}\nX = dataset.loc[:, 'gender_female':'score_intention'].values\ny = dataset['vote'].values\n```\n:::\n\n\n어떻게 하면 scaling을 간단하게 처리할 수 있을까 고민하던 중\n[sklearn pipeline 문서](https://scikit-learn.org/stable/modules/compose.html#pipeline-chaining-estimators)의 Safety 부분을 참고해서 작성해봤습니다.\n\n::: {#1127f4ac .cell execution_count=3}\n``` {.python .cell-code}\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\npipeline = make_pipeline(\n      StandardScaler(),\n      KNeighborsClassifier(n_neighbors=42)\n)\n\nfor k in (3, 4, 5):\n      kf = KFold(n_splits=k, shuffle=False)\n      accuracies = cross_val_score(pipeline, X, y, cv=kf, scoring='accuracy')\n      print(f\"Accuracy for K={k}: {round(accuracies.mean(), 2)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy for K=3: 0.71\nAccuracy for K=4: 0.71\nAccuracy for K=5: 0.72\n```\n:::\n:::\n\n\n",
    "supporting": [
      "11_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}