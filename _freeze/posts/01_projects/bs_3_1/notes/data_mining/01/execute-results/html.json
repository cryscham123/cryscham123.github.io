{
  "hash": "940df30382428453637003ace440a16b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Numpy-2\"\ndate: 2025-03-12\ncategories: [\"data mining\"]\n---\n\n\n\n\n![](/img/human-thumb.jpg){.post-thumbnail}\n\n## Masking\n\n::: {#c59f3468 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\na = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nbool_indexing = (a % 2 == 0)\nprint(bool_indexing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[False  True False]\n [ True False  True]\n [False  True False]]\n```\n:::\n:::\n\n\n::: {#e68d311f .cell execution_count=2}\n``` {.python .cell-code}\nprint(a[bool_indexing])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2 4 6 8]\n```\n:::\n:::\n\n\n::: {#75575439 .cell execution_count=3}\n``` {.python .cell-code}\ndata = np.random.randn(4, 5)\nnp.around(data, 2) \n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\narray([[ 1.48, -0.78,  1.11,  0.38, -1.24],\n       [-0.  , -0.25, -0.08,  0.62, -1.12],\n       [-2.27,  2.39, -0.85,  0.95, -1.6 ],\n       [ 1.72, -0.29,  1.04,  0.48, -0.14]])\n```\n:::\n:::\n\n\n::: {#04806472 .cell execution_count=4}\n``` {.python .cell-code}\ndata = np.array([[ 1.87883804, -0.39056004, 1.18374625, -0.91699153, 0.23666417],\n[ 0.28408269, 1.14786861, -1.54178089, 0.12426074, 0.54734241],\n[-1.67396474, -1.88974809, -0.09876402, 1.05047587, 1.31776863],\n[-0.27404289, -0.73640766, -0.16014918,\n-1.03578294, 0.62956063]])\ndata[data[:, 0] <0, 1:3] = 1.0\n```\n:::\n\n\n::: {#e1ab55fb .cell execution_count=5}\n``` {.python .cell-code}\na[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[7, 8, 9],\n       [4, 5, 6],\n       [1, 2, 3]])\n```\n:::\n:::\n\n\n::: {#9a99e17a .cell execution_count=6}\n``` {.python .cell-code}\na = np.array([[1, 2, 3], [4, 5, 6]])\nprint(a.reshape(3, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 2]\n [3 4]\n [5 6]]\n```\n:::\n:::\n\n\n::: {#3a92be60 .cell execution_count=7}\n``` {.python .cell-code}\nprint(a.T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1 4]\n [2 5]\n [3 6]]\n```\n:::\n:::\n\n\n::: {#3728316e .cell execution_count=8}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nx1 = np.arange(0, 10, 0.1)\nx2 = np.sin(x1)\n\nplt.plot(x1, x2)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](01_files/figure-html/cell-9-output-1.png){width=590 height=411}\n:::\n:::\n\n\n::: {#84cf8fbc .cell execution_count=9}\n``` {.python .cell-code}\ny1=np.sin(x1)\ny2=np.cos(x1)\nplt.plot(x1, y1, label='sin')\nplt.plot(x1, y2, linestyle='--', label='cos')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('sin and cos')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](01_files/figure-html/cell-10-output-1.png){width=608 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "01_files"
    ],
    "filters": [],
    "includes": {}
  }
}