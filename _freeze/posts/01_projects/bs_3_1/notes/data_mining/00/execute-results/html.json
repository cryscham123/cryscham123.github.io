{
  "hash": "db64bd57a8a44dfcdfd9bedd40e7c1ee",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Numpy\"\ndate: 2025-03-10\ncategories: [\"data mining\"]\n---\n\n\n\n\n![](/img/human-thumb.jpg){.post-thumbnail}\n\n## 수업 요약\n\n- numpy랑 pandas 비교, broadcast\n- numpy 다차원 pandas 2차원\n- python list 보다 빠름 \n- 차원을 rank, 크기를 shape\n\n::: {#d66a6549 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nv1 = np.arange(1, 10, 2) ** 2\nprint(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[ 1  9 25 49 81]\n```\n:::\n:::\n\n\n::: {#5fb95454 .cell execution_count=2}\n``` {.python .cell-code}\nv2 = np.arange(3, 10, 1, dtype=float)\nprint(v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3. 4. 5. 6. 7. 8. 9.]\n```\n:::\n:::\n\n\n- 수업으로 공부하지 말고 따로 올려준 자료로 공부해라\n\n::: {#0caa5655 .cell execution_count=3}\n``` {.python .cell-code}\na = np.zeros((2,2))\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0. 0.]\n [0. 0.]]\n```\n:::\n:::\n\n\n::: {#e5b6306d .cell execution_count=4}\n``` {.python .cell-code}\na = np.ones((2, 3))\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1. 1. 1.]\n [1. 1. 1.]]\n```\n:::\n:::\n\n\n::: {#b9611a35 .cell execution_count=5}\n``` {.python .cell-code}\nlst1 = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [9, 10, 11],\n        [12, 13, 14]]\na = np.array(lst1)\na[[1, 2]]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[4, 5, 6],\n       [7, 8, 9]])\n```\n:::\n:::\n\n\n::: {#588ce973 .cell execution_count=6}\n``` {.python .cell-code}\na = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nb = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\na + b\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([[ 2,  4,  6],\n       [ 8, 10, 12],\n       [14, 16, 18]])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "00_files"
    ],
    "filters": [],
    "includes": {}
  }
}