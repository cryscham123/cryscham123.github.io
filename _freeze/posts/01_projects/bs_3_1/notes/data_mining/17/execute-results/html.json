{
  "hash": "85ae54e07539d0954e7e7c2b64cddff3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"PCA 분석\"\ndate: 2025-05-23\ncategories: [\"data mining\"]\n---\n\n\n\n\n![](/img/human-thumb.jpg){.post-thumbnail}\n\n## PCA\n\n::: {#95c0ddb0 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nimport pandas as pd\n\n\nfeature_names = ['q1a1', 'q1a2','q1a3', 'q1a4', 'q1a5', 'q1a6', 'q1a7', 'q12a12', 'q12a13', 'q12a14', 'q12a15', 'q12a16', 'q12a17', 'q12a18']\n\n# 모든 학생 데이터에 대한 PCA 결과를 저장할 딕셔너리\npca_results = {}\n\nfor i in range(3, 5):\n    df = pd.read_csv(f'_data/student_{i}.csv')\n    df = df[feature_names].dropna()\n    wave_id = f'w{i}'\n    scaler = StandardScaler()\n    df_scaled = scaler.fit_transform(df)\n\n    n_components = 3\n    pca = PCA(n_components=n_components)\n    principal_components = pca.fit_transform(df_scaled)\n\n    pc_columns = [f'PC{j+1}_{wave_id}' for j in range(n_components)]  # 각 PC에 wave_id를 포함\n    principal_df = pd.DataFrame(data=principal_components, columns=pc_columns)\n    \n    # 모든 샘플에 고유 식별자 부여\n    principal_df['sample_id'] = [f'{wave_id}_sample_{k}' for k in range(len(principal_df))]\n    \n    # 결과 저장\n    pca_results[wave_id] = principal_df\n    \n    # 원래 있던 출력 코드 유지\n    explained_variance_ratio = pca.explained_variance_ratio_\n    print(f\"--- 학생 {i} 각 주성분의 설명된 분산 비율 ---\")\n    for j, ratio in enumerate(explained_variance_ratio):\n        print(f\"PC{j+1}: {ratio:.4f} (누적: {np.sum(explained_variance_ratio[:j+1]):.4f})\")\n    print(f\"총 설명된 분산: {np.sum(explained_variance_ratio):.4f}\")\n    print(\"\\n\")\n\n    print(f\"--- 학생 {i} 주성분 벡터 (고유 벡터) ---\")\n    components_df = pd.DataFrame(pca.components_, columns=feature_names, index=pc_columns)\n    print(components_df)\n    print(\"\\n\")\n\n# 횡 방향으로 PCA 결과 병합 (공통 키가 있는 경우)\n# 참고: 실제 데이터에서는 sample_id가 동일한 레코드끼리 병합해야 할 수 있습니다\n# 이 예제에서는 단순히 첫 번째 데이터셋을 기준으로 병합합니다\n\n# 먼저 기준 데이터프레임 설정\nmerged_df = pca_results['w3'].set_index('sample_id')\n\n# 나머지 데이터프레임을 횡 방향으로 병합\nfor wave_id, df in pca_results.items():\n    if wave_id != 'w3':  # 기준 데이터프레임 제외\n        # 인덱스 기준으로 병합 (outer join - 모든 샘플 포함)\n        merged_df = merged_df.join(df.set_index('sample_id'), how='outer')\n\n# 결과 확인\nprint(\"--- 횡 방향으로 병합된 PCA 결과 ---\")\nprint(merged_df.reset_index())  # sample_id를 다시 컬럼으로 변환\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n--- 학생 3 각 주성분의 설명된 분산 비율 ---\nPC1: 0.3269 (누적: 0.3269)\nPC2: 0.1227 (누적: 0.4497)\nPC3: 0.1100 (누적: 0.5597)\n총 설명된 분산: 0.5597\n\n\n--- 학생 3 주성분 벡터 (고유 벡터) ---\n            q1a1      q1a2      q1a3      q1a4      q1a5      q1a6      q1a7  \\\nPC1_w3  0.247862  0.237873  0.230581  0.301675  0.243926  0.235251  0.223636   \nPC2_w3  0.366504  0.369130  0.162445  0.156753 -0.287024 -0.229956 -0.291483   \nPC3_w3 -0.241074 -0.287373  0.438479  0.296505 -0.001940 -0.143635 -0.199942   \n\n          q12a12    q12a13    q12a14    q12a15    q12a16    q12a17    q12a18  \nPC1_w3  0.298027  0.294329  0.263841  0.327178  0.279594  0.274408  0.259556  \nPC2_w3  0.259620  0.237896  0.062205  0.087176 -0.346159 -0.302207 -0.334084  \nPC3_w3 -0.264197 -0.288675  0.441378  0.353738  0.064246 -0.076792 -0.188166  \n\n\n--- 학생 4 각 주성분의 설명된 분산 비율 ---\nPC1: 0.3557 (누적: 0.3557)\nPC2: 0.1296 (누적: 0.4853)\nPC3: 0.1003 (누적: 0.5856)\n총 설명된 분산: 0.5856\n\n\n--- 학생 4 주성분 벡터 (고유 벡터) ---\n            q1a1      q1a2      q1a3      q1a4      q1a5      q1a6      q1a7  \\\nPC1_w4  0.243141  0.236866  0.241068  0.288196  0.246889  0.240895  0.246690   \nPC2_w4  0.388228  0.415968  0.085153  0.151228 -0.265814 -0.182576 -0.222634   \nPC3_w4 -0.228642 -0.243857  0.478800  0.338032 -0.052284 -0.170940 -0.205696   \n\n          q12a12    q12a13    q12a14    q12a15    q12a16    q12a17    q12a18  \nPC1_w4  0.289653  0.287025  0.277797  0.323675  0.270187  0.271515  0.262346  \nPC2_w4  0.294460  0.284031 -0.016731  0.026280 -0.370027 -0.296113 -0.315624  \nPC3_w4 -0.212274 -0.208043  0.442286  0.342813 -0.050594 -0.129397 -0.222921  \n\n\n--- 횡 방향으로 병합된 PCA 결과 ---\n           sample_id    PC1_w3    PC2_w3    PC3_w3    PC1_w4    PC2_w4  \\\n0        w3_sample_0 -1.254296 -1.224018 -2.154943       NaN       NaN   \n1        w3_sample_1  2.247322 -0.049948  1.067250       NaN       NaN   \n2       w3_sample_10  0.431017 -1.510617 -0.870137       NaN       NaN   \n3      w3_sample_100  0.201425  2.796726 -0.839905       NaN       NaN   \n4     w3_sample_1000 -1.899832  0.188324  0.128137       NaN       NaN   \n...              ...       ...       ...       ...       ...       ...   \n6241   w4_sample_995       NaN       NaN       NaN -0.072505  0.113869   \n6242   w4_sample_996       NaN       NaN       NaN  2.380158  0.724508   \n6243   w4_sample_997       NaN       NaN       NaN  1.370190 -2.457734   \n6244   w4_sample_998       NaN       NaN       NaN -1.726048 -0.219925   \n6245   w4_sample_999       NaN       NaN       NaN  1.474996  1.818824   \n\n        PC3_w4  \n0          NaN  \n1          NaN  \n2          NaN  \n3          NaN  \n4          NaN  \n...        ...  \n6241 -0.519265  \n6242 -0.787852  \n6243 -1.963943  \n6244  0.269801  \n6245 -0.402807  \n\n[6246 rows x 7 columns]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "17_files"
    ],
    "filters": [],
    "includes": {}
  }
}