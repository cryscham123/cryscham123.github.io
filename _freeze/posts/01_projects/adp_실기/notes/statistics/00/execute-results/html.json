{
  "hash": "55d37cfaef8b6ce9048b52eda556befc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EDA\"\ndate: 2025-06-17\ncategories: [\"데이터 분석\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## plot을 통한 자료 요약\n\n### 범주형 자료 요약\n\n1. 도수분포표\n\n::: {#e5a336f1 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom seaborn import color_palette\n\ndf = pd.DataFrame(range(1, 11)).sample(100, replace=True)\ntable = pd.crosstab(index=df.values.flatten(), colnames=['질병'], columns='도수')\ntable.index = [\"감염\", \"심장\", \"호흡기\", \"소화기\", \"신경\", \"근골격\", \"내분비\", \"정신\", \"피부\", \"기타\"]\nprint(table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n질병   도수\n감염    8\n심장   11\n호흡기   9\n소화기   4\n신경   15\n근골격  12\n내분비  11\n정신    9\n피부    9\n기타   12\n```\n:::\n:::\n\n\n1. 원형 그래프\n\n::: {#cc23b672 .cell execution_count=2}\n``` {.python .cell-code}\nplt.rcParams['font.family'] = 'Noto Sans KR'\n\ntable.plot(kind='bar', color='skyblue', legend=False)\nplt.xlabel('사망 원인')\nplt.ylabel('빈도수')\nplt.title('사망 원인별 빈도수')\nplt.xticks(rotation=0)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](00_files/figure-html/cell-3-output-1.png){width=583 height=451}\n:::\n:::\n\n\n1. 막대 그래프\n\n::: {#c3347ac5 .cell execution_count=3}\n``` {.python .cell-code}\nplt.pie(table.iloc[:, 0], labels=list(table.index), colors=color_palette(\"pastel\"), autopct='%1.1f%%')\nplt.title('사망 원인별 빈도수')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](00_files/figure-html/cell-4-output-1.png){width=400 height=409}\n:::\n:::\n\n\n1. 파레토그림 (명목형)\n\n- 가장 큰 영향을 미치는 범주를 파악할 수 있는 그래프\n- 라이브러리는 딱히 없는거 같고, 뭐 많이 쓰지도 않는거 같아서 구현은 생략\n\n### 이산형 자료 요약\n\n- 관측값의 종료가 적은 경우 그냥 범주형으로 처리할 수 있다. (단 파레토그림같은 순서가 바뀌는 기법은 사용하지 않는다.)\n- 관측값의 종류가 많을 경우, 연속형 자료로 처리할 수 있다.\n\n### 연속형 자료 요약\n\n1. 점도표\n\n1. 도수분포표\n\n- 구간을 정하고 각 구간에 속하는 관측값의 개수를 세어 도수분포표를 만든다.\n\n1. 히스토그램\n\n- 상대도수를 계급구간의 폭으로 나눈 값을 막대의 높이로 사용하는 그래프\n\n1. 도수다각형\n\n- 중심의 위치, 퍼진 정도 등을 파악하는데 유용하다.\n- 또한 여러 자료를 비교하는 경우 히스토그램보다 유용하다.\n\n1. 줄기-잎 그림\n\n- 개개의 관측값에 대한 정보를 유지하면서 분포를 파악할 수 있는 그래프\n- 하지만 관측값의 갯수가 많거나 지나치게 흩어져 있는 경우 제한된 공간에 그리는 것이 불가능하다.\n\n### 분포의 모양\n\n1. 종모양\n1. 이봉형: 두 개의 다른 집단이 섞여 있을 때 종종 나타난다.\n1. 균일형\n1. 오른쪽 편중\n1. 왼쪽 편중\n\n## 수치를 통한 연속형 자료 요약\n\n::: {#b9f3f303 .cell execution_count=4}\n``` {.python .cell-code}\ndf.describe(include='all')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>100.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.700000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.840899</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>6.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>10.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 중심위치의 측도\n\n- 평균, 중앙값, 최빈값\n\n::: {#411aaf15 .cell execution_count=5}\n``` {.python .cell-code}\nfrom scipy import stats\n\nprint(f'평균: {np.mean(df)}, 중앙값: {np.median(df)}, 최빈값: {stats.mode(df)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n평균: 5.7, 중앙값: 6.0, 최빈값: ModeResult(mode=array([5]), count=array([15]))\n```\n:::\n:::\n\n\n### 퍼진 정도의 측도\n\n- 분산, 표준편차, 범위, 사분위수, 변동계수\n\n::: {#5b8b16ab .cell execution_count=6}\n``` {.python .cell-code}\n# 자유도 -1\nprint(f'분산: {np.var(df, ddof=1)}, 표준편차: {np.std(df, ddof=1)}, 범위: {np.ptp(df)}, 1,3분위수: {np.quantile(df, [0.25, 0.75])}, 변동계수: {np.std(df, ddof=1) / np.mean(df)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n분산: 0    8.070707\ndtype: float64, 표준편차: 0    2.840899\ndtype: float64, 범위: 9, 1,3분위수: [3. 8.], 변동계수: 0    0.498403\ndtype: float64\n```\n:::\n:::\n\n\n### box plot\n\n- 종모양의 데이터의 분포를 나타내는 데 적절하다.\n- 사전에 도수분포표, 히스토그램, 줄기-잎 그림으로 봉우리를 파악해야 한다.\n\n::: {#d857a92d .cell execution_count=7}\n``` {.python .cell-code}\nplt.boxplot(df)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n{'whiskers': [<matplotlib.lines.Line2D at 0x74d87129df10>,\n  <matplotlib.lines.Line2D at 0x74d87129e210>],\n 'caps': [<matplotlib.lines.Line2D at 0x74d87129e510>,\n  <matplotlib.lines.Line2D at 0x74d87129e7e0>],\n 'boxes': [<matplotlib.lines.Line2D at 0x74d8713c2450>],\n 'medians': [<matplotlib.lines.Line2D at 0x74d87129eab0>],\n 'fliers': [<matplotlib.lines.Line2D at 0x74d87129ed80>],\n 'means': []}\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](00_files/figure-html/cell-8-output-2.png){width=564 height=412}\n:::\n:::\n\n\n",
    "supporting": [
      "00_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}