{
  "hash": "39700694929daed6278d36e3868523bc",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"비교\"\ndate: 2025-06-30\ncategories: [\"확률 통계\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## A의 키\n\n- 미국 성인 남성 중 두명을 임의로 골랐다.\n- A가 B보다 큰 것 같을 때, A의 키는 얼마인가\n\n::: {#e908d932 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy.stats import norm\nfrom empiricaldist import Pmf\n\nmean = 178\nstd = 7.7\n\nqs = np.arange(mean-24, mean+24, 0.5)\nps = norm(mean, std).pdf(qs)\nprior = Pmf(ps, qs)\nprior.normalize()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n1.9963309462450582\n```\n:::\n:::\n\n\n::: {#ff3f4dd9 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\ndef make_joint(pmf1, pmf2):\n  X, Y = np.meshgrid(pmf1, pmf2)\n  return pd.DataFrame(X * Y, columns=pmf1.qs, index=pmf2.qs)\n```\n:::\n\n\n::: {#5acd9382 .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\njoint = make_joint(prior, prior)\nplt.contour(joint.columns, joint.index, joint, linewidths=2)\nplt.xlabel('A의 키(cm)')\nplt.ylabel('B의 키(cm)')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nText(0, 0.5, 'B의 키(cm)')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](13_files/figure-html/cell-4-output-2.png){width=591 height=431}\n:::\n:::\n\n\n::: {#6ad7dea9 .cell execution_count=4}\n``` {.python .cell-code}\nx, y = joint.columns, joint.index\nX, Y = np.meshgrid(x, y)\na = np.where((X > Y), 1, 0)\nlikelihood = pd.DataFrame(a, index=x, columns=y)\nposterior = joint * likelihood\n```\n:::\n\n\n::: {#e1f072c9 .cell execution_count=5}\n``` {.python .cell-code}\ndef normalize(pdf):\n  prob_data = joint.to_numpy().sum()\n  pdf /= prob_data\n  return prob_data\nnormalize(posterior)\nmarginal_A = Pmf(posterior.sum(axis=0))\nmarginal_B = Pmf(posterior.sum(axis=1))\nmarginal_A.normalize()\nmarginal_B.normalize()\nmarginal_A.plot()\nmarginal_B.plot()\nprior.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](13_files/figure-html/cell-6-output-1.png){width=583 height=412}\n:::\n:::\n\n\n::: {#dbeae4ce .cell execution_count=6}\n``` {.python .cell-code}\nmarginal_A.mean(), marginal_B.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n(182.38728123421686, 173.60286000233393)\n```\n:::\n:::\n\n\n- A의 키가 170이라면?\n\n::: {#5e2a1912 .cell execution_count=7}\n``` {.python .cell-code}\npmf = Pmf(posterior[170])\npmf.normalize()\npmf.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](13_files/figure-html/cell-8-output-1.png){width=575 height=412}\n:::\n:::\n\n\n## 연습 문제\n\n### 11-1\n\n::: {#47a4b72c .cell execution_count=8}\n``` {.python .cell-code}\npmf = Pmf(posterior.loc[180])\npmf.normalize()\npmf.plot()\n```\n\n::: {.cell-output .cell-output-display}\n![](13_files/figure-html/cell-9-output-1.png){width=575 height=412}\n:::\n:::\n\n\n### 11-2\n\n::: {#3e2fbd7c .cell execution_count=9}\n``` {.python .cell-code}\nmean = 163\nstd = 7.3\nqs = np.arange(mean-24, mean+24, 0.5)\nps = norm(mean, std).pdf(qs)\ngirl_prior = Pmf(ps, qs)\ngirl_prior.normalize()\njoint = make_joint(marginal_A, girl_prior)\n\nx, y = joint.columns, joint.index\nX, Y = np.meshgrid(x, y)\na = np.where((X - Y >= 15), 1, 0)\nlikelihood = pd.DataFrame(a, index=y, columns=x)\nposterior = joint * likelihood\nnormalize(posterior)\nmarginal_A.plot(label='c 정보 이전')\nmarginal_A = Pmf(posterior.sum(axis=0))\nmarginal_A.normalize()\nmarginal_A.plot(label='c 정보 이후')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](13_files/figure-html/cell-10-output-1.png){width=583 height=412}\n:::\n:::\n\n\n### 11-3\n\n::: {#5dabbc5e .cell execution_count=10}\n``` {.python .cell-code}\nmean_A = 1600\nstd_A = 100\nqs_A = np.arange(mean_A - 300, mean_A + 300, 10)\nps_A = norm(mean_A, std_A).pdf(qs_A)\nprior_A = Pmf(ps_A, qs_A)\nprior_A.normalize()\n\nmean_B = 1800\nstd_B = 100\nqs_B = np.arange(mean_B - 300, mean_B + 300, 10)\nps_B = norm(mean_B, std_B).pdf(qs_B)\nprior_B = Pmf(ps_B, qs_B)\nprior_B.normalize()\n\njoint = make_joint(prior_A, prior_B)\n```\n:::\n\n\n::: {#37d688f8 .cell execution_count=11}\n``` {.python .cell-code}\ndef logistic_prob(r_a, r_b):\n    return 1 / (1 + 10**((r_b - r_a) / 400))\nx, y = joint.columns, joint.index\nX, Y = np.meshgrid(x, y)\na = 1 / (1 + 10**((Y - X) / 400))\nlikelihood = pd.DataFrame(a, index=y, columns=x)\n\nposterior = joint * likelihood\nnormalize(posterior)\nmarginal_A = Pmf(posterior.sum(axis=0))\nmarginal_A.normalize()\n\nprint(marginal_A.max_prob(), marginal_A.mean())\nmarginal_A.plot()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1640 1636.648345528236\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](13_files/figure-html/cell-12-output-2.png){width=575 height=412}\n:::\n:::\n\n\n",
    "supporting": [
      "13_files"
    ],
    "filters": [],
    "includes": {}
  }
}