{
  "hash": "a0e87dd33a03f56c74229c72726cd716",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"최솟값, 최댓값 그리고 혼합 분포\"\ndate: 2025-06-24\ncategories: [\"확률 통계\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## 넷 중 높은 값\n\n::: {#b5c51b74 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom empiricaldist import Pmf\n\nn = 10000\na = np.random.randint(1, 7, size=(n, 4))\na.sort(axis=1)\nt = a[:, 1:].sum(axis=1)\npmf_best3 = Pmf.from_seq(t)\n```\n:::\n\n\n## 연습문제\n\n### 7-1\n\n::: {#f799af24 .cell execution_count=2}\n``` {.python .cell-code}\nn = 10000\na = np.random.randint(1, 7, size=(n, 4))\na.sort(axis=1)\nt = a[:, 1:].sum(axis=1)\npmf_best3 = Pmf.from_seq(t)\ncdf_best3 = pmf_best3.make_cdf()\n```\n:::\n\n\n::: {#dacbad69 .cell execution_count=3}\n``` {.python .cell-code}\nfrom empiricaldist import Cdf\nimport matplotlib.pyplot as plt\n\nstandard = [15,14,13,12,10,8]\nstandard_pmf = Pmf.from_seq(standard)\n\ncdf_best3.plot(label='best 3 of 4', color='C1', ls='--')\ncdf_standard = Cdf.from_seq(standard)\n\ncdf_standard.step(label='standard set', color='C7')\nplt.ylabel('CDF');\n\ncdf_max_dist6 = cdf_best3.max_dist(6)\ncdf_min_dist6 = cdf_best3.min_dist(6)\n```\n\n::: {.cell-output .cell-output-display}\n![](06_files/figure-html/cell-4-output-1.png){width=589 height=411}\n:::\n:::\n\n\n::: {#7b4e4e4b .cell execution_count=4}\n``` {.python .cell-code}\nprint(f\"Best 3 of 4 - 평균: {pmf_best3.mean():.2f}, 표준편차: {pmf_best3.std():.2f}\")\nprint(f\"Standard array - 평균: {standard_pmf.mean():.2f}, 표준편차: {standard_pmf.std():.2f}\")\n\n\nprob_less_than_8 = cdf_best3(7)\nprint(f\"Best 3 of 4에서 8보다 작은 값이 나올 확률: {prob_less_than_8:.4f}\")\n\nprint(f\"6번 굴렸을 때 최소 하나가 8보다 작을 확률: {(1 - cdf_min_dist6(8)):.4f}\")\n\nprob_greater_than_15 = 1 - cdf_best3(15)\nprint(f\"Best 3 of 4에서 15보다 큰 값이 나올 확률: {prob_greater_than_15:.4f}\")\nprint(f\"6번 굴렸을 때 최소 하나가 15보다 클 확률: {(1 - cdf_max_dist6(15)):.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBest 3 of 4 - 평균: 12.25, 표준편차: 2.82\nStandard array - 평균: 12.00, 표준편차: 2.38\nBest 3 of 4에서 8보다 작은 값이 나올 확률: 0.0569\n6번 굴렸을 때 최소 하나가 8보다 작을 확률: 0.5206\nBest 3 of 4에서 15보다 큰 값이 나올 확률: 0.1275\n6번 굴렸을 때 최소 하나가 15보다 클 확률: 0.5588\n```\n:::\n:::\n\n\n### 7-2\n\n::: {#3d25626b .cell execution_count=5}\n``` {.python .cell-code}\ndef update_dice(pmf, data):\n    hypos = pmf.qs\n    likelihood = 1 / hypos\n    likelihood[data > hypos] = 0\n    pmf *= likelihood\n    pmf.normalize()\n\npmf = Pmf.from_seq([6, 8, 10])\nupdate_dice(pmf, 1)\npmf\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>probs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6</th>\n      <td>0.425532</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.319149</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.255319</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#78b2450d .cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\n\ndef make_mixture(pmf, pmf_seq):\n    df = pd.DataFrame(pmf_seq).fillna(0).transpose()\n    df *= np.array(pmf)\n    total = df.sum(axis=1)\n    return Pmf(total)\n\npmf_6 = Pmf.from_seq(range(1, 7))  # 6면체 주사위\npmf_8 = Pmf.from_seq(range(1, 9))  # 8면체 주사위\npmf_10 = Pmf.from_seq(range(1, 11)) # 10면체 주사위\n\nmixture = make_mixture(pmf, [pmf_6, pmf_8, pmf_10])\nprob_6_damage = mixture[6] if 6 in mixture.qs else 0\nprint(f\"\\nProbability of 6 points of damage: {prob_6_damage:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nProbability of 6 points of damage: 0.1363\n```\n:::\n:::\n\n\n### 7-3\n\n::: {#21813085 .cell execution_count=7}\n``` {.python .cell-code}\nmean = 950\nstd = 50\n\nsample = np.random.normal(mean, std, size=365)\npmf = Pmf.from_seq(sample)\ncdf = pmf.make_cdf()\n```\n:::\n\n\n::: {#df9dab2c .cell execution_count=8}\n``` {.python .cell-code}\nmeans = []\nn_values = np.arange(1, 20)\n\nfor n in n_values:\n    cdf_max_dist = cdf.max_dist(n)\n    mean_max = cdf_max_dist.mean()\n    means.append(mean_max)\n\nmeans = np.array(means)\ntarget = 1000\nclosest_idx = np.argmin(np.abs(means - target))\noptimal_n = n_values[closest_idx]\nclosest_mean = means[closest_idx]\n\nprint(f\"\\n결과:\")\nprint(f\"1000g에 가장 가까운 평균을 만드는 n: {optimal_n}\")\nprint(f\"해당 n에서의 평균: {closest_mean:.2f}g\")\nprint(f\"목표값과의 차이: {abs(closest_mean - target):.2f}g\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n결과:\n1000g에 가장 가까운 평균을 만드는 n: 3\n해당 n에서의 평균: 997.51g\n목표값과의 차이: 2.49g\n```\n:::\n:::\n\n\n",
    "supporting": [
      "06_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}