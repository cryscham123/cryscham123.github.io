{
  "hash": "bc0dba05af6a398d4366c93894626cd6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"포아송 과정\"\ndate: 2025-07-04\ncategories: [\"확률 통계\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## 연습문제\n\n### 8-1\n\n::: {#0bbdbfd2 .cell execution_count=1}\n``` {.python .cell-code}\nfrom scipy.stats import gamma\nimport numpy as np\nfrom empiricaldist import Pmf\nimport matplotlib.pyplot as plt\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\n\nalpha = 1.4\nqs = np.linspace(0, 10, 101)\nps = gamma.pdf(qs, alpha)\nprior = Pmf(ps, qs)\nprior.normalize()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n9.889360237140306\n```\n:::\n:::\n\n\n::: {#914130ed .cell execution_count=2}\n``` {.python .cell-code}\ndef expo_pdf(t, lam):\n    return lam * np.exp(-lam * t)\n\nt1 = 11/90\nlikelihood1 = expo_pdf(t1, prior.qs)\npost1 = prior * likelihood1\npost1.normalize()\n\n# 지수분포에서 모든 시행은 독립적\nt2 = 12/90\nlikelihood2 = expo_pdf(t2, post1.qs)\npost2 = post1 * likelihood2\npost2.normalize()\n\nprior.plot(label=\"사전분포\", alpha=0.7)\npost1.plot(label=\"1골 득점 후 사후분포\", alpha=0.7)\npost2.plot(label=\"2골 득점 후 사후분포\", alpha=0.7)\nplt.xlabel(\"λ (게임당 골 수)\")\nplt.ylabel(\"확률밀도\")\nplt.title(\"독일의 골 득점률 분포\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](07_files/figure-html/cell-3-output-1.png){width=594 height=451}\n:::\n:::\n\n\n::: {#f07661e8 .cell execution_count=3}\n``` {.python .cell-code}\nfrom scipy.stats import poisson\nimport pandas as pd\nimport numpy as np\n\ndef make_poisson_pmf(lam, qs):\n    ps = poisson.pmf(qs, lam)\n    pmf = Pmf(ps, qs)\n    pmf.normalize()\n    return pmf\n\ndef make_mixture(pmf, pmf_seq):\n    df = pd.DataFrame(pmf_seq).fillna(0).transpose()\n    df *= np.array(pmf)\n    total = df.sum(axis=1)\n    return Pmf(total)\n\nremaining_time = (90 - 23) / 90\ngoals = np.arange(15)\npmf_seq = [make_poisson_pmf(lam * remaining_time, goals) for lam in post2.qs]\npred = make_mixture(post2, pmf_seq)\n\nprint(f\"예상 골 수: {sum(pred.qs[i] * pred.ps[i] for i in range(len(pred.qs))):.2f}골\")\n# 표준편차 수동 계산\nmean_val = sum(pred.qs[i] * pred.ps[i] for i in range(len(pred.qs)))\nvariance = sum((pred.qs[i] - mean_val)**2 * pred.ps[i] for i in range(len(pred.qs)))\nstd_val = variance**0.5\nprint(f\"표준편차: {std_val:.2f}골\")\n\n# 5골 이상 득점할 확률 계산\nprob_5_or_more = 1 - sum(pred.ps[i] for i in range(min(5, len(pred.ps))))\nprint(f\"\\n5골 이상 득점할 확률: {prob_5_or_more:.4f} ({prob_5_or_more*100:.2f}%)\")\n\npred.plot(color='red', alpha=0.7)\nplt.axvline(5, color='orange', linestyle='--', alpha=0.8, label='5골')\ntry:\n    # 수동으로 평균 계산\n    mean_goals = sum(pred.qs[i] * pred.ps[i] for i in range(len(pred.qs)))\n    plt.axvline(mean_goals, color='blue', linestyle='--', alpha=0.8, label=f'평균 ({mean_goals:.2f}골)')\nexcept:\n    print(\"평균 계산 중 오류 발생\")\nplt.xlabel(\"골 수\")\nplt.ylabel(\"확률\")\nplt.title(\"남은 시간 동안의 예상 골 수 분포\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n예상 골 수: 2.01골\n표준편차: 1.78골\n\n5골 이상 득점할 확률: 0.0939 (9.39%)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](07_files/figure-html/cell-4-output-2.png){width=594 height=451}\n:::\n:::\n\n\n### 8-2\n\n::: {#94cc532c .cell execution_count=4}\n``` {.python .cell-code}\ndef update_goal(prior, data):\n    posterior = prior.copy()\n    for goals in data:\n        likelihood = [poisson.pmf(goals, lam) for lam in posterior.qs]\n        posterior = posterior * likelihood\n        posterior.normalize()\n    return posterior\n```\n:::\n\n\n::: {#c1a061bf .cell execution_count=5}\n``` {.python .cell-code}\nfrance = update_goal(prior, [4])\ncroatia = update_goal(prior, [2])\n\nqs = np.linspace(0, 1, 101)\nlikelihood = expo_pdf(qs, prior.qs)\n\nfrance_post = france * likelihood\nfrance_post.normalize()\ncroatia_post = croatia * likelihood\ncroatia_post.normalize()\n\nPmf.prob_lt(france_post, croatia_post)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n0.2633977680689847\n```\n:::\n:::\n\n\n### 8-3\n\n::: {#11abb6ba .cell execution_count=6}\n``` {.python .cell-code}\nalpha = 2.8\nqs = np.linspace(0, 10, 101)\n\nprior = Pmf(gamma.pdf(qs, alpha), qs)\nprior.normalize()\n\n\nboston_posterior = update_goal(prior, [0, 2, 8, 4])\nvancouver_posterior = update_goal(prior, [1, 3, 1, 0])\n\nprior.plot(label='prior')\nboston_posterior.plot(label='boston')\nvancouver_posterior.plot(label='vancouver')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](07_files/figure-html/cell-7-output-1.png){width=575 height=412}\n:::\n:::\n\n\n::: {#7ede4cc2 .cell execution_count=7}\n``` {.python .cell-code}\npmf_seq = [make_poisson_pmf(lam, goals) for lam in prior.qs]\npred_boston = make_mixture(boston_posterior, pmf_seq)\npred_vancouver = make_mixture(vancouver_posterior, pmf_seq)\nwin = Pmf.prob_gt(pred_boston, pred_vancouver)\nwin\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n0.703863141313654\n```\n:::\n:::\n\n\n챔피언십 우승 확률은 아직은 못 구하겠다.\n\n",
    "supporting": [
      "07_files"
    ],
    "filters": [],
    "includes": {}
  }
}