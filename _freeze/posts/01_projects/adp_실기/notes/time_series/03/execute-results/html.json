{
  "hash": "57c43a934d41bcc2c8d21b733b4a2644",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"이동평균과정 모델링\"\ndate: 2025-07-11\ncategories: [\"확률 통계\", \"시계열 분석\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n- 이동편균 모델: 현잿 값이 현재와 과거 오차에 선형적으로 비례한다.\n\n::: {#d5e02d14 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\n\ndf = pd.read_csv('_data/widget.csv')\nsns.lineplot(data=df, x=df.index, y='widget_sales')\nplt.xticks(\n    [0, 30, 57, 87, 116, 145, 175, 204, 234, 264, 293, 323, 352, 382, 409, 439, 468, 498], \n    ['Jan 2019', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan 2020', 'Feb', 'Mar', 'Apr', 'May', 'Jun'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03_files/figure-html/cell-2-output-1.png){width=583 height=430}\n:::\n:::\n\n\n::: {#f610159a .cell execution_count=2}\n``` {.python .cell-code}\nfrom statsmodels.tsa.stattools import adfuller\n\nADF_result = adfuller(df['widget_sales'])\n\nADF_result[0], ADF_result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(-1.5121662069359054, 0.5274845352272601)\n```\n:::\n:::\n\n\n- 정상 시계열이 아님. 차분 진행\n\n::: {#54e29262 .cell execution_count=3}\n``` {.python .cell-code}\ndiff_df = np.diff(df['widget_sales'], n=1)\n\nADF_result = adfuller(diff_df)\nADF_result[0], ADF_result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(-10.576657780341959, 7.076922818587193e-19)\n```\n:::\n:::\n\n\n::: {#6ad03d2b .cell execution_count=4}\n``` {.python .cell-code}\nfrom statsmodels.graphics.tsaplots import plot_acf\n\nplot_acf(diff_df, lags=30)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03_files/figure-html/cell-5-output-1.png){width=583 height=432}\n:::\n:::\n\n\n- 지연 2 이후 유의하지 않음.\n- MA(2) 진행\n\n::: {#2568c04d .cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\n\ndiff_df = pd.DataFrame({'widget_sales_diff': diff_df})\ntrain, test = train_test_split(diff_df, test_size=0.1)\n```\n:::\n\n\n- MA(q)는 q 크기까지만 예측 가능.\n- 회귀적으로 예측을 진행해야함\n\n::: {#9566490a .cell execution_count=6}\n``` {.python .cell-code}\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\ndef rolling_forecast(df: pd.DataFrame, train_len: int, horizon: int, window: int, method: str) -> list:\n    total_len = train_len + horizon\n    if method == 'mean':\n        pred_mean = []\n        for i in range(train_len, total_len, window):\n            mean = np.mean(df[:i].values)\n            pred_mean.extend(mean for _ in range(window))\n        return pred_mean\n    if method == 'last':\n        pred_last_value = []\n        for i in range(train_len, total_len, window):\n            last_value = df.iloc[i-1].values[0]\n            pred_last_value.extend(last_value for _ in range(window))\n        return pred_last_value\n    if method == 'MA':\n        pred_MA = []\n        for i in range(train_len, total_len, window):\n            model = SARIMAX(df[:i], order=(0,0,2))\n            res = model.fit(disp=False)\n            predictions = res.get_prediction(0, i + window - 1)\n            oos_pred = predictions.predicted_mean.iloc[-window:]\n            pred_MA.extend(oos_pred)\n        return pred_MA\n```\n:::\n\n\n::: {#14201aa4 .cell execution_count=7}\n``` {.python .cell-code}\npred_df = test.copy()\nTRAIN_LEN = len(train)\nHORIZON = len(test)\nWINDOW = 2\n\npred_mean = rolling_forecast(diff_df, TRAIN_LEN, HORIZON, WINDOW, 'mean')\npred_last = rolling_forecast(diff_df, TRAIN_LEN, HORIZON, WINDOW, 'last')\npred_MA = rolling_forecast(diff_df, TRAIN_LEN, HORIZON, WINDOW, 'MA')\n\npred_df['pred_mean'] = pred_mean\npred_df['pred_last'] = pred_last\npred_df['pred_MA'] = pred_MA\n```\n:::\n\n\n::: {#a41a7b9a .cell execution_count=8}\n``` {.python .cell-code}\ndf['pred_widget_sales'] = pd.Series()\ndf['pred_widget_sales'].iloc[450:] = df['widget_sales'].iloc[450] + pred_df['pred_MA'].cumsum()\n```\n:::\n\n\n::: {#33259bb3 .cell execution_count=9}\n``` {.python .cell-code}\nsns.lineplot(data=df, x=df.index, y='widget_sales', label='실제 값')\nsns.lineplot(data=df, x=df.index, y='pred_widget_sales', label='MA(2)')\nplt.xticks(\n    [409, 439, 468, 498], \n    ['Mar', 'Apr', 'May', 'Jun'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03_files/figure-html/cell-10-output-1.png){width=583 height=430}\n:::\n:::\n\n\n",
    "supporting": [
      "03_files"
    ],
    "filters": [],
    "includes": {}
  }
}