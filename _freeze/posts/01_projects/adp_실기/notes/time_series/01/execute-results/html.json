{
  "hash": "65cfadcd1d8c3ea165966484e18b96d2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"단순 미래 예측\"\ndate: 2025-07-09\ncategories: [\"확률 통계\", \"시계열 분석\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## 베이스라인 모델 정의\n\n- 단순예측법: 최근의 자료가 미래에 대한 최선의 추정치 $\\hat{p_{t+1}} = p_t$\n- 추세분석: 전기와 현기 사이의 추세를 다음 기의 판매예측에 반영하는 방법. $\\hat{p_{t+1}} = p_t + p_t - p_{t-1}$\n- 단순 이동평균법: time window를 계속 이동하면서 평균 구하는거\n    - time window ↑: 먼 과거까지 보겠다\n- 가중 이동평균법: 가중치를 다르게 부여\n\n### all 평균 (추세)\n\n::: {#8a1c0c83 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\ndf = pd.read_csv('_data/jj.csv')\n\ntrain = df[:-4]\ntest = df[-4:]\n\nhistorical_mean = np.mean(train['data'])\nhistorical_mean\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\n4.308499987499999\n```\n:::\n:::\n\n\n::: {#daf8cb01 .cell execution_count=2}\n``` {.python .cell-code}\ntest['pred_mean'] = historical_mean\n```\n:::\n\n\n::: {#d3a8ddc1 .cell execution_count=3}\n``` {.python .cell-code}\ndef mape(y_true, y_pred):\n    return np.mean(np.abs(y_true - y_pred) / y_true) * 100\n\nmape_hist_mean = mape(test['data'], test['pred_mean'])\nmape_hist_mean\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```\n70.00752579965119\n```\n:::\n:::\n\n\n::: {#45240439 .cell execution_count=4}\n``` {.python .cell-code}\nsns.lineplot(data=train, x='date', y='data', label='훈련')\nsns.lineplot(data=test, x='date', y='data', label='테스트')\nsns.lineplot(data=test, x='date', y='pred_mean', label='단순 예측')\nplt.xticks(np.arange(0, 85, 8), np.arange(1960, 1981, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\n([<matplotlib.axis.XTick at 0x7d6386b6cc50>,\n  <matplotlib.axis.XTick at 0x7d6386b6c3e0>,\n  <matplotlib.axis.XTick at 0x7d63871faa50>,\n  <matplotlib.axis.XTick at 0x7d6384124b90>,\n  <matplotlib.axis.XTick at 0x7d63841262a0>,\n  <matplotlib.axis.XTick at 0x7d6384125610>,\n  <matplotlib.axis.XTick at 0x7d6384126b40>,\n  <matplotlib.axis.XTick at 0x7d6384127fb0>,\n  <matplotlib.axis.XTick at 0x7d63841245f0>,\n  <matplotlib.axis.XTick at 0x7d6384124f80>,\n  <matplotlib.axis.XTick at 0x7d6384127170>],\n [Text(0, 0, '1960'),\n  Text(8, 0, '1962'),\n  Text(16, 0, '1964'),\n  Text(24, 0, '1966'),\n  Text(32, 0, '1968'),\n  Text(40, 0, '1970'),\n  Text(48, 0, '1972'),\n  Text(56, 0, '1974'),\n  Text(64, 0, '1976'),\n  Text(72, 0, '1978'),\n  Text(80, 0, '1980')])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](01_files/figure-html/cell-5-output-2.png){width=583 height=430}\n:::\n:::\n\n\n### 최근만 평균 (추세)\n\n::: {#eff49d97 .cell execution_count=5}\n``` {.python .cell-code}\nlast_year_mean = np.mean(train.iloc[-4:]['data'])\ntest['pred_last_yr_mean'] = last_year_mean\nmape_last_year_mean = mape(test['data'], test['pred_last_yr_mean'])\nmape_last_year_mean\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n15.5963680725103\n```\n:::\n:::\n\n\n::: {#c8275b72 .cell execution_count=6}\n``` {.python .cell-code}\nsns.lineplot(data=train, x='date', y='data', label='훈련')\nsns.lineplot(data=test, x='date', y='data', label='테스트')\nsns.lineplot(data=test, x='date', y='pred_last_yr_mean', label='최근 예측')\nplt.xticks(np.arange(0, 85, 8), np.arange(1960, 1981, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n([<matplotlib.axis.XTick at 0x7d6384149a60>,\n  <matplotlib.axis.XTick at 0x7d6386b6ee10>,\n  <matplotlib.axis.XTick at 0x7d6384147d40>,\n  <matplotlib.axis.XTick at 0x7d6386ba21e0>,\n  <matplotlib.axis.XTick at 0x7d63d5ec6930>,\n  <matplotlib.axis.XTick at 0x7d63d5ec7b00>,\n  <matplotlib.axis.XTick at 0x7d63d5ec4620>,\n  <matplotlib.axis.XTick at 0x7d63d5ec45f0>,\n  <matplotlib.axis.XTick at 0x7d63d5ec7770>,\n  <matplotlib.axis.XTick at 0x7d63d5ec7380>,\n  <matplotlib.axis.XTick at 0x7d63d5ec59d0>],\n [Text(0, 0, '1960'),\n  Text(8, 0, '1962'),\n  Text(16, 0, '1964'),\n  Text(24, 0, '1966'),\n  Text(32, 0, '1968'),\n  Text(40, 0, '1970'),\n  Text(48, 0, '1972'),\n  Text(56, 0, '1974'),\n  Text(64, 0, '1976'),\n  Text(72, 0, '1978'),\n  Text(80, 0, '1980')])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](01_files/figure-html/cell-7-output-2.png){width=583 height=430}\n:::\n:::\n\n\n### 단순 예측법\n\n::: {#bde243c3 .cell execution_count=7}\n``` {.python .cell-code}\nlast = train.iloc[-1]['data']\ntest['pred_last'] = last\nmape_last = mape(test['data'], test['pred_last'])\nmape_last\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n30.457277908606535\n```\n:::\n:::\n\n\n::: {#6897fd8e .cell execution_count=8}\n``` {.python .cell-code}\nsns.lineplot(data=train, x='date', y='data', label='훈련')\nsns.lineplot(data=test, x='date', y='data', label='테스트')\nsns.lineplot(data=test, x='date', y='pred_last', label='단순 예측')\nplt.xticks(np.arange(0, 85, 8), np.arange(1960, 1981, 2))\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n([<matplotlib.axis.XTick at 0x7d6385e82030>,\n  <matplotlib.axis.XTick at 0x7d638413a810>,\n  <matplotlib.axis.XTick at 0x7d6385e8f140>,\n  <matplotlib.axis.XTick at 0x7d6386ba1ca0>,\n  <matplotlib.axis.XTick at 0x7d6385ed0500>,\n  <matplotlib.axis.XTick at 0x7d6385ed2ff0>,\n  <matplotlib.axis.XTick at 0x7d6385ed0ec0>,\n  <matplotlib.axis.XTick at 0x7d6385ed1c10>,\n  <matplotlib.axis.XTick at 0x7d6385ceca40>,\n  <matplotlib.axis.XTick at 0x7d6385ed3710>,\n  <matplotlib.axis.XTick at 0x7d6385ced160>],\n [Text(0, 0, '1960'),\n  Text(8, 0, '1962'),\n  Text(16, 0, '1964'),\n  Text(24, 0, '1966'),\n  Text(32, 0, '1968'),\n  Text(40, 0, '1970'),\n  Text(48, 0, '1972'),\n  Text(56, 0, '1974'),\n  Text(64, 0, '1976'),\n  Text(72, 0, '1978'),\n  Text(80, 0, '1980')])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](01_files/figure-html/cell-9-output-2.png){width=583 height=430}\n:::\n:::\n\n\n### 계절적 예측\n\n::: {#100847ba .cell execution_count=9}\n``` {.python .cell-code}\ntest['pred_last_season'] = train.iloc[-4:]['data'].values\nmape_naive_seasonal = mape(test['data'], test['pred_last_season'])\nmape_naive_seasonal\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\n11.561658552433654\n```\n:::\n:::\n\n\n",
    "supporting": [
      "01_files"
    ],
    "filters": [],
    "includes": {}
  }
}