{
  "hash": "b100cd6968c1fdd6167a2ed92a735353",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"수량 추정\"\ndate: 2025-06-19\ncategories: [\"확률 통계\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## 기관차 문제\n\n- 각 철도를 지나가는 기관차에 1부터 N까지의 순서로 번호를 붙인다.\n- 60번 번호가 붙은 기관차를 보았다.\n- 이 철도에 몇 개의 기관차가 지나가는지 추정해보자\n\n::: {#d281b291 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom empiricaldist import Pmf\n\nhypos = np.arange(1, 1001)\nprior = Pmf(1, hypos)\n```\n:::\n\n\n- 가정: N은 1부터 1000까지의 값 중 한 값이 동일한 확률로 선택될 수 있다.\n\n::: {#84384a05 .cell execution_count=2}\n``` {.python .cell-code}\ndef update_train(pmf, data):\n  hypos = pmf.qs\n  likelihood = 1 / hypos\n  likelihood[(data > hypos)] = 0\n  pmf *= likelihood\n  pmf.normalize()\n```\n:::\n\n\n::: {#ea4c4c56 .cell execution_count=3}\n``` {.python .cell-code}\ndata = 60\nposterior = prior.copy()\nupdate_train(posterior, data)\n```\n:::\n\n\n::: {#3e015dd1 .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\n\nposterior.plot(label='60번 기관차 발견 시 전체 기관차 수의 사후확률', color='C5')\nplt.legend()\nplt.title('사후 확률')\nplt.xlabel('기관차 수')\nplt.ylabel('PMF')\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nText(0, 0.5, 'PMF')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_files/figure-html/cell-5-output-2.png){width=601 height=451}\n:::\n:::\n\n\n::: {#a568a1bf .cell execution_count=5}\n``` {.python .cell-code}\nposterior.max_prob()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nnp.int64(60)\n```\n:::\n:::\n\n\n- 당연하다는 듯이 60이 최선의 선택. 하지만 이는 별로 도움이 안됨.\n- 대안으로 사후확률의 평균을 구해본다.\n\n::: {#17fe6dec .cell execution_count=6}\n``` {.python .cell-code}\nposterior.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nnp.float64(333.41989326370776)\n```\n:::\n:::\n\n\n- 해당 값을 선택하는 것이 장기적으로 좋은 선택.\n\n::: {#458c8c17 .cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.DataFrame(columns=['사후확률 분포 평균'])\ndf.index.name = '상한값'\n\ndataset = [30, 60, 90]\n\nfor high in [500, 1000, 2000]:\n    hypos = np.arange(1, high+1)\n    pmf = Pmf(1, hypos)\n    for data in dataset:\n        update_train(pmf, data)\n    df.loc[high] = pmf.mean()\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>사후확률 분포 평균</th>\n    </tr>\n    <tr>\n      <th>상한값</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>500</th>\n      <td>151.849588</td>\n    </tr>\n    <tr>\n      <th>1000</th>\n      <td>164.305586</td>\n    </tr>\n    <tr>\n      <th>2000</th>\n      <td>171.338181</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n- 하지만 상한값의 범위의 변화에 따른 사후확률 분포의 평균값이 크게 달라진다.\n- 이럴때는 2가지 방법이 있다.\n  1. 데이터를 더 확보\n  1. 배경지식을 더 확보해서 더 나은 사전확률을 선택\n\n## 멱법칙 사전확률\n\n- 기관차 수는 멱법칙을 주로 따르는 것으로 알려져 있음\n- 더 적합한 사전확률은 안정적인 사전확률을 제공할 수 있다.\n\n::: {#2b51efba .cell execution_count=8}\n``` {.python .cell-code}\nalpha = 1.0\nps = hypos ** (-alpha)\npower = Pmf(ps, hypos, name='power law')\npower.normalize()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nnp.float64(8.178368103610282)\n```\n:::\n:::\n\n\n::: {#6bb8fba4 .cell execution_count=9}\n``` {.python .cell-code}\nuniform = Pmf(1, hypos, name='uniform')\nuniform.normalize()\n\npower.plot(label='power', color='skyblue')\nuniform.plot(label='uniform', color='pink')\nplt.legend()\nplt.title('사전확률 분포')\nplt.xlabel('기관차 수')\nplt.ylabel('PMF')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nText(0, 0.5, 'PMF')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_files/figure-html/cell-10-output-2.png){width=594 height=451}\n:::\n:::\n\n\n::: {#8439e576 .cell execution_count=10}\n``` {.python .cell-code}\nupdate_train(uniform, 60)\nupdate_train(power, 60)\n\npower.plot(label='power', color='skyblue')\nuniform.plot(label='uniform', color='pink')\nplt.legend()\nplt.title('사후확률 분포')\nplt.xlabel('기관차 수')\nplt.ylabel('PMF')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nText(0, 0.5, 'PMF')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](04_files/figure-html/cell-11-output-2.png){width=609 height=451}\n:::\n:::\n\n\n::: {#c94370f2 .cell execution_count=11}\n``` {.python .cell-code}\ndf = pd.DataFrame(columns=['사후확률 분포 평균'])\ndf.index.name = '상한값'\n\nalpha = 1.0\ndataset = [30, 60, 90]\n\nfor high in [500, 1000, 2000]:\n    hypos = np.arange(1, high+1)\n    ps = hypos**(-alpha)\n    power = Pmf(ps, hypos)\n    for data in dataset:\n        update_train(power, data)\n    df.loc[high] = power.mean()\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>사후확률 분포 평균</th>\n    </tr>\n    <tr>\n      <th>상한값</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>500</th>\n      <td>130.708470</td>\n    </tr>\n    <tr>\n      <th>1000</th>\n      <td>133.275231</td>\n    </tr>\n    <tr>\n      <th>2000</th>\n      <td>133.997463</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 신뢰구간\n\n::: {#d01c37fb .cell execution_count=12}\n``` {.python .cell-code}\npower.credible_interval(0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\narray([ 91., 243.])\n```\n:::\n:::\n\n\n## 연습문제\n\n### 5-1\n\n::: {#771ba34a .cell execution_count=13}\n``` {.python .cell-code}\nfrom scipy.stats import binom\n\ndef update(pmf, k, p):\n    likelihood = binom.pmf(k, pmf.qs, p)\n    pmf *= likelihood\n    pmf.normalize()\n\nhypos = np.arange(1, 2001)\nprior = Pmf(1, hypos)\n\nposterior = prior.copy()\n\nupdate(posterior, 2, 1/365)\nprint(f\"5월 11일 데이터 적용 후 평균 인원수: {posterior.mean():.1f}\")\n\nupdate(posterior, 1, 1/365)\nprint(f\"5월 23일 데이터 적용 후 평균 인원수: {posterior.mean():.1f}\")\n\nupdate(posterior, 0, 1/365)\nprint(f\"8월 1일 데이터 적용 후 평균 인원수: {posterior.mean():.1f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5월 11일 데이터 적용 후 평균 인원수: 957.1\n5월 23일 데이터 적용 후 평균 인원수: 721.7\n8월 1일 데이터 적용 후 평균 인원수: 486.2\n```\n:::\n:::\n\n\n::: {#8a94c03b .cell execution_count=14}\n``` {.python .cell-code}\nestimated_people = posterior.mean()\nprint(f\"추정된 강당 인원수: {estimated_people:.1f}명\")\n\nprob_over_1200 = posterior[posterior.qs > 1200].sum()\nprint(f\"1200명을 초과할 확률: {prob_over_1200:.4f} ({prob_over_1200*100:.2f}%)\")\n\nci_90 = posterior.credible_interval(0.9)\nprint(f\"90% 신뢰구간: [{ci_90[0]:.0f}, {ci_90[1]:.0f}]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n추정된 강당 인원수: 486.2명\n1200명을 초과할 확률: 0.0112 (1.12%)\n90% 신뢰구간: [166, 942]\n```\n:::\n:::\n\n\n### 5-2\n\n::: {#f7c3d55e .cell execution_count=15}\n``` {.python .cell-code}\ndef rabbit_likelihood(n):\n    return ((n - 1) / n) * (1/n) * (1/n) * 3\n\nhypos = np.arange(4, 11)\nprior = Pmf(1, hypos)\n\nlikelihood = [rabbit_likelihood(n) for n in hypos]\n\nposterior = prior.copy()\nposterior *= likelihood\nposterior.normalize()\n\nprint(f\"\\n추정 토끼 수 (평균): {posterior.mean():.2f}마리\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n추정 토끼 수 (평균): 5.92마리\n```\n:::\n:::\n\n\n### 5-3\n\n::: {#0da75a95 .cell execution_count=16}\n``` {.python .cell-code}\ndef update_remain(pmf, data):\n    hypos = pmf.qs\n    likelihood = 1 / hypos\n    likelihood[(hypos < data)] = 0\n    pmf *= likelihood\n    pmf.normalize()\n\nhypos = np.arange(0, 1096)\nprior = Pmf(1, hypos)\nprior.normalize()\n\nupdate_remain(prior, 1095)\nprior.plot(label='사후확률', color='pink')\nplt.legend()\nplt.show()\n```\n:::\n\n\n### 5-5\n\n::: {#40fc9018 .cell execution_count=17}\n``` {.python .cell-code}\nimport numpy as np\nfrom empiricaldist import Pmf\n\nhypos_short = np.arange(0, 201) # 10억 단위\nprior_short = Pmf(1, hypos_short, name=\"short\")\nprior_short.normalize()\n\nhypos_long = np.arange(0, 2001)\nprior_long = Pmf(1, hypos_long, name=\"long\")\nprior_long.normalize()\n\nlikelihood_ps = {}\nfor pmf in [prior_short, prior_long]:\n    likelihood = 1 / pmf.qs\n    likelihood[(pmf.qs < 108)] = 0\n    pmf *= likelihood\n    pmf.normalize()\n    likelihood_ps[pmf.name] = pmf(108)\n    pmf.plot(label=f\"{pmf.name}: {pmf(108)}\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](04_files/figure-html/cell-18-output-1.png){width=583 height=412}\n:::\n:::\n\n\n::: {#3dd47d0d .cell execution_count=18}\n``` {.python .cell-code}\nprior = Pmf.from_seq(['short', 'long'])\nfor hypos in prior.index:\n    prior.loc[hypos] *= likelihood_ps[hypos]\n\nprior.normalize()\nprior\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>probs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>long</th>\n      <td>0.175733</td>\n    </tr>\n    <tr>\n      <th>short</th>\n      <td>0.824267</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "04_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}