{
  "hash": "29f4e5abad3c5c6bdf1222325b475071",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"의사결정분석\"\ndate: 2025-07-06\ncategories: [\"확률 통계\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n::: {#e3650bbd .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\ndf1 = pd.read_csv('https://raw.githubusercontent.com/AllenDowney/ThinkBayes2/master/data/showcases.2011.csv', index_col=0, skiprows=[1]).dropna().transpose()\ndf2 = pd.read_csv('https://raw.githubusercontent.com/AllenDowney/ThinkBayes2/master/data/showcases.2012.csv', index_col=0, skiprows=[1]).dropna().transpose()\ndf = pd.concat([df1, df2], ignore_index=True)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Showcase 1</th>\n      <th>Showcase 2</th>\n      <th>Bid 1</th>\n      <th>Bid 2</th>\n      <th>Difference 1</th>\n      <th>Difference 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>50969.0</td>\n      <td>45429.0</td>\n      <td>42000.0</td>\n      <td>34000.0</td>\n      <td>8969.0</td>\n      <td>11429.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>21901.0</td>\n      <td>34061.0</td>\n      <td>14000.0</td>\n      <td>59900.0</td>\n      <td>7901.0</td>\n      <td>-25839.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>32815.0</td>\n      <td>53186.0</td>\n      <td>32000.0</td>\n      <td>45000.0</td>\n      <td>815.0</td>\n      <td>8186.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>44432.0</td>\n      <td>31428.0</td>\n      <td>27000.0</td>\n      <td>38000.0</td>\n      <td>17432.0</td>\n      <td>-6572.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24273.0</td>\n      <td>22320.0</td>\n      <td>18750.0</td>\n      <td>23000.0</td>\n      <td>5523.0</td>\n      <td>-680.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>308</th>\n      <td>25375.0</td>\n      <td>31986.0</td>\n      <td>36000.0</td>\n      <td>32000.0</td>\n      <td>-10625.0</td>\n      <td>-14.0</td>\n    </tr>\n    <tr>\n      <th>309</th>\n      <td>24949.0</td>\n      <td>30696.0</td>\n      <td>20500.0</td>\n      <td>31000.0</td>\n      <td>4449.0</td>\n      <td>-304.0</td>\n    </tr>\n    <tr>\n      <th>310</th>\n      <td>23662.0</td>\n      <td>22329.0</td>\n      <td>26000.0</td>\n      <td>20000.0</td>\n      <td>-2338.0</td>\n      <td>2329.0</td>\n    </tr>\n    <tr>\n      <th>311</th>\n      <td>23704.0</td>\n      <td>34325.0</td>\n      <td>23800.0</td>\n      <td>34029.0</td>\n      <td>-96.0</td>\n      <td>296.0</td>\n    </tr>\n    <tr>\n      <th>312</th>\n      <td>20898.0</td>\n      <td>23876.0</td>\n      <td>28000.0</td>\n      <td>25000.0</td>\n      <td>-7102.0</td>\n      <td>-1124.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>313 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#38dec32f .cell execution_count=2}\n``` {.python .cell-code}\nfrom scipy.stats import gaussian_kde\nfrom empiricaldist import Pmf\n\ndef kde_from_sample(sample, qs):\n    kde = gaussian_kde(sample)\n    ps = kde(qs)\n    pmf = Pmf(ps, qs)\n    pmf.normalize()\n    return pmf\n\nqs = np.linspace(0, 80000, 81)\nprior1 = kde_from_sample(df['Showcase 1'], qs)\nprior2 = kde_from_sample(df['Showcase 2'], qs)\n\nprior1.plot(label='진열대 1번의 사전확률')\nprior2.plot(label='진열대 2번의 사전확률')\nplt.xlabel('진열대 물건 총 금액')\nplt.ylabel('PMF')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-3-output-1.png){width=594 height=430}\n:::\n:::\n\n\n::: {#3b36e904 .cell execution_count=3}\n``` {.python .cell-code}\nsample_diff1 = df['Bid 1'] - df['Showcase 1']\nsample_diff2 = df['Bid 2'] - df['Showcase 2']\n\nqs = np.linspace(-40000, 20000, 61)\nkde_diff1 = kde_from_sample(sample_diff1, qs)\nkde_diff2 = kde_from_sample(sample_diff2, qs)\n\nkde_diff1.plot(label='1번의 차이')\nkde_diff2.plot(label='2번의 차이')\nplt.xlabel('차이 금액')\nplt.ylabel('PMF')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-4-output-1.png){width=594 height=433}\n:::\n:::\n\n\n::: {#1c4abf2c .cell execution_count=4}\n``` {.python .cell-code}\nfrom scipy.stats import norm\n\nstd_diff1 = sample_diff1.std()\nstd_diff2 = sample_diff2.std()\n\nerror_dist1 = norm(0, std_diff1)\nerror_dist2 = norm(0, std_diff2)\n\nguess1 = 23000\nerror1 = guess1 - prior1.qs\nlikelihood1 = error_dist1.pdf(error1)\nposterior1 = prior1 * likelihood1\nposterior1.normalize()\n\nguess2 = 38000\nerror2 = guess2 - prior2.qs\nlikelihood2 = error_dist2.pdf(error2)\nposterior2 = prior2 * likelihood2\nposterior2.normalize()\n\nposterior1.plot(label='1번의 사후분포')\nposterior2.plot(label='2번의 사후분포')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-5-output-1.png){width=575 height=412}\n:::\n:::\n\n\n::: {#2bd98e5e .cell execution_count=5}\n``` {.python .cell-code}\ndef compute_prob_win(my_diff, op_diff):\n    if my_diff > 0:\n        return 0\n    p1 = np.mean(op_diff > 0)\n    p2 = np.mean(op_diff < my_diff)\n    return p1 + p2\n\nxs = np.linspace(-30000, 5000, 121)\nys1 = [compute_prob_win(x, sample_diff2) for x in xs]\nys2 = [compute_prob_win(x, sample_diff1) for x in xs]\n\nplt.plot(xs, ys1, label='1번 참가자가 이길 확률')\nplt.plot(xs, ys2, label='2번 참가자가 이길 확률')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-6-output-1.png){width=568 height=412}\n:::\n:::\n\n\n::: {#33a23ce4 .cell execution_count=6}\n``` {.python .cell-code}\ndef total_prob_win(bid, posterior, op_diff):\n    total = 0\n    for price, prob in posterior.items():\n        diff = bid - price\n        total += prob * compute_prob_win(diff, op_diff)\n    return total\n\nbids1 = posterior1.qs\nprobs1 = [total_prob_win(bid, posterior1, sample_diff2) for bid in bids1]\nprob1_wins = pd.Series(probs1, index=bids1)\n\nbids2 = posterior2.qs\nprobs2 = [total_prob_win(bid, posterior2, sample_diff1) for bid in bids2]\nprob2_wins = pd.Series(probs2, index=bids2)\n\nprob1_wins.plot(label=f'1번 참가자의 이길 확률 (최적: {prob1_wins.idxmax()})')\nplt.axvline(x=prob1_wins.idxmax(), color='b', linestyle=':')\n\nprob2_wins.plot(label=f'2번 참가자의 이길 확률 (최적: {prob2_wins.idxmax()})')\nplt.axvline(x=prob2_wins.idxmax(), color='r', linestyle=':')\n\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-7-output-1.png){width=568 height=412}\n:::\n:::\n\n\n## 연습문제\n\n### 9-6\n\n**열차 도착 시간에 대한 분포(z)**\n\n::: {#76bd82c2 .cell execution_count=7}\n``` {.python .cell-code}\nobserved_gap_times = [\n    428.0, 705.0, 407.0, 465.0, 433.0, 425.0, 204.0, 506.0, 143.0, 351.0, \n    450.0, 598.0, 464.0, 749.0, 341.0, 586.0, 754.0, 256.0, 378.0, 435.0, \n    176.0, 405.0, 360.0, 519.0, 648.0, 374.0, 483.0, 537.0, 578.0, 534.0, \n    577.0, 619.0, 538.0, 331.0, 186.0, 629.0, 193.0, 360.0, 660.0, 484.0, \n    512.0, 315.0, 457.0, 404.0, 740.0, 388.0, 357.0, 485.0, 567.0, 160.0, \n    428.0, 387.0, 901.0, 187.0, 622.0, 616.0, 585.0, 474.0, 442.0, 499.0, \n    437.0, 620.0, 351.0, 286.0, 373.0, 232.0, 393.0, 745.0, 636.0, 758.0]\nzs = np.array(observed_gap_times) / 60\nqs = np.linspace(0, 20, 101)\npmf_z = kde_from_sample(zs, qs)\n\nlikelihood = pmf_z.qs\nposterior_z = pmf_z * likelihood\nposterior_z.normalize()\n\npmf_z.plot(label=f'사전분포 (평균: {pmf_z.mean():.2f})')\nplt.axvline(x=pmf_z.mean(), color='b', linestyle=':')\n\nposterior_z.plot(label=f'사후분포 (평균: {posterior_z.mean():.2f})')\nplt.axvline(x=posterior_z.mean(), color='r', linestyle=':')\nplt.legend()\nplt.title('열차 도착 시간 간격')\nplt.xlabel('시간')\nplt.ylabel('PMF')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nText(0, 0.5, 'PMF')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-8-output-2.png){width=601 height=451}\n:::\n:::\n\n\n- 내가 관찰하는 열차 지연 시간은 실제 열차 지연시간보다 더 길다.\n- 예를들어 5분 간격의 길이와 15분 간격의 길이가 있다면, 더 긴 간격의 중간에 내가 도착할 확률이 더 높기 때문\n- 그래서 사후분포가 오른쪽으로 이동함. (신기하네)\n\n**내가 도착했을 때 이미 지난 시간에 대한 분포(x)**\n\n::: {#293805ab .cell execution_count=8}\n``` {.python .cell-code}\ndef make_mixture(pmf, pmf_seq):\n    df = pd.DataFrame(pmf_seq).fillna(0).transpose()\n    df *= np.array(pmf)\n    total = df.sum(axis=1)\n    return Pmf(total)\n\ndef make_elapsed_dist(gap, qs):\n    qs = qs[qs <= gap]\n    n = len(qs)\n    return Pmf(1/n, qs)\n\nqs = posterior_z.qs\npmf_seq = [make_elapsed_dist(gap, qs) for gap in qs]\npmf_x = make_mixture(posterior_z, pmf_seq)\n```\n:::\n\n\n- z의 각 간격별 지난 시간을 균등분포로 지정\n\n::: {#4e1ebcd4 .cell execution_count=9}\n``` {.python .cell-code}\nfrom scipy.stats import poisson\n\nlam = 2\nnum_passengers = 10\nlikelihood = poisson(lam * pmf_x.qs).pmf(num_passengers)\nposterior_x = pmf_x * likelihood\nposterior_x.normalize()\npmf_x.plot(label='사전분포', color='C1')\nposterior_x.plot(label='사후분포', color='C2')\nplt.legend()\nplt.title('10명이 기다리고 있는것을 관찰한 이전과 이후 분포')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nText(0.5, 1.0, '10명이 기다리고 있는것을 관찰한 이전과 이후 분포')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-10-output-2.png){width=575 height=432}\n:::\n:::\n\n\n- 일반적으로 분당 2명의 승객이 기다림. 가능도는 포아송 분포를 따름.\n- 10명이 기다리고 있는것을 관찰했을 때의 사후분포를 구해준다.\n\n**다음 열차 도착까지의 남은 시간에 대한 분포**\n\n::: {#27e4be23 .cell execution_count=10}\n``` {.python .cell-code}\nposterior_y = Pmf.sub_dist(posterior_z, posterior_x)\nnonneg = (posterior_y.qs >= 0)\nposterior_y = Pmf(posterior_y[nonneg])\nposterior_y.normalize()\n\nposterior_x.make_cdf().plot(label='x의 사후분포', color='C2')\nposterior_y.make_cdf().plot(label='y의 사후분포', color='C3')\nposterior_z.make_cdf().plot(label='z의 사후분포', color='C4')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-11-output-1.png){width=568 height=412}\n:::\n:::\n\n\n**결정 분석**\n\n::: {#8fc8102c .cell execution_count=11}\n``` {.python .cell-code}\nsample = posterior_z.sample(260)\ndelays = [30, 40, 50]\naugmented_sample = np.append(sample, delays)\n\nqs = np.linspace(0, 60, 101)\naugmented_posterior_z = kde_from_sample(augmented_sample, qs)\naugmented_posterior_z.plot(label='보강된 z의 사후분포', color='C4')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-12-output-1.png){width=575 height=412}\n:::\n:::\n\n\n- 이전 데이터에서는 긴 지연시간에 대한 데이터가 없기 때문에 sampling을 통해 임의로 만들어줌\n\n::: {#71abd276 .cell execution_count=12}\n``` {.python .cell-code}\nqs = augmented_posterior_z.qs\npmf_seq = [make_elapsed_dist(gap, qs) for gap in qs]\npmf_x = make_mixture(augmented_posterior_z, pmf_seq)\nlam = 2\ndef compute_posterior_y(num_passengers):\n    likelihood = poisson(lam * qs).pmf(num_passengers)\n    posterior_x = pmf_x * likelihood\n    posterior_x.normalize()\n    posterior_y = Pmf.sub_dist(augmented_posterior_z, posterior_x)\n    nonneg = (posterior_y.qs >= 0)\n    posterior_y = Pmf(posterior_y[nonneg])\n    posterior_y.normalize()\n    return posterior_y\n\nnums = np.arange(0, 37, 3)\nposteriors = [compute_posterior_y(num) for num in nums]\nmean_wait = [posterior_y.mean()\n             for posterior_y in posteriors]\nplt.plot(nums, mean_wait)\nplt.title('승객 수에 따른 예상 대기 시간')\nplt.xlabel('승객 수')\nplt.ylabel('예상 다음 도착 시간')\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nText(0, 0.5, '예상 다음 도착 시간')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-13-output-2.png){width=576 height=451}\n:::\n:::\n\n\n::: {#eecca7c9 .cell execution_count=13}\n``` {.python .cell-code}\nprob_late = [1 - posterior_y.make_cdf()(15) \n             for posterior_y in posteriors]\nplt.plot(nums, prob_late)\nplt.xlabel('승객 수')\nplt.ylabel('늦을 확률')\nplt.title('승객 수에 따른 늦을 확률')\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nText(0.5, 1.0, '승객 수에 따른 늦을 확률')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-14-output-2.png){width=594 height=451}\n:::\n:::\n\n\n- lam이 만약 알려져 있지 않을 경우, lam에 대해서도 분포를 계산해야함 (쉽지 않네)\n\n### 9-7\n\n::: {#2dcc4a69 .cell execution_count=14}\n``` {.python .cell-code}\ndef print_cost(printed):\n    if printed < 100:\n        return printed * 5\n    else:\n        return printed * 4.5\n\ndef total_income(printed, orders):\n    sold = min(printed, np.sum(orders))\n    return sold * 10\n\ndef inventory_cost(printed, orders):\n    excess = printed - np.sum(orders)\n    if excess > 0:\n        return excess * 2\n    else:\n        return 0\n\ndef out_of_stock_cost(printed, orders):\n    weeks = len(orders)\n    total_orders = np.cumsum(orders)\n    for i, total in enumerate(total_orders):\n        if total > printed:\n            return (weeks-i) * 50\n    return 0\n\ndef compute_profit(printed, orders):\n    return (total_income(printed, orders) -\n            print_cost(printed)-\n            out_of_stock_cost(printed, orders) -\n            inventory_cost(printed, orders))\n```\n:::\n\n\n::: {#048dab5f .cell execution_count=15}\n``` {.python .cell-code}\nfrom scipy.stats import gamma\n\nalpha = 9\nqs = np.linspace(0, 25, 101)\nps = gamma.pdf(qs, alpha)\npmf = Pmf(ps, qs)\npmf.normalize()\npmf.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nnp.float64(8.998788382371902)\n```\n:::\n:::\n\n\n::: {#b7568b7e .cell execution_count=16}\n``` {.python .cell-code}\nrates = pmf.choice(1000)\nnp.mean(rates)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nnp.float64(9.0905)\n```\n:::\n:::\n\n\n::: {#b8cc9fe4 .cell execution_count=17}\n``` {.python .cell-code}\norder_array = np.random.poisson(rates, size=(8, 1000)).transpose()\norder_array[:5, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([[14, 11, 11, 12, 13,  7, 14, 13],\n       [10,  4, 11, 12, 16, 17, 15,  7],\n       [10,  6,  7,  7, 13, 18,  6, 12],\n       [14, 14, 13,  9, 11,  7, 11, 20],\n       [ 6,  7, 11,  5,  9,  7, 13,  8]])\n```\n:::\n:::\n\n\n::: {#d8a35063 .cell execution_count=18}\n``` {.python .cell-code}\ndef compute_expected_profits(printed, order_array):\n    profits = [compute_profit(printed, orders)\n               for orders in order_array]\n    return np.mean(profits)\n```\n:::\n\n\n::: {#ac2546c0 .cell execution_count=19}\n``` {.python .cell-code}\ncompute_expected_profits(70, order_array)\ncompute_expected_profits(80, order_array)\ncompute_expected_profits(90, order_array)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nnp.float64(169.852)\n```\n:::\n:::\n\n\n::: {#1f591a46 .cell execution_count=20}\n``` {.python .cell-code}\nprinted_array = np.arange(70, 110)\nt = [compute_expected_profits(printed, order_array)\n                    for printed in printed_array]\nexpected_profits = pd.Series(t, printed_array)\n```\n:::\n\n\n::: {#5234cea4 .cell execution_count=21}\n``` {.python .cell-code}\nexpected_profits.plot(label='')\n```\n\n::: {.cell-output .cell-output-display}\n![](08_files/figure-html/cell-22-output-1.png){width=572 height=412}\n:::\n:::\n\n\n",
    "supporting": [
      "08_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}