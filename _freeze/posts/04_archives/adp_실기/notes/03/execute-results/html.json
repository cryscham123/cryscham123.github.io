{
  "hash": "2ff25de52d3fb0c4b540f069528dd78d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"데이터 전처리\"\ndate: 2025-01-02\ncategories: [\"데이터 분석\"]\ndirectories: [\"adp_실기\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## 데이터 전처리의 의미\n\n1. 데이터 클리닝\n2. 데이터 통합\n3. 데이터 변환\n4. 데이터 축소\n5. 불균형 데이터 처리\n6. 데이터 분할\n\n## 이상치 확인 및 정제\n\n### 이상치 확인\n\n::: {#2f10903e .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_wine\n\nwine_load = load_wine()\nwine = pd.DataFrame(wine_load.data, columns=wine_load.feature_names)\nwine['class'] = wine_load.target\nwine['class'] = wine['class'].map({0: 'class_0', 1: 'class_1', 2: 'class_2'})\n\nplt.boxplot(wine['color_intensity'], whis=1.5)\nplt.title('Boxplot of color_intensity')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03_files/figure-html/cell-2-output-1.png){width=566 height=431}\n:::\n:::\n\n\n::: {#b2a68752 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\ndef outliers_iqr(dt, col):\n    q1, q3 = np.percentile(dt[col], [25, 75])\n    iqr = q3 - q1\n    lower_bound = q1 - (iqr * 1.5)\n    upper_bound = q3 + (iqr * 1.5)\n    return dt[(dt[col] < lower_bound) | (dt[col] > upper_bound)]\n\noutliers = outliers_iqr(wine, 'color_intensity')\noutliers\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>alcohol</th>\n      <th>malic_acid</th>\n      <th>ash</th>\n      <th>alcalinity_of_ash</th>\n      <th>magnesium</th>\n      <th>total_phenols</th>\n      <th>flavanoids</th>\n      <th>nonflavanoid_phenols</th>\n      <th>proanthocyanins</th>\n      <th>color_intensity</th>\n      <th>hue</th>\n      <th>od280/od315_of_diluted_wines</th>\n      <th>proline</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>151</th>\n      <td>12.79</td>\n      <td>2.67</td>\n      <td>2.48</td>\n      <td>22.0</td>\n      <td>112.0</td>\n      <td>1.48</td>\n      <td>1.36</td>\n      <td>0.24</td>\n      <td>1.26</td>\n      <td>10.80</td>\n      <td>0.48</td>\n      <td>1.47</td>\n      <td>480.0</td>\n      <td>class_2</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>14.34</td>\n      <td>1.68</td>\n      <td>2.70</td>\n      <td>25.0</td>\n      <td>98.0</td>\n      <td>2.80</td>\n      <td>1.31</td>\n      <td>0.53</td>\n      <td>2.70</td>\n      <td>13.00</td>\n      <td>0.57</td>\n      <td>1.96</td>\n      <td>660.0</td>\n      <td>class_2</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>13.48</td>\n      <td>1.67</td>\n      <td>2.64</td>\n      <td>22.5</td>\n      <td>89.0</td>\n      <td>2.60</td>\n      <td>1.10</td>\n      <td>0.52</td>\n      <td>2.29</td>\n      <td>11.75</td>\n      <td>0.57</td>\n      <td>1.78</td>\n      <td>620.0</td>\n      <td>class_2</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>13.45</td>\n      <td>3.70</td>\n      <td>2.60</td>\n      <td>23.0</td>\n      <td>111.0</td>\n      <td>1.70</td>\n      <td>0.92</td>\n      <td>0.43</td>\n      <td>1.46</td>\n      <td>10.68</td>\n      <td>0.85</td>\n      <td>1.56</td>\n      <td>695.0</td>\n      <td>class_2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 이상치 정제\n\n1. 이상치 제거\n\n::: {#d2f5c212 .cell execution_count=3}\n``` {.python .cell-code}\ndrop_outliers = wine.drop(index=outliers.index)\n\nprint(\"Original:\", wine.shape)\nprint(\"Drop outliers:\", drop_outliers.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal: (178, 14)\nDrop outliers: (174, 14)\n```\n:::\n:::\n\n\n2. 이상치 대체\n\n이상치를 NULL로 만든 후, 결측치와 함께 대체\n\n::: {#74926706 .cell execution_count=4}\n``` {.python .cell-code}\nwine.loc[outliers.index, 'color_intensity'] = np.NaN\n\nwine['color_intensity'].fillna(wine['color_intensity'].mean(), inplace=True)\nwine.loc[outliers.index, 'color_intensity']\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_18659/3568685677.py:3: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n151    4.908678\n158    4.908678\n159    4.908678\n166    4.908678\nName: color_intensity, dtype: float64\n```\n:::\n:::\n\n\n",
    "supporting": [
      "03_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}