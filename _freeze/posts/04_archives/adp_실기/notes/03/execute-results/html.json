{
  "hash": "863dabaf6a972f7753bc046b739b40ef",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"데이터 전처리\"\ndate: 2025-01-02\ncategories: [\"데이터 분석\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## 데이터 전처리의 의미\n\n1. 데이터 클리닝\n2. 데이터 통합\n3. 데이터 변환\n4. 데이터 축소\n5. 불균형 데이터 처리\n6. 데이터 분할\n\n## 이상치 확인 및 정제\n\n### 이상치 확인\n\n::: {#4f457b88 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pandas.core.common import random_state\nfrom sklearn.datasets import load_wine\n\nwine_load = load_wine()\nwine = pd.DataFrame(wine_load.data, columns=wine_load.feature_names)\nwine['class'] = wine_load.target\nwine['class'] = wine['class'].map({0: 'class_0', 1: 'class_1', 2: 'class_2'})\n\nplt.boxplot(wine['color_intensity'], whis=1.5)\nplt.title('Boxplot of color_intensity')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03_files/figure-html/cell-2-output-1.png){width=566 height=431}\n:::\n:::\n\n\n::: {#4a714c6b .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\ndef outliers_iqr(dt, col):\n    q1, q3 = np.percentile(dt[col], [25, 75])\n    iqr = q3 - q1\n    lower_bound = q1 - (iqr * 1.5)\n    upper_bound = q3 + (iqr * 1.5)\n    return dt[(dt[col] < lower_bound) | (dt[col] > upper_bound)]\n\noutliers = outliers_iqr(wine, 'color_intensity')\noutliers\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>alcohol</th>\n      <th>malic_acid</th>\n      <th>ash</th>\n      <th>alcalinity_of_ash</th>\n      <th>magnesium</th>\n      <th>total_phenols</th>\n      <th>flavanoids</th>\n      <th>nonflavanoid_phenols</th>\n      <th>proanthocyanins</th>\n      <th>color_intensity</th>\n      <th>hue</th>\n      <th>od280/od315_of_diluted_wines</th>\n      <th>proline</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>151</th>\n      <td>12.79</td>\n      <td>2.67</td>\n      <td>2.48</td>\n      <td>22.0</td>\n      <td>112.0</td>\n      <td>1.48</td>\n      <td>1.36</td>\n      <td>0.24</td>\n      <td>1.26</td>\n      <td>10.80</td>\n      <td>0.48</td>\n      <td>1.47</td>\n      <td>480.0</td>\n      <td>class_2</td>\n    </tr>\n    <tr>\n      <th>158</th>\n      <td>14.34</td>\n      <td>1.68</td>\n      <td>2.70</td>\n      <td>25.0</td>\n      <td>98.0</td>\n      <td>2.80</td>\n      <td>1.31</td>\n      <td>0.53</td>\n      <td>2.70</td>\n      <td>13.00</td>\n      <td>0.57</td>\n      <td>1.96</td>\n      <td>660.0</td>\n      <td>class_2</td>\n    </tr>\n    <tr>\n      <th>159</th>\n      <td>13.48</td>\n      <td>1.67</td>\n      <td>2.64</td>\n      <td>22.5</td>\n      <td>89.0</td>\n      <td>2.60</td>\n      <td>1.10</td>\n      <td>0.52</td>\n      <td>2.29</td>\n      <td>11.75</td>\n      <td>0.57</td>\n      <td>1.78</td>\n      <td>620.0</td>\n      <td>class_2</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>13.45</td>\n      <td>3.70</td>\n      <td>2.60</td>\n      <td>23.0</td>\n      <td>111.0</td>\n      <td>1.70</td>\n      <td>0.92</td>\n      <td>0.43</td>\n      <td>1.46</td>\n      <td>10.68</td>\n      <td>0.85</td>\n      <td>1.56</td>\n      <td>695.0</td>\n      <td>class_2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 이상치 정제\n\n1. 이상치 제거\n\n::: {#1e5358e9 .cell execution_count=3}\n``` {.python .cell-code}\ndrop_outliers = wine.drop(index=outliers.index)\n\nprint(\"Original:\", wine.shape)\nprint(\"Drop outliers:\", drop_outliers.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal: (178, 14)\nDrop outliers: (174, 14)\n```\n:::\n:::\n\n\n2. 이상치 대체\n\n이상치를 NULL로 만든 후, 결측치와 함께 대체\n\n::: {#ea78d11a .cell execution_count=4}\n``` {.python .cell-code}\nwine.loc[outliers.index, 'color_intensity'] = np.NaN\n\nwine['color_intensity'].fillna(wine['color_intensity'].mean(), inplace=True)\nwine.loc[outliers.index, 'color_intensity']\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_13054/3568685677.py:3: FutureWarning:\n\nA value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n151    4.908678\n158    4.908678\n159    4.908678\n166    4.908678\nName: color_intensity, dtype: float64\n```\n:::\n:::\n\n\n## 범주형 데이터 처리\n\n::: {#1a11037f .cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\niris = pd.DataFrame(iris.data, columns=iris.feature_names)\niris['Class'] = load_iris().target\niris['Class'] = iris['Class'].map({0: 'Setosa', \n                                   1:'Versicolour', \n                                   2: 'Virginica'})\n```\n:::\n\n\n## 데이터 분할\n\n::: {#f19e897c .cell execution_count=6}\n``` {.python .cell-code}\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(iris.drop(\n  columns='Class'), iris['Class'], test_size=0.2, random_state=1004)\nprint('X_train: ', X_train.shape, 'X_test: ', X_test.shape)\nprint('y_train: ', y_train.shape, 'y_test: ', y_test.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nX_train:  (120, 4) X_test:  (30, 4)\ny_train:  (120,) y_test:  (30,)\n```\n:::\n:::\n\n\n::: {#394f46f6 .cell execution_count=7}\n``` {.python .cell-code}\nX_train.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sepal length (cm)</th>\n      <th>sepal width (cm)</th>\n      <th>petal length (cm)</th>\n      <th>petal width (cm)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>87</th>\n      <td>6.3</td>\n      <td>2.3</td>\n      <td>4.4</td>\n      <td>1.3</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>5.8</td>\n      <td>2.7</td>\n      <td>4.1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>7.9</td>\n      <td>3.8</td>\n      <td>6.4</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0caf27f7 .cell execution_count=8}\n``` {.python .cell-code}\ny_train.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n87     Versicolour\n67     Versicolour\n131      Virginica\nName: Class, dtype: object\n```\n:::\n:::\n\n\n::: {#cbad7763 .cell execution_count=9}\n``` {.python .cell-code}\niris['Class'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nClass\nSetosa         50\nVersicolour    50\nVirginica      50\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {#98872734 .cell execution_count=10}\n``` {.python .cell-code}\ny_train.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nClass\nVersicolour    41\nSetosa         40\nVirginica      39\nName: count, dtype: int64\n```\n:::\n:::\n\n\n## 데이터 스케일링\n\n### Standard Scaler\n\n- 평균이 0, 분산이 1이 되도록 변환\n- 이상치에 민감하다.\n- 회귀분석보다는 분류분석에 적합\n\n::: {#815e234c .cell execution_count=11}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import RobustScaler, StandardScaler\n\nStdScaler = StandardScaler()\n\nStdScaler.fit(X_train)\nX_train_sc = StdScaler.transform(X_train)\nX_test_sc = StdScaler.transform(X_test)\n```\n:::\n\n\n### Min-Max Scaler\n\n- 0 ~ 1 사이의 값으로 변환\n- 이상치에 민감하다.\n- 회귀분석에 적합\n\n::: {#4b8cae33 .cell execution_count=12}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MinMaxScaler\n\nMinMaxScaler = MinMaxScaler()\n\nMinMaxScaler.fit(X_train)\nX_train_sc = MinMaxScaler.transform(X_train)\n\nX_test_sc = MinMaxScaler.transform(X_test)\n```\n:::\n\n\n### Max Abs Scaler\n\n- -1 ~ 1 사이의 값으로 변환\n- 이상치에 민감하다.\n- 회귀분석에 적합\n\n::: {#c3c62c1c .cell execution_count=13}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MaxAbsScaler\n\nMaxAbsScaler = MaxAbsScaler()\n\nMaxAbsScaler.fit(X_train)\nX_train_sc = MaxAbsScaler.transform(X_train)\n\nX_test_sc = MaxAbsScaler.transform(X_test)\n```\n:::\n\n\n### Robust Scaler\n\n- 중앙값을 0으로 설정하고, IQR을 사용하여 잉상치 영향을 최소화함\n\n::: {#06c29bbb .cell execution_count=14}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import RobustScaler\n\nRobustScaler = RobustScaler()\n\nRobustScaler.fit(X_train)\nX_train_sc = RobustScaler.transform(X_train)\n\nX_test_sc = RobustScaler.transform(X_test)\n```\n:::\n\n\n### 다시 완본으로 변경\n\n- `scaler.inverse_transform()`\n\n::: {#dcc3e633 .cell execution_count=15}\n``` {.python .cell-code}\npd.DataFrame(X_train_sc).head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.384615</td>\n      <td>-1.4</td>\n      <td>0.028369</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.000000</td>\n      <td>-0.6</td>\n      <td>-0.056738</td>\n      <td>-0.200000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.615385</td>\n      <td>1.6</td>\n      <td>0.595745</td>\n      <td>0.466667</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#4a09735a .cell execution_count=16}\n``` {.python .cell-code}\nX_original = RobustScaler.inverse_transform(X_train_sc)\n\npd.DataFrame(X_original).head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6.3</td>\n      <td>2.3</td>\n      <td>4.4</td>\n      <td>1.3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.8</td>\n      <td>2.7</td>\n      <td>4.1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.9</td>\n      <td>3.8</td>\n      <td>6.4</td>\n      <td>2.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## 차원 축소\n\n::: {#df55cca4 .cell execution_count=17}\n``` {.python .cell-code}\nfeatures = []\nx = iris.drop(columns='Class')\n\nx = StandardScaler().fit_transform(x)\n\npd.DataFrame(x).head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.900681</td>\n      <td>1.019004</td>\n      <td>-1.340227</td>\n      <td>-1.315444</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.143017</td>\n      <td>-0.131979</td>\n      <td>-1.340227</td>\n      <td>-1.315444</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1.385353</td>\n      <td>0.328414</td>\n      <td>-1.397064</td>\n      <td>-1.315444</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3fadf900 .cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=4)\npca_fit = pca.fit(x)\n\nprint(pca.singular_values_)\nprint(pca.explained_variance_ratio_.cumsum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[20.92306556 11.7091661   4.69185798  1.76273239]\n[0.72962445 0.95813207 0.99482129 1.        ]\n```\n:::\n:::\n\n\n::: {#6f525d73 .cell execution_count=19}\n``` {.python .cell-code}\nplt.title('Scree Plot')\nplt.plot(pca.explained_variance_ratio_, 'o-')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](03_files/figure-html/cell-20-output-1.png){width=571 height=431}\n:::\n:::\n\n\n## 데이터 불균형 문제 처리\n\n",
    "supporting": [
      "03_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}