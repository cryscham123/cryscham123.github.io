{
  "hash": "251423bfd3ab62ad05e721a8f0c186ca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"차원 축소\"\ndate: 2025-07-29\ncategories: [\"머신 러닝\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## PCA\n\n::: {#8eff2c0c .cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn.datasets import load_iris\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\niris = load_iris()\ncolumns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']\ndf = pd.DataFrame(iris.data, columns=columns)\ndf['target'] = iris.target\nmarkers = ['^', 's', 'o']\n\nfor i, marker in enumerate(markers):\n    x_axis_data = df[df['target'] == i]['sepal_length']\n    y_axis_data = df[df['target'] == i]['sepal_width']\n    plt.scatter(x_axis_data, y_axis_data, marker=marker, label=iris.target_names[i])\nplt.legend()\nplt.xlabel('sepal length')\nplt.ylabel('sepal width')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](06_files/figure-html/cell-2-output-1.png){width=589 height=432}\n:::\n:::\n\n\n- PCA는 scaling의 영향을 받음.\n\n::: {#8718dc6d .cell execution_count=2}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nscaled_df = StandardScaler().fit_transform(df.iloc[:, :-1])\n\npca = PCA(n_components=2)\ndf = pca.fit_transform(scaled_df)\n```\n:::\n\n\n::: {#1ee52674 .cell execution_count=3}\n``` {.python .cell-code}\npca_columns = ['pca_component_1', 'pca_component_2']\ndf = pd.DataFrame(df, columns=pca_columns)\ndf['target'] = iris.target\n```\n:::\n\n\n::: {#aced6683 .cell execution_count=4}\n``` {.python .cell-code}\nmarkers = ['^', 's', 'o']\n\nfor i, marker in enumerate(markers):\n    x_axis_data = df[df['target'] == i]['pca_component_1']\n    y_axis_data = df[df['target'] == i]['pca_component_2']\n    plt.scatter(x_axis_data, y_axis_data, marker=marker, label=iris.target_names[i])\nplt.legend()\nplt.xlabel('pca_component_1')\nplt.ylabel('pca_component_2')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](06_files/figure-html/cell-5-output-1.png){width=587 height=429}\n:::\n:::\n\n\n## 신용카드 고객 데이터\n\n::: {#9b9fcb7f .cell execution_count=5}\n``` {.python .cell-code}\ndf = pd.read_excel('_data/creadit_card.xls', header=1, sheet_name='Data').iloc[:, 1:]\ndf.rename(columns={'PAY_0': 'PAY_1', 'default payment next month': 'default'}, inplace=True)\ntarget = df['default']\nfeatures = df.drop('default', axis=1)\n```\n:::\n\n\n::: {#dc4c0c12 .cell execution_count=6}\n``` {.python .cell-code}\nimport seaborn as sns\n\ncorr = features.corr()\nsns.heatmap(corr, annot=True, fmt='.1g')\n```\n\n::: {.cell-output .cell-output-display}\n![](06_files/figure-html/cell-7-output-1.png){width=610 height=482}\n:::\n:::\n\n\n- BILL_AMT1~6, PAY_1~6의 상관도가 높다.\n\n::: {#6f7f199e .cell execution_count=7}\n``` {.python .cell-code}\ncols_bill = ['BILL_AMT' + str(i) for i in range(1, 7)]\nscaler = StandardScaler()\ndf_cols_scaled = scaler.fit_transform(features[cols_bill])\npca = PCA(n_components=2)\npca.fit(df_cols_scaled)\npca.explained_variance_ratio_\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([0.90555253, 0.0509867 ])\n```\n:::\n:::\n\n\n- PCA 할 때 column 전부 다 안 넣어도 되나?\n- 다 넣어야 하는 듯\n\n## LDA\n\n- 클래스 분리를 최대화하는 축을 찾음\n- PCA와 다르게 지도 학습임.\n\n::: {#d127773a .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.preprocessing import StandardScaler\n\niris = load_iris()\niris_scaled = StandardScaler().fit_transform(iris.data)\n```\n:::\n\n\n::: {#6f9cfd97 .cell execution_count=9}\n``` {.python .cell-code}\nlda = LinearDiscriminantAnalysis(n_components=2)\niris_lda = lda.fit_transform(iris_scaled, iris.target)\n```\n:::\n\n\n::: {#f7952d84 .cell execution_count=10}\n``` {.python .cell-code}\nlda_columns = ['lda_components_1', 'lda_components_2']\ndf = pd.DataFrame(iris_lda, columns=lda_columns)\ndf['target'] = iris.target\n\nmarkers = ['^', 's', 'o']\n\nfor i, marker in enumerate(markers):\n    x_axis_data = df[df['target'] == i]['lda_components_1']\n    y_axis_data = df[df['target'] == i]['lda_components_2']\n    plt.scatter(x_axis_data, y_axis_data, marker=marker, label=iris.target_names[i])\nplt.legend()\nplt.xlabel('lda_components_1')\nplt.ylabel('lda_components_2')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](06_files/figure-html/cell-11-output-1.png){width=587 height=429}\n:::\n:::\n\n\n",
    "supporting": [
      "06_files"
    ],
    "filters": [],
    "includes": {}
  }
}