{
  "hash": "57ce0030709b850e875fcaeffee10780",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"복잡한 시계열 모델\"\ndate: 2025-07-11\ncategories: [\"확률 통계\", \"시계열 분석\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n::: {#01321995 .cell execution_count=1}\n``` {.python .cell-code}\nfrom statsmodels.tsa.arima_process import ArmaProcess\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\n\nar1 = np.array([1, -0.33])\nma1 = np.array([1, 0.9])\n\nARMA_1_1 = ArmaProcess(ar1, ma1).generate_sample(nsample=1000)\n```\n:::\n\n\n::: {#43395bee .cell execution_count=2}\n``` {.python .cell-code}\nfrom statsmodels.tsa.stattools import adfuller\n\nADF_result = adfuller(ARMA_1_1)\n\nADF_result[0], ADF_result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(np.float64(-6.470367351123449), np.float64(1.3719652112589945e-08))\n```\n:::\n:::\n\n\n::: {#c352c76f .cell execution_count=3}\n``` {.python .cell-code}\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nplot_acf(ARMA_1_1, lags=20)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-4-output-1.png){width=583 height=432}\n:::\n:::\n\n\n- ARMA(1, 1) 모델인데 지연이 2.\n- ACF로는 차수를 추론할 수 없음.\n\n::: {#f21b26e1 .cell execution_count=4}\n``` {.python .cell-code}\nplot_pacf(ARMA_1_1, lags=20)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-5-output-1.png){width=583 height=432}\n:::\n:::\n\n\n- 마찬가지로 차수를 추론할 수 없음.\n\n## 일반적 모델링 절차\n\n- $AIC = 2k - 2ln(\\hat{L})$\n- k = p + q\n- L = max(likelihood)\n\n::: {#2aafedef .cell execution_count=5}\n``` {.python .cell-code}\nfrom itertools import product\n\nps = range(0, 4, 1)\nqs = range(0, 4, 1)\n\norder_list = list(product(ps, qs))\n```\n:::\n\n\n::: {#a8f4af59 .cell execution_count=6}\n``` {.python .cell-code}\nfrom typing import Union\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\ndef optimize_ARMA(endog: Union[pd.Series, list], order_list: list) -> pd.DataFrame:\n    results = []\n    for order in order_list:\n        try:\n            model = SARIMAX(endog, order=(order[0], 0, order[1]), simple_differencing=False).fit(disp=False)\n        except:\n            continue\n        aic = model.aic\n        results.append([order, aic])\n    result_df = pd.DataFrame(results)\n    result_df.columns = ['(p, q)', 'AIC']\n    result_df = result_df.sort_values(by=\"AIC\").reset_index(drop=True)\n\n    return result_df\n\nresult_df = optimize_ARMA(ARMA_1_1, order_list)\nresult_df\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/cryscham123/.local/lib/python3.12/site-packages/statsmodels/base/model.py:607: ConvergenceWarning:\n\nMaximum Likelihood optimization failed to converge. Check mle_retvals\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>(p, q)</th>\n      <th>AIC</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(3, 3)</td>\n      <td>2795.454076</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(1, 1)</td>\n      <td>2796.120891</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(1, 2)</td>\n      <td>2797.616863</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(2, 1)</td>\n      <td>2797.654545</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(0, 3)</td>\n      <td>2798.027723</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>(3, 1)</td>\n      <td>2799.434298</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>(1, 3)</td>\n      <td>2799.451901</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>(2, 2)</td>\n      <td>2800.116415</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>(3, 2)</td>\n      <td>2800.793079</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>(2, 3)</td>\n      <td>2800.936160</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>(0, 2)</td>\n      <td>2803.058807</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>(0, 1)</td>\n      <td>2902.670712</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>(3, 0)</td>\n      <td>2961.046375</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>(2, 0)</td>\n      <td>3062.683055</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>(1, 0)</td>\n      <td>3235.654693</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>(0, 0)</td>\n      <td>3802.933178</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### 잔차 분석\n\n::: {#613dff24 .cell execution_count=7}\n``` {.python .cell-code}\nmodel = SARIMAX(ARMA_1_1, order=(1, 0, 1), simple_differencing=False)\nmodel_fit = model.fit(disp=False)\n\nmodel_fit.plot_diagnostics(figsize=(12, 8))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-8-output-1.png){width=955 height=673}\n:::\n:::\n\n\n::: {#75590c6e .cell execution_count=8}\n``` {.python .cell-code}\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\n\ntr = acorr_ljungbox(model_fit.resid, np.arange(1, 11))\nprint(tr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     lb_stat  lb_pvalue\n1   0.065589   0.797871\n2   0.535564   0.765075\n3   0.609711   0.894206\n4   1.963889   0.742401\n5   2.155757   0.827200\n6   2.198989   0.900518\n7   4.419190   0.730425\n8   4.869110   0.771470\n9   5.903170   0.749569\n10  7.047327   0.720970\n```\n:::\n:::\n\n\n## 예시 - 대역폭 사용량 예측\n\n::: {#d648b822 .cell execution_count=9}\n``` {.python .cell-code}\ndf = pd.read_csv('_data/bandwidth.csv')\nsns.lineplot(data=df, x=df.index, y='hourly_bandwidth')\n\nplt.xlabel('시간')\nplt.ylabel('시간당 대역폭 사용량(MBps)')\nplt.xticks(\n    np.arange(0, 10000, 730), \n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', '2020', 'Feb'])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-10-output-1.png){width=598 height=434}\n:::\n:::\n\n\n::: {#5fa313f7 .cell execution_count=10}\n``` {.python .cell-code}\nADF_result = adfuller(df['hourly_bandwidth'])\n\nADF_result[0], ADF_result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(np.float64(-0.8714653199452735), np.float64(0.7972240255014551))\n```\n:::\n:::\n\n\n::: {#07524219 .cell execution_count=11}\n``` {.python .cell-code}\nbandwidth_diff = np.diff(df['hourly_bandwidth'], n=1)\n\nADF_result = adfuller(bandwidth_diff)\n\nADF_result[0], ADF_result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(np.float64(-20.694853863789017), 0.0)\n```\n:::\n:::\n\n\n::: {#8204eec1 .cell execution_count=12}\n``` {.python .cell-code}\ndf_diff = pd.DataFrame({'bandwidth_diff': bandwidth_diff})\ntrain = df_diff.iloc[:-168]\ntest = df_diff.iloc[-168:]\n```\n:::\n\n\n::: {#8b0b41fe .cell execution_count=13}\n``` {.python .cell-code}\nps = range(0, 4, 1)\nqs = range(0, 4, 1)\norder_list = list(product(ps, qs))\nresult_df = optimize_ARMA(train['bandwidth_diff'], order_list)\nresult_df\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>(p, q)</th>\n      <th>AIC</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>(3, 2)</td>\n      <td>27991.063879</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>(2, 3)</td>\n      <td>27991.287509</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>(2, 2)</td>\n      <td>27991.603598</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>(3, 3)</td>\n      <td>27993.416924</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>(1, 3)</td>\n      <td>28003.349550</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>(1, 2)</td>\n      <td>28051.351401</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>(3, 1)</td>\n      <td>28071.155496</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>(3, 0)</td>\n      <td>28095.618186</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>(2, 1)</td>\n      <td>28097.250766</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>(2, 0)</td>\n      <td>28098.407664</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>(1, 1)</td>\n      <td>28172.510044</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>(1, 0)</td>\n      <td>28941.056983</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>(0, 3)</td>\n      <td>31355.802141</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>(0, 2)</td>\n      <td>33531.179284</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>(0, 1)</td>\n      <td>39402.269523</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>(0, 0)</td>\n      <td>49035.184224</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6fd456d1 .cell execution_count=14}\n``` {.python .cell-code}\nmodel = SARIMAX(train['bandwidth_diff'], order=(2, 0, 2), simple_differencing=False)\nmodel_fit = model.fit(disp=False)\nmodel_fit.plot_diagnostics(figsize=(12, 8))\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n![](05_files/figure-html/cell-15-output-1.png){width=955 height=673}\n:::\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-15-output-2.png){width=955 height=673}\n:::\n:::\n\n\n::: {#d07a27cb .cell execution_count=15}\n``` {.python .cell-code}\nacorr_ljungbox(model_fit.resid, np.arange(1, 11))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lb_stat</th>\n      <th>lb_pvalue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0.042190</td>\n      <td>0.837257</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.418364</td>\n      <td>0.811247</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.520271</td>\n      <td>0.914416</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.850554</td>\n      <td>0.931545</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.850841</td>\n      <td>0.973678</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1.111754</td>\n      <td>0.981019</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2.124864</td>\n      <td>0.952607</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>3.230558</td>\n      <td>0.919067</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>3.248662</td>\n      <td>0.953615</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>3.588289</td>\n      <td>0.964015</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#24f7b438 .cell execution_count=16}\n``` {.python .cell-code}\ndef rolling_forecast(df: pd.DataFrame, train_len: int, horizon: int, window: int, method: str) -> list:\n    total_len = train_len + horizon\n    if method == 'mean':\n        pred_mean = []\n        for i in range(train_len, total_len, window):\n            mean = np.mean(df[:i].values)\n            pred_mean.extend(mean for _ in range(window))\n        return pred_mean\n    if method == 'last':\n        pred_last_value = []\n        for i in range(train_len, total_len, window):\n            last_value = df.iloc[i-1].values[0]\n            pred_last_value.extend(last_value for _ in range(window))\n        return pred_last_value\n    if method == 'ARMA':\n        pred_MA = []\n        for i in range(train_len, total_len, window):\n            model = SARIMAX(df[:i], order=(2,0,2))\n            res = model.fit(disp=False)\n            predictions = res.get_prediction(0, i + window - 1)\n            oos_pred = predictions.predicted_mean.iloc[-window:]\n            pred_MA.extend(oos_pred)\n        return pred_MA\n\npred_df = test.copy()\nTRAIN_LEN = len(train)\nHORIZON = len(test)\nWINDOW = 2\n\npred_mean = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'mean')\npred_last = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'last')\npred_ARMA = rolling_forecast(df_diff, TRAIN_LEN, HORIZON, WINDOW, 'ARMA')\n\npred_df['pred_mean'] = pred_mean\npred_df['pred_last'] = pred_last\npred_df['pred_ARMA'] = pred_ARMA\n\nsns.lineplot(data=pred_df, x=pred_df.index, y='bandwidth_diff', label='실제값')\nsns.lineplot(data=pred_df, x=pred_df.index, y='pred_mean', label='평균 예측')\nsns.lineplot(data=pred_df, x=pred_df.index, y='pred_last', label='마지막 값 예측')\nsns.lineplot(data=pred_df, x=pred_df.index, y='pred_ARMA', label='ARMA(2, 2) 예측')\nplt.xlabel('시간')\nplt.ylabel('시간당 대역폭 사용량(MBps)')\nplt.xticks(\n    [9802, 9850, 9898, 9946, 9994],\n    ['2020-02-13', '2020-02-15', '2020-02-17', '2020-02-19', '2020-02-21'])\nplt.xlim(9800, 9999)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-17-output-1.png){width=605 height=430}\n:::\n:::\n\n\n::: {#915b7eef .cell execution_count=17}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nmse_mean = mean_squared_error(pred_df['bandwidth_diff'], pred_df['pred_mean'])\nmse_last = mean_squared_error(pred_df['bandwidth_diff'], pred_df['pred_last'])\nmse_ARMA = mean_squared_error(pred_df['bandwidth_diff'], pred_df['pred_ARMA'])\nmse_mean, mse_last, mse_ARMA\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n(np.float64(6.306526957989325),\n np.float64(2.2297582947733656),\n np.float64(1.7690462114420604))\n```\n:::\n:::\n\n\n### 역변환\n\n::: {#65d8aecc .cell execution_count=18}\n``` {.python .cell-code}\ndf['pred_bandwidth'] = pd.Series()\ndf['pred_bandwidth'].iloc[9832:] = df['hourly_bandwidth'].iloc[9832] + pred_df['pred_ARMA'].cumsum()\n\nsns.lineplot(data=df, x=df.index, y='hourly_bandwidth', label='실제 값')\nsns.lineplot(data=df, x=df.index, y='pred_bandwidth', label='ARMA(2, 2) 예측')\nplt.xticks(\n    [9802, 9850, 9898, 9946, 9994],\n    ['2020-02-13', '2020-02-15', '2020-02-17', '2020-02-19', '2020-02-21'])\nplt.xlim(9800, 9999)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](05_files/figure-html/cell-19-output-1.png){width=619 height=434}\n:::\n:::\n\n\n",
    "supporting": [
      "05_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}