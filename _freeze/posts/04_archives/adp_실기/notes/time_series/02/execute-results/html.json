{
  "hash": "5364f94bd14ea587ed9d16f38bc3e188",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"확률보행\"\ndate: 2025-07-09\ncategories: [\"확률 통계\", \"시계열 분석\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## what is 확률보행\n\n- `확률보행`: 무작위로 상승 또는 하락이 발생할 확률이 동일한 프로세스\n    - $y_t = C + y_{t-1} + ϵ_t$\n    - C가 0이 아닌 경우 표류가 있는 확률보행\n\n::: {#ee21b679 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['font.family'] = 'Noto Sans KR'\n\nsteps = np.random.standard_normal(1000)\nsteps[0] = 0\nrandom_walk = np.cumsum(steps)\nsns.lineplot(x=np.arange(len(random_walk)), y=random_walk)\nplt.xlabel('시간')\nplt.ylabel('값')\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nText(0, 0.5, '값')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-2-output-2.png){width=590 height=430}\n:::\n:::\n\n\n## 확률보행 식별\n\n- 확률보행은 `정상적`이고 `자기상관관계가 없는 시계열`로 나타난다.\n\n### 정상성\n\n- 시간이 지나도 통계적 특성이 변하지 않는 시계열\n    - 평균과 분산이 상수이고 자기상관관계가 있으며, 이러한 특성들이 시간에 따라 변하지 않는다.\n- 정상화:\n    - 평균: 차분\n    - 분산: 로그 변환, Box-Cox 변환 등\n- 정상성 검정:\n    - ADF (Augmented Dickey-Fuller) 테스트\n        - $H_0$: 시계열에 단위근[^1]이 존재하여 비정상적이다.\n        - $H_1$: 시계열에 단위근이 존재하지 않아 정상적이다.\n\n[^1]: $y_t = C + αy_{t-1} + ϵ_t$ 형태의 시계열로, α가 1보다 작은 경우, 과거의 값이 현재 값에 미치는 영향이 작아져 시계열이 정상적이다.\n\n::: {#162e5868 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nfrom statsmodels.tsa.stattools import adfuller\n\ndef simulate_process(alpha: float) -> np.array:\n    process = np.empty(401)\n    process[0] = 0\n    for i in range(400):\n        process[i+1] = alpha * process[i] + np.random.standard_normal()\n    return process\n\nstationary = simulate_process(alpha=0.5)\nnon_stationary = simulate_process(alpha=1)\n\nsns.lineplot(x=np.arange(len(stationary)), y=stationary, label='정상성 프로세스')\nsns.lineplot(x=np.arange(len(non_stationary)), y=non_stationary, label='비정상성 프로세스')\n```\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-3-output-1.png){width=564 height=412}\n:::\n:::\n\n\n::: {#755e39f6 .cell execution_count=3}\n``` {.python .cell-code}\ndef mean_var_over_time(process: np.array) -> np.array:\n    means = []\n    vars = []\n    for i in range(len(process)):\n        means.append(np.mean(process[:i]))\n        vars.append(np.var(process[:i]))\n    return means, vars\n\nmeans_stationary, vars_stationary = mean_var_over_time(stationary)\nmeans_non_stationary, vars_non_stationary = mean_var_over_time(non_stationary)\n\nsns.lineplot(x=np.arange(len(means_stationary)), y=means_stationary, label='정상성 평균')\nsns.lineplot(x=np.arange(len(means_non_stationary)), y=means_non_stationary, label='비정상성 평균')\n```\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-4-output-1.png){width=575 height=412}\n:::\n:::\n\n\n::: {#caff85bc .cell execution_count=4}\n``` {.python .cell-code}\nsns.lineplot(x=np.arange(len(vars_stationary)), y=vars_stationary, label='정상성 분산')\nsns.lineplot(x=np.arange(len(vars_non_stationary)), y=vars_non_stationary, label='비정상성 분산')\n```\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-5-output-1.png){width=564 height=412}\n:::\n:::\n\n\n::: {#aabff195 .cell execution_count=5}\n``` {.python .cell-code}\nresult1 = adfuller(stationary)\nresult2 = adfuller(non_stationary)\nprint(f'ADF Statistic: 정상성: {result1[0]}, 비정상성: {result2[0]}')\nprint(f'p-value: 정상성: {result1[1]}, 비정상성: {result2[1]}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nADF Statistic: 정상성: -10.921107177587686, 비정상성: -1.2098389233092486\np-value: 정상성: 1.0375058119247388e-19, 비정상성: 0.6693489993326273\n```\n:::\n:::\n\n\n### 자기상관관계\n\n- 자기 상관관계: 시계열의 선행값과 후행값 아이의 선형관계\n    - x: 지연 ($y_t, y_{t-2}$의 경우 지연 2)\n    - y: 계수\n- 추세가 있는 경우: 짧은 지연에서 계수가 높고, 지연이 커질수록 계수가 낮아지는 경향\n- 계절성이 있는 경우: 주기적인 패턴이 나타남.\n\n::: {#e7fc9ba5 .cell execution_count=6}\n``` {.python .cell-code}\nfrom statsmodels.graphics.tsaplots import plot_acf\n\nplot_acf(non_stationary, lags=20)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](02_files/figure-html/cell-7-output-1.png){width=583 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-7-output-2.png){width=583 height=432}\n:::\n:::\n\n\n- 비정상적 시계열에서 추세가 보인다. 차분을 진행해보자.\n\n::: {#6146e136 .cell execution_count=7}\n``` {.python .cell-code}\ndiff = np.diff(non_stationary, n=1)\n\nresult = adfuller(diff)\nresult[0], result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n(np.float64(-19.302084695304316), 0.0)\n```\n:::\n:::\n\n\n::: {#e7b4709e .cell execution_count=8}\n``` {.python .cell-code}\nplot_acf(diff, lags=20)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](02_files/figure-html/cell-9-output-1.png){width=583 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-9-output-2.png){width=583 height=432}\n:::\n:::\n\n\n## 예시\n\n::: {#39cf8250 .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n\ndf = pd.read_csv('_data/googl.csv')\nsns.lineplot(data=df, x='Date', y='Close')\n\nplt.xlabel('날짜')\nplt.ylabel('종가')\n\nplt.xticks([4, 24, 46, 68, 89, 110, 132, 152, 174, 193, 212, 235],\n           ['May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'Jan', 'Feb', 'Mar', 'Apr'],\n           rotation=45)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-10-output-1.png){width=598 height=444}\n:::\n:::\n\n\n::: {#05c4ccc3 .cell execution_count=10}\n``` {.python .cell-code}\nresult = adfuller(df['Close'])\n\nresult[0], result[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n(np.float64(0.16025048664771302), np.float64(0.9699419435913057))\n```\n:::\n:::\n\n\n::: {#92443401 .cell execution_count=11}\n``` {.python .cell-code}\ndiff = np.diff(df['Close'], n=1)\n\nresult_diff = adfuller(diff)\nresult_diff[0], result_diff[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n(np.float64(-5.303439704295234), np.float64(5.3865309614545585e-06))\n```\n:::\n:::\n\n\n::: {#90f29cac .cell execution_count=12}\n``` {.python .cell-code}\nplot_acf(diff, lags=20)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](02_files/figure-html/cell-13-output-1.png){width=583 height=432}\n:::\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-13-output-2.png){width=583 height=432}\n:::\n:::\n\n\n## 확류보행 예측\n\n::: {#1a4d04b4 .cell execution_count=13}\n``` {.python .cell-code}\ndf = pd.DataFrame({'value': random_walk})\ntrain = df.iloc[:800]\ntest = df.iloc[800:]\n\nmean = np.mean(train['value'])\ntest['pred_mean'] = mean\n\nlast_value = train.iloc[-1]['value']\ntest['pred_last'] = last_value\n```\n:::\n\n\n### 표류 기법\n\n::: {#c26f0280 .cell execution_count=14}\n``` {.python .cell-code}\ndrift = (train.iloc[-1]['value'] - train.iloc[0]['value']) / (len(train) - 1)\ndrift\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nnp.float64(-0.028276839204443436)\n```\n:::\n:::\n\n\n::: {#7efa9b9f .cell execution_count=15}\n``` {.python .cell-code}\nx_vals = np.arange(801, 1001)\npred_drift = drift * x_vals\ntest['pred_drift'] = pred_drift\nsns.lineplot(data=df, x=df.index, y='value')\nsns.lineplot(data=test, x=test.index, y='pred_mean', label='평균 예측')\nsns.lineplot(data=test, x=test.index, y='pred_last', label='마지막 값 예측')\nsns.lineplot(data=test, x=test.index, y='pred_drift', label='표류 예측')\n```\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-16-output-1.png){width=590 height=430}\n:::\n:::\n\n\n::: {#d8ddcde4 .cell execution_count=16}\n``` {.python .cell-code}\nfrom sklearn.metrics import mean_squared_error\n\nmse_mean = mean_squared_error(test['value'], test['pred_mean'])\nmse_last = mean_squared_error(test['value'], test['pred_last'])\nmse_drift = mean_squared_error(test['value'], test['pred_drift'])\n\nsns.barplot(x=['평균', '마지막 값', '표류'], y=[mse_mean, mse_last, mse_drift])\n```\n\n::: {.cell-output .cell-output-display}\n![](02_files/figure-html/cell-17-output-1.png){width=572 height=412}\n:::\n:::\n\n\n### 단순 예측법\n\n::: {#44339da1 .cell execution_count=17}\n``` {.python .cell-code}\ndf_shift = df.shift(periods=1)\nmse_one_step = mean_squared_error(test['value'], df_shift['value'].iloc[800:])\nmse_one_step\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nnp.float64(1.1592126564254301)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "02_files"
    ],
    "filters": [],
    "includes": {}
  }
}