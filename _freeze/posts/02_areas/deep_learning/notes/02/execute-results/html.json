{
  "hash": "3c4bb32b04dc081ac96938278ba3438e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"신경망 학습\"\ndate: 2025-07-30\ncategories: [\"deep learning\"]\n---\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n- 훈련 데이터로 학습을 해서 매개변수의 최적값을 자동으로 휙득하는 방법\n- 이때 기준은 손실 함수이다.\n    - 그냥 정확도를 기준으로 하면 연속된 값이 안나와서 최적화가 안됨.\n\n## 손실함수\n\n### 오차 제곱합\n\n- $E = \\frac{1}{2} \\sum_{i=1}^{n} (y_i - t_i)^2$\n- $y_i$: 예측값\n- $t_i$: 정답값\n- $\\frac{1}{2}$는 미분을 쉽게 하기 위해서 곱해주는 상수\n\n::: {#b42aaa5b .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\ndef sum_squared_error(y, t):\n    return 0.5 * np.sum((y - t) ** 2)\n```\n:::\n\n\n### 교차 엔트로피\n\n- $E = -\\sum_{i=1}^{n} t_i \\log(y_i)$\n- 일반적으로 정답값인 $t_i$는 0 또는 1이기 때문에(one hot encoding), $t_i = 1$인 경우에만 계산된다.\n- $y_i$가 1에 가까울수록 손실이 작아진다.\n\n::: {#d33bcb30 .cell execution_count=2}\n``` {.python .cell-code}\ndef cross_entropy_error(y, t):\n    delta = 1e-7  # log(0) 방지\n    return -np.sum(t * np.log(y + delta))\n```\n:::\n\n\n## 미니배치 학습\n\n- 모든 데이터를 한 번에 학습하는 것이 아니라, 일부 데이터만을 사용하여 학습하는 방법\n\n::: {#10b409d4 .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nfrom dl_dataset.mnist import load_mnist\n\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n```\n:::\n\n\n::: {#750691df .cell execution_count=4}\n``` {.python .cell-code}\ntrain_size = x_train.shape[0]\nbatch_size = 10\nbatch_mask = np.random.choice(train_size, batch_size)\nx_batch = x_train[batch_mask]\nt_batch = t_train[batch_mask]\n```\n:::\n\n\n::: {#de3a722c .cell execution_count=5}\n``` {.python .cell-code}\ndef cross_entropy_error(y, t):\n    if y.ndim == 1:\n        t = t.reshape(1, t.size)\n        y = y.reshape(1, y.size)\n    batch_size = y.shape[0]\n    return -np.sum(np.log(y[np.arange(batch_size), t] + 1e-7)) / batch_size\n```\n:::\n\n\n::: {#f758266e .cell execution_count=6}\n``` {.python .cell-code}\ndef cross_entropy_error(y, t):\n    if y.ndim == 1:\n        t = t.reshape(1, t.size)\n        y = y.reshape(1, y.size)\n    batch_size = y.shape[0]\n    return -np.sum(t * np.log(y + 1e-7)) / batch_size\n```\n:::\n\n\n## 경사법\n\n- 기울기가 가리키는 쪽은 각 장소에서 함수의 출력 값을 가장 크게 줄이는 방향\n- 기울어진 방향이 반드시 최솟값은 아니지만, 그 방향으로 가야 함수의 값을 줄일 수 있다.\n\n::: {#98ef978b .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\ndef numerical_gradient(f, x):\n    h = 1e-4\n    grad = np.zeros_like(x)\n\n    for idx in range(x.size):\n        tmp_val = x[idx]\n        x[idx] = tmp_val + h\n        fxh1 = f(x)\n\n        x[idx] = tmp_val - h\n        fxh2 = f(x)\n\n        grad[idx] = (fxh1 - fxh2) / (2 * h)\n        x[idx] = tmp_val\n\n    return grad\n```\n:::\n\n\n::: {#eadf4a20 .cell execution_count=8}\n``` {.python .cell-code}\ndef gradient_descent(f, init_x, lr=0.01, step_num=100):\n    x = init_x.copy()\n\n    for _ in range(step_num):\n        grad = numerical_gradient(f, x)\n        x -= lr * grad\n    return x\n```\n:::\n\n\n::: {#9c0c7fd7 .cell execution_count=9}\n``` {.python .cell-code}\nfrom dl_common.functions import softmax, cross_entropy_error\nfrom dl_common.gradient import numerical_gradient\n\nclass simpleNet:\n    def __init__(self):\n        self.W = np.random.randn(2, 3)\n\n    def predict(self, x):\n        return np.dot(x, self.W)\n\n    def loss(self, x, t):\n        z = self.predict(x)\n        y = softmax(z)\n        return cross_entropy_error(y, t)\n```\n:::\n\n\n::: {#22940fbe .cell execution_count=10}\n``` {.python .cell-code}\nnet = simpleNet()\nx = np.array([0.6, 0.9])\np = net.predict(x)\nnp.argmax(p)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0\n```\n:::\n:::\n\n\n::: {#d2870463 .cell execution_count=11}\n``` {.python .cell-code}\nt = np.array([0, 0, 1])\nnet.loss(x, t)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n1.5687375483483121\n```\n:::\n:::\n\n\n::: {#30f49dd2 .cell execution_count=12}\n``` {.python .cell-code}\nf = lambda w: net.loss(x, t)\n\ndW = numerical_gradient(f, net.W)\nprint(dW)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[ 0.39309067  0.08192436 -0.47501503]\n [ 0.58963601  0.12288654 -0.71252255]]\n```\n:::\n:::\n\n\n## 학습 알고리즘 구현\n\n::: {#84af8b10 .cell execution_count=13}\n``` {.python .cell-code}\nfrom dl_common.functions import *\nfrom dl_common.gradient import numerical_gradient\n\nclass TwoLayerNet:\n    def __init__(self, input_size, hidden_size, output_size, weight_init_std=0.01):\n        self.params = {}\n        self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)\n        self.params['b1'] = np.zeros(hidden_size)\n        self.params['W2'] = np.random.randn(hidden_size, output_size)\n        self.params['b2'] = np.zeros(output_size)\n\n    def predict(self, x):\n        W1, b1 = self.params['W1'], self.params['b1']\n        W2, b2 = self.params['W2'], self.params['b2']\n        a1 = np.dot(x, W1) + b1\n        z1 = sigmoid(a1)\n        a2 = np.dot(z1, W2) + b2\n        y = softmax(a2)\n        return y\n\n    def loss(self, x, t):\n        y = self.predict(x)\n        return cross_entropy_error(y, t)\n\n    def accuracy(self, x, t):\n        y = self.predict(x)\n        if t.ndim != 1:  # one-hot encoding\n            t = np.argmax(t, axis=1)\n        return np.sum(np.argmax(y, axis=1) == t) / float(x.shape[0])\n\n    def numerical_gradient(self, x, t):\n        loss_w = lambda w: self.loss(x, t)\n        grads = {}\n        grads['W1'] = numerical_gradient(loss_w, self.params['W1'])\n        grads['b1'] = numerical_gradient(loss_w, self.params['b1'])\n        grads['W2'] = numerical_gradient(loss_w, self.params['W2'])\n        grads['b2'] = numerical_gradient(loss_w, self.params['b2'])\n        return grads\n```\n:::\n\n\n::: {#0af1d778 .cell execution_count=14}\n``` {.python .cell-code}\nfrom dl_dataset.mnist import load_mnist\n\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n\ntrain_loss_list = []\ntrain_acc_list = []\ntest_acc_list = []\n\niters_num = 10000\ntrain_size = x_train.shape[0]\nbatch_size = 100\nlearning_rate = 0.1\nnetwork = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\niter_per_epoch = max(train_size / batch_size, 1)\n\nfor i in range(iters_num):\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n    grads = network.numerical_gradient(x_batch, t_batch)\n    for key in ('W1', 'b1', 'W2', 'b2'):\n        network.params[key] -= learning_rate * grads[key]\n    loss = network.loss(x_batch, t_batch)\n    train_loss_list.append(loss)\n\n    if i % iter_per_epoch == 0:\n        train_acc = network.accuracy(x_train, t_train)\n        test_acc = network.accuracy(x_test, t_test)\n        train_acc_list.append(train_acc)\n        test_acc_list.append(test_acc)\n```\n:::\n\n\n",
    "supporting": [
      "02_files"
    ],
    "filters": [],
    "includes": {}
  }
}