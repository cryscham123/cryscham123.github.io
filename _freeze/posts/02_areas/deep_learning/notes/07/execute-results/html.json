{
  "hash": "61e17976cb98a021b3fa944615ab1538",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"word2vec\"\ndate: 2025-08-17\ncategories: [\"deep learning\"]\n---\n\n\n\n\n![](/img/stat-thumb.jpg){.post-thumbnail}\n\n## Overview\n\n- 이전에 봤던 방법은 통계 기반 기법, 모든 학습 데이터를 한꺼번에 처리하는 방식\n- word2vec은 신경망 기반 기법, 미니배치 학습\n\n::: {#a638b139 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nc = np.array([[1, 0, 0, 0, 0, 0, 0]])\nW = np.random.randn(7, 3)\nh = np.dot(c, W)\nh\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\narray([[ 0.7871821 ,  0.94388187, -1.51434548]])\n```\n:::\n:::\n\n\n## CBOW 모델\n\n- 딥러닝 학습을 진행\n    - 말뭉치로부터 목표하는 단어를 타깃으로, 그 주변 단어를 맥락으로 뽑아냄.\n    - 맥락을 one hot 인코딩 해서 입력으로 사용, 타깃을 정답 레이블로 사용\n- 입력 측의 가중치(단어의 분산 표현)를 이용해서 예측을 진행\n\n",
    "supporting": [
      "07_files"
    ],
    "filters": [],
    "includes": {}
  }
}