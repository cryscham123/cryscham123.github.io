[
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#data-and-information",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#data-and-information",
    "title": "Data Modeling and the Entity-Relationship Model",
    "section": "Data and information",
    "text": "Data and information\n\nData: raw facts. recorded facts\nInformation: meaningful context\nKnowledge: information + 가치",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Data Modeling and the Entity-Relationship Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#what-is-information-system",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#what-is-information-system",
    "title": "Data Modeling and the Entity-Relationship Model",
    "section": "What is information system?",
    "text": "What is information system?\n\nSystem: a set of components that interact to achieve some purpose or goal\nInformation System: composed of hardware, software, data, procedures, people",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Data Modeling and the Entity-Relationship Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#system-analysis-and-design",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#system-analysis-and-design",
    "title": "Data Modeling and the Entity-Relationship Model",
    "section": "System Analysis and Design",
    "text": "System Analysis and Design\n\nSystem analysis and design: process of creating and maintaining information systems\nclassic methodology: SDLC\n\n\nSDLC (System Development Life Cycle)\n\n\n\nSDLC\n\n\n\nSystem definitions: 예산 편상, 위험 분석, …\nRequirements analysis\nComponent design\nImplementation\nSystem maintenance\n\n\ndatabase development process\n\nRequirements analysis\ninput: the project plan\noutput: a set of approved requirements -&gt; data model (ER model로 conceptual design)\nsource: Use cases, Business rules\nComponent Design: Relational Database Design (상세 설계)\nImplementation",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Data Modeling and the Entity-Relationship Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#er-model",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#er-model",
    "title": "Data Modeling and the Entity-Relationship Model",
    "section": "ER model",
    "text": "ER model\n\nEntities\n\nEntity class\nEntity instance\n\nAttributes: Data type, Properties(default, constraints)\nIdentifiers\n\nunique\nNonunique: identifies a set of instances\n\nRelationships\n\nbinary relationship\n\nMaximum cardinality: 1:1(A has a B), 1:N(A has a set of B), M:N\nMinimum cardinality: 0, 1\n\nternary relationship",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Data Modeling and the Entity-Relationship Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#entit-relationship-diagram",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/07.html#entit-relationship-diagram",
    "title": "Data Modeling and the Entity-Relationship Model",
    "section": "Entit-Relationship Diagram",
    "text": "Entit-Relationship Diagram\n\nEntity classes: rectangle\nRelationships: diamond\nmaximum cardinality: inside the diamond\nminimum cardinality: oval or hash mark next to diamond\nstrong entity: 독자적으로 존재 가능. 강한개체 관계는 점선\nNon-ID-dependent: identifier에 다른 entity의 identifier가 포함되어 있지 않음. 점선으로 표기(non-identifying relationship)\nweak entity: 약, 강 관계는 실선. IS: rounded square, traditional: 2 layer square\nID-dependent: identifier에 다른 entity의 identifier가 포함되어 있음. 실선으로 표기(identifying relationship)\nassociative entity: relationship이 entity로 변환된 것.\nMany-to-many relationship을 2개의 1:N으로 변환\nsuper type, sub type: 상속관계. sub type is a super type\n\nexclusive: Discriminator attribute가 필요함\ninclusive\n\nrecursive relationship\nBusiness rule: build-in constraints, trigger, stored procedure, application code로 구현 가능\ndata model validation: form, report를 이용한 prototyping",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Data Modeling and the Entity-Relationship Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#the-importance-of-dbs-today",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#the-importance-of-dbs-today",
    "title": "An Overview of Database",
    "section": "The Importance of DBs Today",
    "text": "The Importance of DBs Today\n\nDepend upon database: Internet, Web 2.0, IOT",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#why-and-how-databases-are-used",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#why-and-how-databases-are-used",
    "title": "An Overview of Database",
    "section": "Why and How Databases are Used?",
    "text": "Why and How Databases are Used?\n\nThe purpose of a database is to keep track of thing\ndb store information that is more complicated than a simple spread sheet",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#problems-with-lists-spread-sheet",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#problems-with-lists-spread-sheet",
    "title": "An Overview of Database",
    "section": "Problems with Lists (spread sheet)",
    "text": "Problems with Lists (spread sheet)\n\nRedundancy\n\n\n\n\n필요없는 column들이 중복됨\n\n\n\nMultiple Themes\n\n\n그 결과로, list에 나타날 때만 존재하는 informartion이 생김\n\n\nList Modification Issues\n\n\n\n\ndeletion problems, update problems, insertion problems",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#relational-databases",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#relational-databases",
    "title": "An Overview of Database",
    "section": "Relational Databases",
    "text": "Relational Databases\n\nRelationa Model is methodology used as a solution for database design\nA relational database stores information in tables\n\nEach informational topic is stored in its own table\n\nEach theme in the list can be stored in a table\n\nTable = file = relation\ncolumn = fields = attribute\nrow = record = tuple",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#sql-structured-query-language",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#sql-structured-query-language",
    "title": "An Overview of Database",
    "section": "SQL (Structured Query Language)",
    "text": "SQL (Structured Query Language)\n\ninternational standard for creating, processing, querying databases and their tables\ndb applications use SQL to retrieve, format, report, insert, delete, modify data for users\ncan combine table by join operation\n\nSELECT  CUSTOMER.CustomerLastName, \n        CUSTOMER.CustomerFirstName, \n        CUSTOMER.Phone,\n        COURSE.CourseDate, \n        ENROLLMENT.AmountPaid,\n        COURSE.Course, \n        COURSE.Fee\nFROM    CUSTOMER, ENROLLMENT, COURSE\nWHERE   CUSTOMER.CustomerNumber = ENROLLMENT.CustomerNumber -- join condition\n        AND  COURSE.CourseNumber = ENROLLMENT.CourseNumber; -- join condition",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#database-system-dbs",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#database-system-dbs",
    "title": "An Overview of Database",
    "section": "Database System (DBS)",
    "text": "Database System (DBS)\n\n\n\nThe four components of database system\n\n\n\nUser: Employ database application to keep track of things\nUse forms to read, enter, query data\nproduce reports\nDatabase Application: web/mobile database applications, Forms, Reports\nDBMS: used to create, process, administer the database\nDatabase: self-describing collection of related tables\nuser data, metadata, index and other overhead data, application metadata(form, reports) are stored in db\nmetadata = about the structure of the database. &lt;-&gt; user data\n\n\nFunction of DBMS\n\nDB administration\n\nControl concurrency\nProvide security\nPerform backup and recovery\n\n\n\n\nReferential Integrity Constraints",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#personal-vs-enterprise-class-database-systems",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#personal-vs-enterprise-class-database-systems",
    "title": "An Overview of Database",
    "section": "Personal vs Enterprise-class Database Systems",
    "text": "Personal vs Enterprise-class Database Systems\n\nPersonal: Access\nEnterprise-class(Organizational): Microsoft SQL server",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#nosql-databases",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#nosql-databases",
    "title": "An Overview of Database",
    "section": "NoSQL databases",
    "text": "NoSQL databases\n\nNoSQL database = non-relational database",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#cloud-databases",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/01-2.html#cloud-databases",
    "title": "An Overview of Database",
    "section": "Cloud databases",
    "text": "Cloud databases\nMain frame -&gt; Client/server -&gt; Cloud",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#tier-layers-of-database-system",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#tier-layers-of-database-system",
    "title": "ASP.NET",
    "section": "3-Tier Layers of Database System",
    "text": "3-Tier Layers of Database System\n\npresentation layer: user interface\napplication layer: web server(IIS)\ndata layer: database server",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "ASP.NET"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#api-interface-standards-for-db-access",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#api-interface-standards-for-db-access",
    "title": "ASP.NET",
    "section": "API Interface Standards for DB Access",
    "text": "API Interface Standards for DB Access\nDBMS에 접근하기 위한 표준 API\n\nODBC Open Database Connectivity\nDBMS-independent API\nJDBC: Java Database Connectivity\n\n&lt;a target=\"_blank\"&gt;",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "ASP.NET"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#asp-active-server-pages",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#asp-active-server-pages",
    "title": "ASP.NET",
    "section": "ASP (Active Server Pages)",
    "text": "ASP (Active Server Pages)\nserver side scripting(VBScript) language\nCGI: &lt;% %&gt;는 server에서 실행되는 코드",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "ASP.NET"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#asp-데이터베이스-연동",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#asp-데이터베이스-연동",
    "title": "ASP.NET",
    "section": "ASP 데이터베이스 연동",
    "text": "ASP 데이터베이스 연동\n&lt;%\n  Dim conn, connCmd, rs\n  Set connCmd = \"DSN=dsn_name; Database=dbname; UID=user;PWD=password\"\n  Set conn = Server.CreateObject(\"ADODB.Connection\")\n  Set rs = Server.CreateObject(\"ADODB.Recordset\")\n  conn.Open connCmd\n  rs.Open \"SELECT * FROM table_name\", conn\n%&gt;\n\n&lt;%\n  rs.getRows()\n\n  conn.Execute SQL\n%&gt;",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "ASP.NET"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#오류-메세지-한글-설정",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/13.html#오류-메세지-한글-설정",
    "title": "ASP.NET",
    "section": "오류 메세지 한글 설정",
    "text": "오류 메세지 한글 설정\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;%\n  Session.CodePage = 949\n  Response.CharSet = \"euc-kr\"\n  Response.AddHeader \"Pragma\",\"no-cache\"\n  Response.AddHeader \"cache-control\", \"no-staff\"\n  Response.Expires = -1\n%&gt;\n\nform tag 한글 깨짐 문제\n&lt;%\nSession.CodePage=\"65001\"\nResponse.CharSet=\"UTF-8\"\n%&gt;",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "ASP.NET"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-2.html#ddl-data-definition-language",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-2.html#ddl-data-definition-language",
    "title": "SQL",
    "section": "DDL (Data Definition Language)",
    "text": "DDL (Data Definition Language)\n\nCREATE (database, tables, views, indexes)\nALTER: modify columns / constraints\nDROP (database, tables, views, indexes)\nTRUNCATE: delete table data while keeping structure.\nMS Access에서는 지원하지 않음 =&gt; DELETE FROM table\n\nCREATE TABLE student (\n    id INT NOT NULL,\n    CourseID INT NOT NULL,\n    Name VARCHAR(100) UNIQUE, # unique는 자동으로 index 생성\n    Age INT,\n    CONSTRAINT STUDENT_PK PRIMARY KEY (id),\n    CONSTRAINT \n    COURSE_FK FOREIGN KEY (CourseID) \n    REFERENCES Course(CourseID) \n    ON UPDATE CASACADE \n    ON DELETE NO ACTION\n);\nALTER TABLE student ADD COLUMN major VARCHAR(100);\nALTER TABLE student ADD CONSTRAINT STUDENT_FK FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE;\nALTER TABLE student ADD CONSTRAINT AGE_CHECK CHECK (Age &gt; 0);\nALTER TABLE student DROP CONSTRAINT AGE_CHECK;\nDROP TABLE student;\nTRUNCATE TABLE student;\n\nCREATE VIEW [view name] AS SELECT * FROM student;\n\nDML (Data Manipulation Language)\nINSERT INTO student VALUES (1, 'Alice', 20);\nUPDATE student SET age = 21, Name = 'babo' WHERE id = 1;\nDELETE FROM student WHERE id = 1;\n\n\nDQL (Data Query Language)\nA query create temporarily a new table.\nthis allows a query to create a new relation and feed information to another query as a subquery\nSELECT * FROM student;\nSELECT name \nFROM student \nWHERE age &gt; 20\nORDER BY name DESC, age ASC;\nSELECT DISTINCT name FROM student;\nSELECT name, age FROM student WHERE Age &gt; (SELECT AVG(Age) FROM student);\n\n\nJOIN\n\ninner join(equijoin)\n\nexplicit join: FROM table1 INNER JOIN table2 ON table1.id = table2.id\n(MS Access에서는 INNER를 명시해야됨)\nimplicit join: FROM table1, table2 WHERE table1.id = table2.id\n\nouter join\n\nleft outer join: FROM table1 LEFT JOIN table2 ON table1.id = table2.id\nright outer join: FROM table1 RIGHT JOIN table2 ON table1.id = table2.id",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "SQL"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/09.html#purpose-of-a-database-design",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/09.html#purpose-of-a-database-design",
    "title": "Database Design",
    "section": "Purpose of a Database Design",
    "text": "Purpose of a Database Design\nset of database specifications that can be implemented as a database in a DBMS\n\nconceptual design: non-DBMS specific\nlogical design: DBMS specific\nphysical design: DBMS specific but not implemented directly by humans",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Design"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/09.html#logical-designrelational-design",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/09.html#logical-designrelational-design",
    "title": "Database Design",
    "section": "Logical Design(Relational Design)",
    "text": "Logical Design(Relational Design)\n\nCreate a table(relation) for each entity\n\nspecify primary key\nspecify properties for each column\n\ndata type\nconstraints\ndefault value\nnull status\n\nverify normalization: data structure의 complexity를 증가시킬 수도 있다\n→ denormalization: 조인 불필요, 조회 시 성능 향상 → datastructure complexity vs modification problems\n\nCreate relationships by placing foreign keys:\n\nStrong entity relationships\nID-dependent / non-ID-dependent weak entity relationships\nSubtypes\nRecursive",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Design"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/09.html#representing-relationships",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/09.html#representing-relationships",
    "title": "Database Design",
    "section": "Representing Relationships",
    "text": "Representing Relationships\nid-dependent의 경우 부모의 primary key로 composite key 생성\nMaximum cardinality의 유형에 따라 관계 표현 방법이 달라짐\n\n1:1: foreign key를 어디에 두어도 상관 없음\nCREATE UNIQUE INDEX idx_1_1 ON table(foriegn_key);\n1:N: many(child) 쪽에 foreign key를 두는 것이 일반적\n1 side is called parent, many side is called child\nM:N\nData Modeling에서만 쓰임. database design에서는 intersection table을 사용하여 표현. intersection table은 두 entity의 primary key를 포함하는 composite key를 가짐\n만약 두 primary key 외의 attribute를 가진다면, association entity로 표현\nSupertype / Subtype: Supertype의 primary key를 Subtype의 primary key로 사용\nRecursive Relationship: 방향 이거 다시 보자\nN:M의 경우 virtual table을 생성하여 표현\n\n설문조사는\ndescriptive statistics\n남녀 비율, 경험 비율 등등도 포함되어야 한다.\n가중 평균으로 보여준다\n도서관 예약 시스템\n\n퇴설 처리 미흡\n좌석 이용 정보 파악\n앱 알림\n\n좌석 배치도 감이 안온다. 잔여시간도 안뜬다",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Design"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html",
    "title": "반사실 주의",
    "section": "",
    "text": "5점 4개 10점 2개",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#표현주의",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#표현주의",
    "title": "반사실 주의",
    "section": "표현주의",
    "text": "표현주의\n\n사실적으로 표현을 안함(과장되있거나 외곡되어있음)\n사실적으로 연기도 안함\n사실적으로 상황 안보여줌\n상징주의와 다르게 우리 현실을 다루지만, 똑같이 재연하지 않음\n부조리극이 표현주의에 영향을 받아서 과장되어 있음\n현실적이지 않은 표현의 의도가 중요함(내면적 리얼리티)\n미술의 영역에서 등장(피카소)\n현실 거부, 저항하며 그 이면의 본질을 드러내려는 시도\n허위와 위선으로 가득 찬 가족제도, 관료제도, 사회질서와 산업 사회 비판. 새로운 인간 출현이 주제\n전보체 대사(짧은 문장), 인물의 익명성 강조, 유형화된 성격\n\n\n게오르그 카이저 아침부터 자정까지\n\n은행원: 아무런 가치 없이 기계적으로 같은 일을 반복하는 인물\n그의 안경알이 그녀의 손목을 타고 기어오른다\n수염의 숲이 출렁거린다. 안경이 크게 뜬 두 눈의 동공 속으로 가라앉는다A\n정거장식 드라마. 이전 장소로 돌아가지 않고, 인물도 다시 안나옴\n삽화식 구성(장 들이 유기적으로 연결이 안됨)",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#부조리극",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#부조리극",
    "title": "반사실 주의",
    "section": "부조리극",
    "text": "부조리극\n\n비논리적인 사고, 비 논리적인 태도\n실존주의와 초현실주의 사상에 영향을 받음\n부조리한 상황과 목적이 결여되어 있는 것\n절박한 행위와 모순, 무의미한 언어 발화\n세계와 단절된 고독한 인간이 자기존재의 근원적 상황과 끊임없이 대결\n전통적인 연극(사실주의)의 합리성 거부. 인과성이 없다\n갈등을 구축하고 행동을 수행하는 인물이 없음\n극이 시작한 것처럼 정확하게 되돌아가 끝을 맺는 구조: 변화의 불가능\n\n\n이오네스코 연극 - 대머리 여가수 (대머리도 여가수도 안나옴)\n\n현대의 기계문명, 부르주아 문명, 가치관의 상실 생활의 타락 항의\n형이상학적 차원을 상실한 세계 공격\n개인의 고독과 소외\n비열한 외부 압력과 사회의 기계적인 권력구조에 대한 복정, 개인의 신원의 불확실성\n\n영국식: 주어진 대로 자동적으로 살아가는 개인\n이상한 시계: 시간을 인식하지 못할 정도로 비 주체적으로 살아가는 인물\n모든 사람 이름이 바비 와트슨: 신원의 불확실성\n\n\n징주네와 베케트 연극 - 하녀들\n\n인간의 조건, 소외, 고독\n동기와 개념의 포기, 심리적 상황과 인간의 상황적 조건에 집중\n교훈적 목적 거부\n거울의 게임(연극 속의 연극): 모든 사물이 거울을 통해 드러남. 꿈이나 연극을 통해서만 원하는걸 보여주다가 붕괴됨\n뛰어난 언어의 아름다움\n\n끌레르가 마담, 쏠랑주가 끌레르 역할의 연극으로 시작\n마담 역할의 끌레르가 끌레르를 욕함 -&gt; 자기 증오\n끌레르 역할의 쏠랑주가 마담을 죽임 -&gt; 자기 살해, 마담으로써 죽음, 현실에서는 하녀를 벗어날 수 없음\n\n\n사뮤엘 베케트\n부조리한 조건이 실존한다는 사실 자체에 직면하도록 문제 제기\n길: 우리의 삶\n나무: 존재의 표상(인간의 존재를 떠올리게 함)\n모자: 이상\n신발: 현실\n저녁: 소멸의 시간\n아침: 생명, 젊음\n신발을 계속 벗는 동작을 반복: 변화의 욕망이 없음\n형이상학적인 블라디미르, 현실적인 에스트라곤\n고독한 존재의 살아가는 방식을 보여줌\n상징주의 x, 서사극 x, 표현주의 o(게오로그 카이저 작품) 반사실주의 희곡 텍스트에 기반해서 작품하고 특징하고 기반해서 부조리극 작품하고 특징하고 기반해서 반사실주의의 사실주의와 대비되는 장르적인 특징\n상징주의 x, 서사극 x, 표현주의 o(게오로그 카이저 작품) 반사실주의 희곡 텍스트에 기반해서 작품하고 특징하고 기반해서 부조리극 작품하고 특징하고 기반해서 반사실주의의 사실주의와 대비되는 장르적인 특징",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#환경-연극",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#환경-연극",
    "title": "반사실 주의",
    "section": "환경 연극",
    "text": "환경 연극\n\n관객을 공연 환경의 주요한 요소로 간주\n관객과 배우 사이에 존재하는 공간적 경계선을 무너뜨림\nperformance group 극단을 중심으로. 정치적이고 사회 비판적인 내용이 주조를 이룸",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#이미지-연극",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#이미지-연극",
    "title": "반사실 주의",
    "section": "이미지 연극",
    "text": "이미지 연극\n\n개인의 미적 자의식이 투영됨\n이데올로기, 메세지, 주제 등을 의도적으로 지움\n그로토우스키(가난한 연극): 관객, 배우, 공간 세 가지만 필요하다고 본다\n피터 브룩: empty 씨어터(신체 연극이 중요)\n아르토: 잔혹극\n육체연극, 제의연극, 집단연극\n로버트 윌슨: 느린 액션, 장시간 공연, 대사 대신 배우의 몸동작, 음악 등을 많이 씀, 기하학적 이미지",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#우스터-그룹-햄릿",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#우스터-그룹-햄릿",
    "title": "반사실 주의",
    "section": "우스터 그룹 햄릿",
    "text": "우스터 그룹 햄릿\n\n라이브와 미디어가 서로를 복제하면서 서로의 고유한 정체성을 훼손해가는 과정을 보여줌, 예술 형식의 문제적 상황 환기\n\n이전 연극과의 차이 우스터 그룹, 미국 아방가르드 전반적으로",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#지킬앤하이드",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/tmp.html#지킬앤하이드",
    "title": "반사실 주의",
    "section": "지킬앤하이드",
    "text": "지킬앤하이드",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "반사실 주의"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#entity",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#entity",
    "title": "The Relational Model",
    "section": "entity",
    "text": "entity\na formal name for a thing that is being tracked one theme or topic (just single table)",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#relation",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#relation",
    "title": "The Relational Model",
    "section": "Relation",
    "text": "Relation\n\na two-dimensional table that has specific charateristics\nCell of the table hold single value\nAll entries in a column are of the same kind\nNo two rows in a table are identical",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#domain-cartesian-product",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#domain-cartesian-product",
    "title": "The Relational Model",
    "section": "domain & cartesian product",
    "text": "domain & cartesian product\n\ndomain: set of possible values for a column\ncartesian product: set of all possible combinations of rows from two tables",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#presenting-relation-structures",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#presenting-relation-structures",
    "title": "The Relational Model",
    "section": "Presenting Relation Structures",
    "text": "Presenting Relation Structures\nRELATION_NAME(PrimaryKey, ForeignKey, ColumnName, …)",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#key",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#key",
    "title": "The Relational Model",
    "section": "key",
    "text": "key\n\nidentify a row\nUnique Key(Primary Key)\nNonUnique Key(Foreign Key)\nComposite Key: Primary key가 두개 이상. Surrogate Key로 대체되곤 함.\nCandidate Key: unique한 columns\nSurrogate Key: 자동으로 할당되는 일련번호\nIDENTITY (start, increment)",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#referential-integrity-constraint",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#referential-integrity-constraint",
    "title": "The Relational Model",
    "section": "Referential Integrity Constraint",
    "text": "Referential Integrity Constraint\n\n모든 foriegn key는 존재하는 primary key와 매칭되야한다.",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#null-values",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/03.html#null-values",
    "title": "The Relational Model",
    "section": "Null values",
    "text": "Null values\n\nrequired, allow nulls 설정으로 null값을 허용할지 결정",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-1.html#normalization",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-1.html#normalization",
    "title": "Database Normalization",
    "section": "Normalization",
    "text": "Normalization\n\nprocess of organizing a database to reduce redundancy problem and improve data integrity",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Normalization"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-1.html#functional-dependency",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-1.html#functional-dependency",
    "title": "Database Normalization",
    "section": "Functional Dependency",
    "text": "Functional Dependency\n\n하나의 atrribute가 다른 attribute의 value를 결정하는지 여부를 판단\nwell formed인지 판별할 수 있는 기준\nA(Determinant) -&gt; B(dependent): A가 결정되면 B도 결정된다면 B는 A에 함수적 종속\nEvery determinant must be a Candidate Key",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Normalization"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-1.html#normalization-process",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/04-1.html#normalization-process",
    "title": "Database Normalization",
    "section": "Normalization Process",
    "text": "Normalization Process\n\nBCFNF: Boyce-Codd Normal Form =&gt; Each relation has only one theme\n\n\nIdentify all the Candidate Keys.\nIdentify all the Functional Dependencies.\nExamine the determinants of the functional dependencies\n\nplace the columns of the functional dependency in a new relation of their own\nmake the determinant of the functianl dependency the primary key of the new relation\nLeabe a copy of the determinant as a foreign key in the original relation\ncreate a referential integrity constraint between the original and new relation\n\nRepeat the process until every determinant of every relation is a candidate key",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Normalization"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/11.html#concurrency-control",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/11.html#concurrency-control",
    "title": "Database Administration",
    "section": "Concurrency control",
    "text": "Concurrency control\nEnsuring that one user’s work does not inappropriately influence another user’s work\n\nStrict concurrency control requires locking the database, 다른 사용자의 동시 사용 허가 x\nLower concurrency control allows more throughput\n\n\nTransactions\nUsers submit Transactions(LUWs)\n\nAtmomic Transaction: 데이터베이스에서 일련의 작업들이 모두 성공적으로 수행되거나, 그렇지 않을 경우 작업이 전혀 수행되지 않아 데이터베이스가 변경되지 않는 상태를 유지하는 트랜잭션\n→ Before committed, all LUWs must be successfully completed, or rollback\nConcurrent Transactions: 여러 트랜잭션이 동시에 실행되는 것\n\nLost update problem: 두 트랜잭션이 동시에 같은 데이터를 수정할 때, 하나의 트렌잭션이 다른 트랜잭션의 변경을 덮어쓰는 문제\nInconsistent read problem: 한 트랜잭션이 데이터를 읽는 도중 다른 트랜잭션이 데이터를 수정하는 문제\n\nDirty read: commit 되기 이전에 수정된 데이터를 읽는 것. 만약 rollback이 될 경우 문제가 발생.\nNonrepeatable read: 데이터를 두 번 읽었는데 commit된 transaction 때문에 값이 다른 경우\nPhantom read: 데이터를 두 번 읽었는데 commit된 transaction 때문에 새로운 row가 추가된 경우\n\nResource locking\n\nImplicit locks: DBMS가 자동으로 수행하는 lock\nExplicit locks\nLOCK TABLES table_name READ -- or WRITE\nUNLOCK TABLES\nExclusive locks: 다른 트랜잭션에서 읽기/쓰기 불가\nShared locks: 다른 트랜잭션에서 읽기 가능, 쓰기 불가\nrock granularity: row-level vs table-level vs database-level\n\n\nSerializable Transactions: 가장 강력한 격리 수준 보장\n\nTwo-pase locking(2PL): growing phase와 shrinking phase로 나뉨\n\nACID Transaction\n\nAtomic: 성공한 transaction만 저장되어야 한다\nConsistent: 현재의 transaction이 마무리 되기 전 까지 record를 저장할 수 없다\n→ 트랜잭션의 살향 결과로 데이터베이스 상태가 모순되지 않음\nIsolated\n\nread uncommitted: 다른 트랜잭션에서 commit되지 않은 데이터도 읽을 수 있음\nread committed: 다른 트랜잭션이 commit된 데이터만 읽을 수 있음\nrepeatable read: 다른 트랜잭션이 commit된 데이터만 읽을 수 있음\nserializable: 가장 강력한 격리 수준 보장\n\nDurable: 트랜잭션이 성공적으로 완료되면, 그 결과는 영구적으로 저장되어야 한다\n\n\n\n\n\nDeadlock / deadly embrace\n두 개 이상의 트랜잭션이 서로 unlock을 무한히 기다리는 상태\n\n\nlock\n\noptimistic locking\n\nassumption: No conflict will occur\nif no conflict occurs, the transaction is committed else it is rolled back and repeated\n\npessimistic locking\n\nassumption: Conflict will occur\nlock the data before the transaction starts\n\n\n\n\nCursor\nA cursor is a pointer into a set of rows that are the result set from an SQL SELECT statement\nDECLARE cursor_name CURSOR FOR SELECT column_name FROM table_name",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Administration"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/11.html#backup-and-recovery",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/11.html#backup-and-recovery",
    "title": "Database Administration",
    "section": "Backup and recovery",
    "text": "Backup and recovery\n\nRecovery\n\nvia Reprocessing\nvia Rollback and Rollforward\n\nlog file transaction을 undo할 때, before-images가 존재해함. (rollback) transaction을 redo할 때, after-images가 존재해함.(rollforward)",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Administration"
    ]
  },
  {
    "objectID": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/11.html#security",
    "href": "posts/학부 개념정리/2학년 2학기/데이터베이스설계및활용/11.html#security",
    "title": "Database Administration",
    "section": "Security",
    "text": "Security",
    "crumbs": [
      "학부 개념정리",
      "2학년 2학기",
      "데이터베이스설계및활용",
      "Database Administration"
    ]
  }
]