[
  {
    "objectID": "posts/블로그 소식/1.html#아직-준비중",
    "href": "posts/블로그 소식/1.html#아직-준비중",
    "title": "아직 준비중입니다.",
    "section": "아직 준비중",
    "text": "아직 준비중\n우리 블로그 아직 영업 안합니다.",
    "crumbs": [
      "블로그 소식",
      "아직 준비중입니다."
    ]
  },
  {
    "objectID": "posts/data/database/4-1.html#normalization",
    "href": "posts/data/database/4-1.html#normalization",
    "title": "Database Normalization",
    "section": "Normalization",
    "text": "Normalization\n\nprocess of organizing a database to reduce redundancy problem and improve data integrity",
    "crumbs": [
      "Data",
      "Database",
      "Database Normalization"
    ]
  },
  {
    "objectID": "posts/data/database/4-1.html#functional-dependency",
    "href": "posts/data/database/4-1.html#functional-dependency",
    "title": "Database Normalization",
    "section": "Functional Dependency",
    "text": "Functional Dependency\n\n하나의 atrribute가 다른 attribute의 value를 결정하는지 여부를 판단\nwell formed인지 판별할 수 있는 기준\nA(Determinant) -&gt; B(dependent): A가 결정되면 B도 결정된다면 B는 A에 함수적 종속\nEvery determinant must be a Candidate Key",
    "crumbs": [
      "Data",
      "Database",
      "Database Normalization"
    ]
  },
  {
    "objectID": "posts/data/database/4-1.html#normalization-process",
    "href": "posts/data/database/4-1.html#normalization-process",
    "title": "Database Normalization",
    "section": "Normalization Process",
    "text": "Normalization Process\n\nBCFNF: Boyce-Codd Normal Form =&gt; Each relation has only one theme\n\n\nIdentify all the Candidate Keys.\nIdentify all the Functional Dependencies.\nExamine the determinants of the functional dependencies\n\nplace the columns of the functional dependency in a new relation of their own\nmake the determinant of the functianl dependency the primary key of the new relation\nLeabe a copy of the determinant as a foreign key in the original relation\ncreate a referential integrity constraint between the original and new relation\n\nRepeat the process until every determinant of every relation is a candidate key",
    "crumbs": [
      "Data",
      "Database",
      "Database Normalization"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#entity",
    "href": "posts/data/database/3.html#entity",
    "title": "The Relational Model",
    "section": "entity",
    "text": "entity\na formal name for a thing that is being tracked one theme or topic (just single table)",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#relation",
    "href": "posts/data/database/3.html#relation",
    "title": "The Relational Model",
    "section": "Relation",
    "text": "Relation\n\na two-dimensional table that has specific charateristics\nCell of the table hold single value\nAll entries in a column are of the same kind\nNo two rows in a table are identical",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#domain-cartesian-product",
    "href": "posts/data/database/3.html#domain-cartesian-product",
    "title": "The Relational Model",
    "section": "domain & cartesian product",
    "text": "domain & cartesian product\n\ndomain: set of possible values for a column\ncartesian product: set of all possible combinations of rows from two tables",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#presenting-relation-structures",
    "href": "posts/data/database/3.html#presenting-relation-structures",
    "title": "The Relational Model",
    "section": "Presenting Relation Structures",
    "text": "Presenting Relation Structures\nRELATION_NAME(PrimaryKey, ForeignKey, ColumnName, …)",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#key",
    "href": "posts/data/database/3.html#key",
    "title": "The Relational Model",
    "section": "key",
    "text": "key\n\nidentify a row\nUnique Key(Primary Key)\nNonUnique Key(Foreign Key)\nComposite Key: Primary key가 두개 이상. Surrogate Key로 대체되곤 함.\nCandidate Key: unique한 columns\nSurrogate Key: 자동으로 할당되는 일련번호\nIDENTITY (start, increment)",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#referential-integrity-constraint",
    "href": "posts/data/database/3.html#referential-integrity-constraint",
    "title": "The Relational Model",
    "section": "Referential Integrity Constraint",
    "text": "Referential Integrity Constraint\n\n모든 foriegn key는 존재하는 primary key와 매칭되야한다.",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "posts/data/database/3.html#null-values",
    "href": "posts/data/database/3.html#null-values",
    "title": "The Relational Model",
    "section": "Null values",
    "text": "Null values\n\nrequired, allow nulls 설정으로 null값을 허용할지 결정",
    "crumbs": [
      "Data",
      "Database",
      "The Relational Model"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "전체 게시글",
    "section": "",
    "text": "정렬\n       디폴트\n         \n          날짜 - 날짜(오름차순)\n        \n         \n          날짜 - 날짜(내림차순)\n        \n         \n          제목\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n아직 준비중입니다.\n\n\n\n소식\n\n\nblog\n\n\n\n\n\n\n\n2024-10-26\n\n\n\n\n\n\n\n\n\n\n\n\nSQL\n\n\n\n개념 정리\n\n\n\n테스트 게시글\n\n\n\n2024-09-27\n\n\n\n\n\n\n\n\n\n\n\n\nDatabase Normalization\n\n\n\n개념 정리\n\n\n\n테스트 게시글\n\n\n\n2024-09-24\n\n\n\n\n\n\n\n\n\n\n\n\nThe Relational Model\n\n\n\n개념 정리\n\n\n\n테스트 게시글\n\n\n\n2024-09-17\n\n\n\n\n\n\n\n\n\n\n\n\nAn Overview of Database\n\n\n\n개념 정리\n\n\n\n테스트 게시글\n\n\n\n2024-09-03\n\n\n\n\n\n\n\n\n일치 없음"
  },
  {
    "objectID": "posts/data/database/4-2.html#ddl-data-definition-language",
    "href": "posts/data/database/4-2.html#ddl-data-definition-language",
    "title": "SQL",
    "section": "DDL (Data Definition Language)",
    "text": "DDL (Data Definition Language)\n\nCREATE (database, tables, views, indexes)\nALTER: modify columns / constraints\nDROP (database, tables, views, indexes)\nTRUNCATE: delete table data while keeping structure.\nMS Access에서는 지원하지 않음 =&gt; DELETE FROM table\n\nCREATE TABLE student (\n    id INT NOT NULL,\n    CourseID INT NOT NULL,\n    Name VARCHAR(100) UNIQUE, # unique는 자동으로 index 생성\n    Age INT,\n    CONSTRAINT STUDENT_PK PRIMARY KEY (id),\n    CONSTRAINT \n    COURSE_FK FOREIGN KEY (CourseID) \n    REFERENCES Course(CourseID) \n    ON UPDATE CASACADE \n    ON DELETE NO ACTION\n);\nALTER TABLE student ADD COLUMN major VARCHAR(100);\nALTER TABLE student ADD CONSTRAINT STUDENT_FK FOREIGN KEY (CourseID) REFERENCES Course(CourseID) ON DELETE CASCADE;\nALTER TABLE student ADD CONSTRAINT AGE_CHECK CHECK (Age &gt; 0);\nALTER TABLE student DROP CONSTRAINT AGE_CHECK;\nDROP TABLE student;\nTRUNCATE TABLE student;\n\nCREATE VIEW [view name] AS SELECT * FROM student;\n\nDML (Data Manipulation Language)\nINSERT INTO student VALUES (1, 'Alice', 20);\nUPDATE student SET age = 21, Name = 'babo' WHERE id = 1;\nDELETE FROM student WHERE id = 1;\n\n\nDQL (Data Query Language)\nA query create temporarily a new table.\nthis allows a query to create a new relation and feed information to another query as a subquery\nSELECT * FROM student;\nSELECT name \nFROM student \nWHERE age &gt; 20\nORDER BY name DESC, age ASC;\nSELECT DISTINCT name FROM student;\nSELECT name, age FROM student WHERE Age &gt; (SELECT AVG(Age) FROM student);\n\n\nJOIN\n\ninner join(equijoin)\n\nexplicit join: FROM table1 INNER JOIN table2 ON table1.id = table2.id\n(MS Access에서는 INNER를 명시해야됨)\nimplicit join: FROM table1, table2 WHERE table1.id = table2.id\n\nouter join\n\nleft outer join: FROM table1 LEFT JOIN table2 ON table1.id = table2.id\nright outer join: FROM table1 RIGHT JOIN table2 ON table1.id = table2.id",
    "crumbs": [
      "Data",
      "Database",
      "SQL"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#the-importance-of-dbs-today",
    "href": "posts/data/database/1-2.html#the-importance-of-dbs-today",
    "title": "An Overview of Database",
    "section": "The Importance of DBs Today",
    "text": "The Importance of DBs Today\n\nDepend upon database: Internet, Web 2.0, IOT",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#why-and-how-databases-are-used",
    "href": "posts/data/database/1-2.html#why-and-how-databases-are-used",
    "title": "An Overview of Database",
    "section": "Why and How Databases are Used?",
    "text": "Why and How Databases are Used?\n\nThe purpose of a database is to keep track of thing\ndb store information that is more complicated than a simple spread sheet",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#problems-with-lists-spread-sheet",
    "href": "posts/data/database/1-2.html#problems-with-lists-spread-sheet",
    "title": "An Overview of Database",
    "section": "Problems with Lists (spread sheet)",
    "text": "Problems with Lists (spread sheet)\n\nRedundancy\n\n\n\n\n필요없는 column들이 중복됨\n\n\n\nMultiple Themes\n\n\n그 결과로, list에 나타날 때만 존재하는 informartion이 생김\n\n\nList Modification Issues\n\n\n\n\ndeletion problems, update problems, insertion problems",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#relational-databases",
    "href": "posts/data/database/1-2.html#relational-databases",
    "title": "An Overview of Database",
    "section": "Relational Databases",
    "text": "Relational Databases\n\nRelationa Model is methodology used as a solution for database design\nA relational database stores information in tables\n\nEach informational topic is stored in its own table\n\nEach theme in the list can be stored in a table\n\nTable = file = relation\ncolumn = fields = attribute\nrow = record = tuple",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#sql-structured-query-language",
    "href": "posts/data/database/1-2.html#sql-structured-query-language",
    "title": "An Overview of Database",
    "section": "SQL (Structured Query Language)",
    "text": "SQL (Structured Query Language)\n\ninternational standard for creating, processing, querying databases and their tables\ndb applications use SQL to retrieve, format, report, insert, delete, modify data for users\ncan combine table by join operation\n\nSELECT  CUSTOMER.CustomerLastName, \n        CUSTOMER.CustomerFirstName, \n        CUSTOMER.Phone,\n        COURSE.CourseDate, \n        ENROLLMENT.AmountPaid,\n        COURSE.Course, \n        COURSE.Fee\nFROM    CUSTOMER, ENROLLMENT, COURSE\nWHERE   CUSTOMER.CustomerNumber = ENROLLMENT.CustomerNumber -- join condition\n        AND  COURSE.CourseNumber = ENROLLMENT.CourseNumber; -- join condition",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#database-system-dbs",
    "href": "posts/data/database/1-2.html#database-system-dbs",
    "title": "An Overview of Database",
    "section": "Database System (DBS)",
    "text": "Database System (DBS)\n\n\n\nThe four components of database system\n\n\n\nUser: Employ database application to keep track of things\nUse forms to read, enter, query data\nproduce reports\nDatabase Application: web/mobile database applications, Forms, Reports\nDBMS: used to create, process, administer the database\nDatabase: self-describing collection of related tables\nuser data, metadata, index and other overhead data, application metadata(form, reports) are stored in db\nmetadata = about the structure of the database. &lt;-&gt; user data\n\n\nFunction of DBMS\n\nDB administration\n\nControl concurrency\nProvide security\nPerform backup and recovery\n\n\n\n\nReferential Integrity Constraints",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#personal-vs-enterprise-class-database-systems",
    "href": "posts/data/database/1-2.html#personal-vs-enterprise-class-database-systems",
    "title": "An Overview of Database",
    "section": "Personal vs Enterprise-class Database Systems",
    "text": "Personal vs Enterprise-class Database Systems\n\nPersonal: Access\nEnterprise-class(Organizational): Microsoft SQL server",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#nosql-databases",
    "href": "posts/data/database/1-2.html#nosql-databases",
    "title": "An Overview of Database",
    "section": "NoSQL databases",
    "text": "NoSQL databases\n\nNoSQL database = non-relational database",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  },
  {
    "objectID": "posts/data/database/1-2.html#cloud-databases",
    "href": "posts/data/database/1-2.html#cloud-databases",
    "title": "An Overview of Database",
    "section": "Cloud databases",
    "text": "Cloud databases\nMain frame -&gt; Client/server -&gt; Cloud",
    "crumbs": [
      "Data",
      "Database",
      "An Overview of Database"
    ]
  }
]