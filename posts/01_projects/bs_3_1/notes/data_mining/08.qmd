---
title: "preprocessing"
date: 2025-03-26
categories: ["data mining"]
---

![](/img/human-thumb.jpg){.post-thumbnail}

```{python}
import chardet

with open("_data/class/2012년_1당사자_법규위반별_주야별_교통사고.csv", "rb") as f:
    print(chardet.detect(f.read()))
```

```{python}
import pandas as pd

df = pd.read_csv(
    "_data/class/2012년_1당사자_법규위반별_주야별_교통사고.csv", encoding="EUC-KR"
)
df
```

```{python}
df = pd.read_csv("_data/class/vote.csv")
df
```

```{python}
x = df.iloc[:, :8]
x
```

```{python}
y = df["vote"]
y
```

```{python}
import matplotlib.pyplot as plt

df = pd.read_csv("_data/class/Car-selling price.csv")
df
```

```{python}
plt.title("Scatter Diagram")
plt.xlabel("Mileage")
plt.ylabel("Sell Price($)")
plt.scatter(df["Mileage"], df["Sell Price($)"])
```

```{python}
from sklearn.model_selection import train_test_split

x = df[["Mileage", "Age(yrs)"]]
y = df["Sell Price($)"]

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2)
```

```{python}
from sklearn.preprocessing import Binarizer
import numpy as np

data = np.array([[1.1], [2.2], [3.3], [4.4], [5.5]])
scaler = Binarizer(threshold=3.0)
scaler.fit(data)
result = scaler.transform(data)
result
```

```{python}
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(data)
result = scaler.transform(data)
result
```

```{python}
import numpy as np
from sklearn.preprocessing import Normalizer

data = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [4.0, 5.0], [5.0, 6.0]])

scaler = Normalizer(norm='l2')
X_transformed = scaler.fit_transform(data.T).T
X_transformed
```

```{python}
from sklearn.preprocessing import MinMaxScaler
minmax_scaler = MinMaxScaler(feature_range=(0, 1))
minmax_scaler.fit_transform(data)
```

```{python}
data = pd.read_csv('_data/class/homeprices.csv')
df = pd.DataFrame(data)

dummies = pd.get_dummies(df.town)
merged = pd.concat([df, dummies], axis='columns')
merged
```

```{python}
final = merged.drop(['town', 'west windsor'], axis='columns')
final
```

```{python}
X = final.drop('price', axis='columns')
X
```

```{python}
y = final.price
y
```

```{python}
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X, y)
model.predict([[2800, 0, 1]])
```

```{python}
model.score(X, y)
```

```{python}
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
dfle = df
dfle.town = le.fit_transform(dfle.town)
dfle
```

