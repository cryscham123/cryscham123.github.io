---
title: "PCA 분석"
date: 2025-05-23
categories: ["data mining"]
---

![](/img/human-thumb.jpg){.post-thumbnail}

## PCA

```{python}
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import pandas as pd


feature_names = ['q1a1', 'q1a2','q1a3', 'q1a4', 'q1a5', 'q1a6', 'q1a7', 'q12a12', 'q12a13', 'q12a14', 'q12a15', 'q12a16', 'q12a17', 'q12a18']

# 모든 학생 데이터에 대한 PCA 결과를 저장할 딕셔너리
pca_results = {}

for i in range(3, 5):
    df = pd.read_csv(f'_data/student_{i}.csv')
    df = df[feature_names].dropna()
    wave_id = f'w{i}'
    scaler = StandardScaler()
    df_scaled = scaler.fit_transform(df)

    n_components = 3
    pca = PCA(n_components=n_components)
    principal_components = pca.fit_transform(df_scaled)

    pc_columns = [f'PC{j+1}_{wave_id}' for j in range(n_components)]  # 각 PC에 wave_id를 포함
    principal_df = pd.DataFrame(data=principal_components, columns=pc_columns)
    
    # 모든 샘플에 고유 식별자 부여
    principal_df['sample_id'] = [f'{wave_id}_sample_{k}' for k in range(len(principal_df))]
    
    # 결과 저장
    pca_results[wave_id] = principal_df
    
    # 원래 있던 출력 코드 유지
    explained_variance_ratio = pca.explained_variance_ratio_
    print(f"--- 학생 {i} 각 주성분의 설명된 분산 비율 ---")
    for j, ratio in enumerate(explained_variance_ratio):
        print(f"PC{j+1}: {ratio:.4f} (누적: {np.sum(explained_variance_ratio[:j+1]):.4f})")
    print(f"총 설명된 분산: {np.sum(explained_variance_ratio):.4f}")
    print("\n")

    print(f"--- 학생 {i} 주성분 벡터 (고유 벡터) ---")
    components_df = pd.DataFrame(pca.components_, columns=feature_names, index=pc_columns)
    print(components_df)
    print("\n")

# 횡 방향으로 PCA 결과 병합 (공통 키가 있는 경우)
# 참고: 실제 데이터에서는 sample_id가 동일한 레코드끼리 병합해야 할 수 있습니다
# 이 예제에서는 단순히 첫 번째 데이터셋을 기준으로 병합합니다

# 먼저 기준 데이터프레임 설정
merged_df = pca_results['w3'].set_index('sample_id')

# 나머지 데이터프레임을 횡 방향으로 병합
for wave_id, df in pca_results.items():
    if wave_id != 'w3':  # 기준 데이터프레임 제외
        # 인덱스 기준으로 병합 (outer join - 모든 샘플 포함)
        merged_df = merged_df.join(df.set_index('sample_id'), how='outer')

# 결과 확인
print("--- 횡 방향으로 병합된 PCA 결과 ---")
print(merged_df.reset_index())  # sample_id를 다시 컬럼으로 변환
```


