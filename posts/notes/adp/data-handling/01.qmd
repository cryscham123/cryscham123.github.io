---
title: "pandas data 구조"
date: 2024-12-20
categories: ["데이터 분석"]
projects: ["adp"]
---

pandas: numpy를 라벨링한거

# Series

1차원 배열 구조, 이름과 형식을 가지고 모든 값에 고유한 인덱스를 가짐

```{python}
import pandas as pd

data1 = pd.Series({'ulala': 1, 'haha': 2}, name='class')
data1
```

```{python}
data1 = pd.Series({'ulala': 1, 'ulala': 2}, name='class')
data1
```

```{python}
data2 = pd.Series([1, 2], name='class')
data2
```

# DataFrame

2차원 배열 구조, 각 행은 인덱스를 가지고, 각 열은 이름과 형식을 가짐

## Before

데이터를 호출하고, 데이터 내용과 요약 / 통계 정보를 확인해야함

칼럼명이 칼럼 타입을 변경해야할 때도 있음

### Pandas 사용 준비

1. 라이브러리 설치
2. 라이브러리 호출

```{python}
import pandas as pd

pd.set_option('display.max_rows', 10)
```

### DataFrame 선언

```{python}
import numpy as np
dataset = np.array([['kor', 70], ['math', 80]])
# declare df 1
df = pd.DataFrame(dataset, columns=['class', 'score'])
# declare df 2
df = pd.DataFrame([['kor', 70], ['math', 80]], columns=['class', 'score'])
# declare df 3
df = pd.DataFrame({'class': ['kor', 'math'], 'score': [70, 80]})
df
```

### DataFrame 읽고 저장

```{python}
# filepath = '../book/data/data.csv'
# data = pd.read_csv(filepath, na_values='NA', encoding='utf8')
# data.to_csv('result.csv', header=True, index=True, encoding='utf8')
```

### DataFrame 출력

```{python}
from sklearn.datasets import load_iris

iris = load_iris()
iris
```

```{python}
iris = pd.DataFrame(iris.data, columns=iris.feature_names)
iris
```

```{python}
iris.info()
```

```{python}
iris.describe()
```

sepal length와 petal width의 값의 차이가 크다.

전처리 과정에서 변수 정규화 수행의 근거가 된다.

### index / column 명 변경

```{python}
df.index
```

```{python}
list(df.index)
```

```{python}
df.index = ['A', 'B']
df.index
```

```{python}
df
```

```{python}
df.set_index('class', drop=True, append=False, inplace=True)
df
```

```{python}
df.reset_index(drop=False, inplace=True)
df
```

```{python}
iris.columns
```

```{python}
iris.columns = ['sepal length', 'sepal width', 'petal length', 'petal width']
iris
```

```{python}
iris.columns = iris.columns.str.replace(' ', '_')
iris
```

### 데이터 타입 변경

사용 가능한 타입

- int
- float
- bool
- datetime
- category
- object

```{python}
iris.dtypes
```

```{python}
iris['sepal_length'] = iris['sepal_length'].astype('int')
iris[['sepal_width', 'petal_length']] = \
iris[['sepal_width', 'petal_length']].astype('int')
iris
```

## row / coumn 선택 추가 삭제

### row 선택

```{python}
iris[0:4]
```

### column 선택

Series 형식으로 출력

```{python}
iris['sepal_length']
```

DataFrame 형식으로 출력

```{python}
iris[['sepal_length', 'sepal_width']]
```

### column, row 선택

```{python}
iris.loc[0:4, ['sepal_length', 'sepal_width']]
```

```{python}
iris.iloc[0:4, [1, 2]]
```

### row 추가

```{python}
# 방법 1: concat 사용
# df = pd.concat([df, pd.DataFrame([{'class': 'eng', 'score': 90}])], ignore_index=True)

# 방법 2: loc 사용 
df.loc[len(df)] = {'class': 'eng', 'score': 90}
df
```

### column 추가

```{python}
df['yo'] = df['score'] + 10
df
```

### row 삭제

```{python}
df.drop(2, inplace=True)
df
```

### column 삭제

```{python}
df.drop(columns=['yo'], inplace=True)
df
```

## 조건 선택

```{python}
iris[(iris['sepal_length'] > 5) & (iris['sepal_width'] < 3)]
```

```{python}
df.loc[df['score'] > 70, '합격'] = 'Pass'
df.loc[df['합격'] != 'Pass', '합격'] = 'Fail'
df
```

```{python}
import numpy as np

condition_list = [(df['score'] >= 70), 
                  (df['score'] < 70) & (df['score'] >= 60),
                  (df['score'] < 60)]
grade_list = ['A', 'B', 'C']
df['grade'] = np.select(condition_list, grade_list, default='F')
df
```

### 결측치 탐색

```{python}
df.isna().sum()
```

```{python}
df.notna().sum(1) # 행 기준
```

### 결측치 제거

```{python}
# dropna(axis=0, how='any' or 'all', thresh=None, subset=None, inplace=False)
df.dropna()
```

### 결측치 대체

```{python}
# fillna(value=None, method=None ('pad', 'ffill', 'backfill', 'bfill'), axis=None, inplace=False, limit=None)
```
