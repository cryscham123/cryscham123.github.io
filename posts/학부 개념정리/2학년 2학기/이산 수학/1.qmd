---
title: 'Logic and Proofs'
date: '2024-10-01'
description: '이산수학의 논리와 증명에 대해 알아봅니다.'
categories: ['이산수학', '개념 정리']
---

![](/img/discrete.jpg){.post-thumbnail}

## Proposition

declarative sentence that is either true or false

### propositional variable

p, q, r, s, ...  
ex) p: it is raining


> Proposition must be either true or false.  
> 'x is 10' is not a proposition.

### Logical Operators

(ascending order of precedence)


- `Negation`: ¬ NOT
- `Conjunction`: ∧ AND
- `Disjunction`: ∨ OR  
  - `Inclusive OR`: either is true
  - `Exclusive OR`: ⊕ either is true, but not both
- `Implication`: -> if then
  it is not real-world's causual relationship. `just depend on p and q's value`  
  ex) If I am elected, then I will lower taxes.  
  if politician is elected but not lower taxes, implication is false.  
  but politician is not elected, no matter what, implication is true.
- `Biconditional`: <-> if and only if

## Truth Table

| p | q | ¬p | p∧q | p∨q | p->q | p<->q |
|---|---|----|-----|-----|------|-------|
| T | T | F  | T   | T   | T    | T     |
| T | F | F  | F   | T   | F    | F     |
| F | T | T  | F   | T   | T    | F     |
| F | F | T  | F   | F   | T    | T     |

#### Different Ways of Expressing Implication

- if p, then q
- if p, q
- q unless ¬ p
- q if p
- q whenever p
- q follows from p
- p implies q
- p only if q
- q when p
- p is sufficient for q
- q is necessary for p
- a necessary condition for p is q
- a sufficient condition for q is p

#### Different Ways of Expressing Biconditional

- p is necessary and sufficient for q
- if p then q, and conversely
- p iff q.
- p exactly when q.

[if you confuse](https://sciphy.tistory.com/m/483)

## Converse, Contrapositive, Inverse

If implication is p->q


- Converse: q->p
- Inverse: ¬p -> ¬q
- `Contrapositive`: ¬q -> ¬p

## Logical Equivalence

- `tautology`: always true
- `contradiction`: always false
- `contingency`: neither tautology nor contradiction
- `logical equivalence`: ≡ two propositions are always true or false together

### Laws of Logic

- `Identity Laws`
  - P ∧ T ≡ P
  - P ∨ F ≡ P
- `Domination Laws`
  - P ∨ T ≡ T
  - P ∧ F ≡ F
- `Idempotent Laws`
  - P ∨ P ≡ P
  - P ∧ P ≡ P
- `Double Negation Laws`
  - ¬(¬P) ≡ P
- `Absorption Laws`
  - P ∨ (P ∧ Q) ≡ P
  - P ∧ (P ∨ Q) ≡ P
- `Negation Laws`
  - P ∨ ¬P ≡ T
  - P ∧ ¬P ≡ F

- `Commutative Laws`
  - P ∨ Q ≡ Q ∨ P
  - P ∧ Q ≡ Q ∧ P
- `Associative Laws`
  - (P ∨ Q) ∨ R ≡ P ∨ (Q ∨ R)
  - (P ∧ Q) ∧ R ≡ P ∧ (Q ∧ R)
- `Distributive Laws`
  - P ∨ (Q ∧ R) ≡ (P ∨ Q) ∧ (P ∨ R)
  - P ∧ (Q ∨ R) ≡ (P ∧ Q) ∨ (P ∧ R)
- `De Morgan's Laws`
  - ¬(P ∧ Q) ≡ ¬P ∨ ¬Q
  - ¬(P ∨ Q) ≡ ¬P ∧ ¬Q

#### A Few More Equivalences

- p -> q ≡ ¬p ∨ q
- p -> q ≡ ¬q -> ¬p
- p ∨ q ≡ ¬p -> q
- p ∧ q ≡ ¬(p -> ¬q)
- (p -> q) ∧ (p -> r) ≡ p -> (q ∧ r)
- (p -> r) ∧ (q -> r) ≡ (p ∨ q) -> r
- (p -> q) ∨ (p -> r) ≡ p -> (q ∨ r)
- (p -> r) ∨ (q -> r) ≡ (p ∧ q) -> r
- p <-> q ≡ (p -> q) ∧ (q -> p)
- p <-> q ≡ ¬p <-> ¬q
- p <-> q ≡ (p ∧ q) ∨ (¬p ∧ ¬q)
- ¬(p <-> q) ≡ p <-> ¬q

## Predicates and Quantifiers

- `predicate`: a sentence that contains a finite number of variables and becomes a proposition when specific values are substituted for the variables
- `quantifiers`
  - ∀: for all,
  - ∃: there exists
  - ∃!: there exists unique
  - ¬∀ ≡ ∃, ¬∃ ≡ ∀

## Rules of Inference

### Modus Ponens
p -> q  
p  
<U>______</U>  
∴ q

### Modus Tollens
p -> q  
¬q  
<U>______</U>  
∴ ¬p

### Hypothetical Syllogism
p -> q  
q -> r  
<U>______</U>  
∴ p -> r

### Disjunctive Syllogism
p ∨ q  
¬p  
<U>______</U>  
∴ q

### Addition
p  
<U>______</U>  
∴ p ∨ q

### Simplification
p ∧ q  
<U>______</U>  
∴ q

### Conjunction
p  
q  
<U>______</U>  
∴ p ∧ q

### Resolution
¬p ∨ r  
p ∨ q  
<U>______</U>  
∴ q ∨ r

### Universal instantiation (UI)
∀xp(x)  
<U>______</U>  
∴ p(c) c is an arbitrary constant in the domain of x

### Universal generalization (UG)
p(c) for an arbitrary c  
<U>______</U>  
∴ ∀xp(x)

### Existential instantiation (EI)
∃xp(x)  
<U>______</U>  
∴ p(c) for some c

### Existential generalization (EG)
p(c) for some element c  
<U>______</U>  
∴ ∃xp(x)

## Methods of Proofs

- `direct proof`  
  p -> q 형태로 치환 후, p가 참이라 가정  
  trivial proof: q가 true인걸 알 경우  
  vacuous proof: p가 false인걸 알 경우

- `proof by contraposition`  
  ¬q -> ¬p 형태로 치환 후, ¬q가 참이라 가정

- `proof by contradiction`  
  - one proposition: ¬p가 참이라 가정 후, contradiction(always false)를 찾음
  - p -> q: p ∧ ¬q가 참이라 가정 후, contradiction을 찾음

- `proof by cases`  
  도메인의 모든 경우를 나누어서 증명

- `proof of Existence`  
  ∃xP(x)를 증명

### proof
- theorem: 증명된 명제
- lemma: 보조정리
- corollary: 정리의 결과로 얻어지는 명제
- conjecture: 증명되지 않은 명제
