---
title: 'DB Implementation and administration'
# header-includes:
# - |
#   \usepackage{authblk}
#   \renewcommand\Authfont{\normalsize}
#   \renewcommand\Affilfont{\small}
categories: ["work"]
format: 
  pdf:
    documentclass: report
    papersize: a4
    number-sections: true
    number-depth: 3
    top-level-division: chapter
    fontsize: 17pt
    geometry:
      - top=20mm
include-in-header: 
  text: |
    \usepackage{fontspec}
    \setmainfont{Noto Sans KR}
    \usepackage{titlesec}
    \titleformat{\chapter}{\normalfont\huge\bfseries}{}{0pt}{\huge}
    \titleformat{\section}[block]{\normalfont\Large\bfseries}{}{0pt}{}
    \titleformat{\subsection}[block]{\normalfont\large\bfseries}{}{0pt}{}
    \titleformat{\subsubsection}[block]{\normalfont\normalsize\bfseries}{}{0pt}{}
    \titlespacing*{\chapter}{-3pt}{0pt}{10pt}
    \titlespacing*{\section}{0pt}{20pt}{10pt}
    \newcommand{\sectionbreak}{\clearpage}
    \usepackage{setspace}
    \setstretch{1.5}
    \usepackage{tabularx}
    \newcolumntype{Y}{>{\centering\arraybackslash}X}
    \usepackage[bottom]{footmisc}
    \usepackage{setspace}
    \renewcommand{\footnotesize}{\setstretch{1.2}\fontsize{9pt}{11pt}\selectfont}
    \setlength{\skip\footins}{10pt}
    \setlength{\footnotesep}{8pt}
    \renewcommand{\footnoterule}{\vspace{1em}\hrule width 0.5\linewidth\vspace{1em}}
    \makeatletter
    \renewcommand{\@makefntext}[1]{\noindent\makebox[1.5em][r]{\@makefnmark}\hspace{0.5em}#1}
    \makeatother

execute:
  echo: false
  warning: false
  message: false

---

## 개요

대략적인 구조는 아래와 같습니다.  

### 개발

![](img/2024-11-23-08-12-51.png)  

### 사용자 접속

![](img/2024-11-23-08-09-57.png)  

## AWS EC2 생성

AWS Console에서 다음의 과정들을 거쳐 필요한 자원을 생성합니다.  
먼저 Application Server이자 Mysql Client 역할을 해줄 컴퓨터(인스턴스)를 생성하겠습니다.  


![](img/2024-11-22-07-49-26.png)  

제일 먼저 지역이 서울로 잘 설정되어 있는지 확인해줍니다.


![](img/2024-11-21-21-13-47.png)  

EC2를 검색한 후 들어가 줍니다.


![](img/2024-11-21-21-14-42.png)  

왼쪽 탭에서 인스턴스를 선택합니다.


![](img/2024-11-21-21-15-31.png)  

인스턴스 시작을 눌러줍니다.


![](img/2024-11-21-21-16-47.png)  

사용할 운영체제만 설정 해준 후, 인스턴스 시작을 눌러줍니다.


![](img/2024-11-21-21-17-29.png)  

정상적으로 생성된 모습을 확인해볼 수 있습니다.


![](img/2024-11-22-07-43-19.png)  

인스턴스 옆 체크박스를 선택하면 아래에 추가적인 정보가 보입니다.  
여기서 보안을 눌러줍니다.


![](img/2024-11-22-07-44-09.png)  

그런 다음 보안 그룹(firewall)의 sg-...으로 보이는 파란 글씨를 클릭해줍니다.


![](img/2024-11-22-07-45-20.png)  

인바운드 규칙 편집을 눌러줍니다.


![](img/2024-11-22-07-45-45.png)  

다음과 같이 보안그룹을 설정해줍니다.  
22번 포트는 컴퓨터에 접속하기 위해, 8000번 포트는 사용자가 웹 서버에 접속하기 위해 열어줍니다.


![](img/2024-11-22-07-48-05.png)  

보안 그룹 ID만 다른 곳에 복사를 해둔 후, 마무리합니다.


## AWS RDS MySQL 생성

이제 MySQL Server를 생성합니다.


![](img/2024-11-21-20-51-03.png)  

RDS를 검색한 후 들어가 줍니다.


![](img/2024-11-21-20-51-54.png)  

왼쪽에 보이는 탭에서 데이터베이스를 선택합니다.


![](img/2024-11-21-20-52-44.png)  

데이터베이스 생성을 눌러줍니다.


![](img/2024-11-21-20-53-30.png)  

그러면 등장하는 설정 화면. 엔진은 MySQL을 선택해줍니다.


![](img/2024-11-21-20-53-47.png)  

프리티어(무과금)를 기준으로 선택하겠습니다.


![](img/2024-11-21-20-57-53.png)  

master 사용자(user)의 이름과 비밀번호를 설정해줍니다.


![](img/2024-11-22-07-57-21.png)  

아래로 내려가서 연결 부분에서 보안그룹을 새로 생성으로 설정해줍니다.  
이름은 아무거나, 가용 영역은 ap-northeast-2c로 설정하겠습니다.


![](img/2024-11-21-21-04-22.png)  


데이터 베이스 생성을 클릭합니다.


![](img/2024-11-21-21-03-31.png)  

정상적으로 생성된 모습을 확인해볼 수 있습니다.  
위의 보이는 화면에서 파란 글씨의 식별자를 선택합니다.


![](img/2024-11-22-08-00-45.png)  

엔드포인트만 복사를 해둡니다.  
그런 다음 보안 그룹을 선택합니다.


![](img/2024-11-22-08-01-16.png)  

보안 그룹 ID를 선택합니다.


![](img/2024-11-22-08-01-50.png)  

인바운드 규칙 편집을 눌러줍니다.


![](img/2024-11-22-08-02-50.png)  

아까 복사해둔 보안 그룹 ID를 찾아서 선택해준 후 규칙을 저장합니다.  
모든 자원할당 과정이 끝났습니다.  
이제 EC2에 접속해서, 데이터베이스 설정과 application 실행 과정을 진행하겠습니다


## 데이터베이스 설정 및 Application 실행


![](img/2024-11-22-08-05-05.png)  

위의 보이는 화면에서 인스턴스 ID를 선택합니다.


![](img/2024-11-21-21-19-25.png)  

그러면 보이는 화면. 퍼블릭 IPv4 DNS만 복사한 후, 연결을 눌러줍니다.


![](img/2024-11-21-21-19-59.png)  

이어지는 화면에서 다시 연결을 선택합니다.


![](img/2024-11-21-21-20-32.png)  

EC2 인스턴스에 접속했습니다.  
이제 필요한 프로그램들을 설치합니다.  
```bash
sudo apt update
sudo apt install -y mysql-client python-is-python3 python3-pip
pip install flask pymysql

git clone https://github.com/cryscham123/db_gimal_work.git work # source code
```

그런 다음, 다음 명령어를 실행해서 데이터베이스를 설정해줍니다.  
\<Copied RDS Endpoint\>는 복사해둔 RDS의 endpoint, 나머지 \<RDS User Name\>과 \<RDS Password\>는 RDS 생성시 설정한 것을 입력해줍니다.  
```bash
export RDS_ENDPOINT=<Copied RDS Endpoint>
export RDS_USERNAME=<RDS User Name>
export RDS_PASSWORD=<RDS Password>
mysql -h $RDS_ENDPOINT -u $RDS_USERNAME -p $RDS_PASSWORD < work/sql/create.sql
mysql -h $RDS_ENDPOINT -u $RDS_USERNAME -p $RDS_PASSWORD < work/sql/auth.sql
mysql -h $RDS_ENDPOINT -u $RDS_USERNAME -p $RDS_PASSWORD < work/sql/insert.sql
```

이제 다음 명령어를 실행해서 application을 실행합니다.  

```bash
python work/app/index.py
```

이제 브라우저에서 복사해둔 퍼블릭 IPv4 DNS의 8000번 포트로 접속하면, 아래와 같은 화면이 나옵니다.  


![](img/2024-11-22-08-14-00.png)  

네트워크 암호화 설정을 안해준 관계로 해당 경고창이 뜹니다.  
그냥 HTTP 사이트로 계속 진행하겠습니다.


![](img/2024-11-22-08-24-51.png)  

정상적으로 실행되는 모습.

## DB administration

### Backup

![](img/2024-11-22-08-44-15.png)

RDS 기본 설정으로 백업이 설정되어 있습니다.  
만약 백업 파일을 수동으로 생성하고 싶다면 EC2 인스턴스에서 다음 명령어를 실행합니다.
```bash
mysqldump -h $RDS_ENDPOINT -u $RDS_USERNAME -p$RDS_PASSWORD > backup.sql
```

만약 transaction log를 수동으로 생성하고 싶다면 다음의 단계를 따릅니다.

```bash
CALL mysql.rds_set_configuration('binlog retention hours', 24);
```

우선 mysql에 접속해서 log파일의 보관기간을 수동으로 늘려줍니다.  

```bash
SHOW BINARY LOGS;
```

그런 다음 log file의 파일명을 확인합니다.

```bash
mysqlbinlog \
    --read-from-remote-server \
    --host=<RDS ENDPOINT> \
    --port=3306  \
    --user admin \
    --password \
    --raw \
    --verbose \
    --result-file=<path to store> \
<name of log file>
```

위의 명령어를 통해 log file을 생성할 수 있습니다.

```bash
mysqlbinlog \
    --base64-output=DECODE-ROWS \
    --verbose \
    <stored path> > binlog.sql
```

사용하기 좋게 sql 형식으로 변환해줍니다.

### Recovery

AWS 콘솔에서 복구를 선택할 수 있지만, 수동으로 생성한 백업 파일을 이용해서 복구할 수 있습니다.  
다음의 명렁어를 새로운 환경에서 실행합니다.
```bash
cat << EOF | mysql
CREATE DATABASE SOONGSIL_STUDENT_CAFETERIA_SCM;
EOF
mysql SOONGSIL_STUDENT_CAFETERIA_SCM < backup.sql
mysql SOONGSIL_STUDENT_CAFETERIA_SCM < binlog.sql
```

log file은 AWS RDS 환경이 아니면 에러가 발생할 수 있습니다.  
하지만 AWS RDS 환경에서 log file을 직접적으로 사용할 권한이 없습니다.  
결론적으로, 우리의 구현에서 log file은 사용할 수 없습니다.

### Database Security

1. firewall  
  AWS 보안 그룹을 이용해서 RDS 인스턴스에 대한 접근을 제한했습니다.

2. Encryption store

![](img/2024-11-22-08-47-22.png)  

RDS 인스턴스 기본 설정으로 암호화 설정을 활성화했습니다.
