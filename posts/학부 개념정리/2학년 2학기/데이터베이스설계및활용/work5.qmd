---
title: 'Application 코드 설명'
# header-includes:
# - |
#   \usepackage{authblk}
#   \renewcommand\Authfont{\normalsize}
#   \renewcommand\Affilfont{\small}
categories: ["work"]
format: 
  pdf:
    documentclass: report
    papersize: a4
    number-sections: true
    number-depth: 3
    top-level-division: chapter
    fontsize: 17pt
    geometry:
      - top=20mm
include-in-header: 
  text: |
    \usepackage{fontspec}
    \setmainfont{Noto Sans KR}
    \usepackage{titlesec}
    \titleformat{\chapter}{\normalfont\huge\bfseries}{}{0pt}{\huge}
    \titleformat{\section}[block]{\normalfont\Large\bfseries}{}{0pt}{}
    \titleformat{\subsection}[block]{\normalfont\large\bfseries}{}{0pt}{}
    \titleformat{\subsubsection}[block]{\normalfont\normalsize\bfseries}{}{0pt}{}
    \titlespacing*{\chapter}{-3pt}{0pt}{10pt}
    \titlespacing*{\section}{0pt}{20pt}{10pt}
    \newcommand{\sectionbreak}{\clearpage}
    \usepackage{setspace}
    \setstretch{1.5}
    \usepackage{tabularx}
    \newcolumntype{Y}{>{\centering\arraybackslash}X}
    \usepackage[bottom]{footmisc}
    \usepackage{setspace}
    \renewcommand{\footnotesize}{\setstretch{1.2}\fontsize{9pt}{11pt}\selectfont}
    \setlength{\skip\footins}{10pt}
    \setlength{\footnotesep}{8pt}
    \renewcommand{\footnoterule}{\vspace{1em}\hrule width 0.5\linewidth\vspace{1em}}
    \makeatletter
    \renewcommand{\@makefntext}[1]{\noindent\makebox[1.5em][r]{\@makefnmark}\hspace{0.5em}#1}
    \makeatother

execute:
  echo: false
  warning: false
  message: false

---

## 주방 직원

먼저 직원 유저를 생성합니다.

```sql
CREATE USER 'kitchen_staff'@'%' IDENTIFIED BY 'secret123';
```

목표한 기능에 맞게 권한을 부여한 후, sql 쿼리를 통해 해당 기능을 구현합니다.

### 목표 기능

학생식당 메뉴별 재료 사용량 확인 및 재료 재고 확인

### 권한부여

```sql
GRANT SELECT ON MENU TO 'kitchen_staff'@'%';
GRANT SELECT ON RECIPE_INGREDIENT TO 'kitchen_staff'@'%';
GRANT SELECT ON RECIPE TO 'kitchen_staff'@'%';
GRANT SELECT ON INGREDIENT TO 'kitchen_staff'@'%';
GRANT SELECT ON STOCK TO 'kitchen_staff'@'%';
```

### 쿼리

```sql
SELECT m.*, r.Name, r.Corner
FROM MENU m
JOIN RECIPE r
ON m.RecipeID = r.RecipeID
WHERE Date = [date];
```

먼저 특정 날짜의 메뉴에 해당하는 레시피를 찾아내고

```sql
SELECT 
    ri.QuantityRequired,
    i.Name,
    i.Unit,
    (ri.QuantityRequired * i.Quantity) AS TotalQuantity,
    SUM(st.StockQuantity * i.Quantity) AS TotalStock
FROM RECIPE r
JOIN RECIPE_INGREDIENT ri ON r.RecipeID = ri.RecipeID
JOIN INGREDIENT i ON ri.IngredientID = i.IngredientID
LEFT JOIN STOCK st ON st.IngredientID = i.IngredientID AND st.ExpiryDate > NOW()
WHERE r.Name = [recipe_name]
GROUP BY i.IngredientID;
```

그 레시피에 해당하는 재료들의 필요한 재료의 수량(TotalQuantity)과 재고량(TotalStock)을 확인할 수 있게 쿼리를 짜줍니다.

### 결과 화면

![](img/2024-11-22-19-26-47.png)  

메뉴에서 특정 레시피를 클릭하면

![](img/2024-11-22-19-27-22.png)  

그 래시피에 해당하는 정보를 확인할 수 있습니다.

## 구매 담당자

구매 담당자 유저를 생성합니다.

```sql
CREATE USER 'purchasing_manager'@'%' IDENTIFIED BY 'secret123';
```

### 목표 기능

재료 주문 생성, 공급업체 정보 확인

### 권한부여

```sql
GRANT SELECT, INSERT ON ORDERING TO 'purchasing_manager'@'%';
GRANT SELECT, INSERT ON ORDERING_ITEM TO 'purchasing_manager'@'%';
GRANT SELECT ON INGREDIENT TO 'purchasing_manager'@'%';
GRANT SELECT ON STOCK TO 'purchasing_manager'@'%';
GRANT SELECT ON SUPPLIER TO 'purchasing_manager'@'%';
GRANT SELECT ON SUPPLIER_CONTRACT TO 'purchasing_manager'@'%';
```

### 쿼리

```sql
SELECT 
    i.*,
    (
      SELECT NAME
      FROM SUPPLIER s
      WHERE s.SupplierID = i.SupplierID
    ) AS SupplierName,
    SUM(st.StockQuantity * i.Quantity) AS TotalStock,
    CASE
        WHEN EXISTS (
          SELECT SupplierID
          FROM SUPPLIER_CONTRACT sc
          WHERE i.SupplierID = sc.SupplierID
          AND NOW() BETWEEN sc.StartDate AND sc.EndDate
        )
        THEN 'Available'
        ELSE 'Not Available'
    END AS PurchaseStatus
FROM INGREDIENT i
LEFT JOIN STOCK st
ON i.IngredientID = st.IngredientID
AND st.ExpiryDate > NOW()
GROUP BY i.IngredientID
ORDER BY PurchaseStatus;

-- detail stock info per ingredient
SELECT *,
CASE
    WHEN ExpiryDate > NOW()
    THEN 'Available'
    ELSE 'Expired'
END AS StockStatus
FROM STOCK
WHERE IngredientID = [IngredientID]
ORDER BY ExpiryDate;
```

재료들의 공급업체 정보와 재고량, 구매 가능 여부를 확인할 수 있는 쿼리를 짜줍니다.

```sql
INSERT INTO ORDERING (OrderedAt)
VALUES (NOW());

INSERT INTO ORDERING_ITEM 
(OrderingID, IngredientID, Quantity, Status)
VALUES ([OrderingID], [IngredientID], [Quantity], 'Preparing');
```

원하는 재료의 원하는 수량을 주문할 수 있는 쿼리입니다.

### 결과 화면

![](img/2024-11-23-07-25-02.png)  

맨 왼쪽의 빈 칸에 주문 수량을 입력한 후 구매하기 버튼을 누르면 주문이 생성됩니다.  


![](img/2024-11-22-19-30-57.png)  

구매하기 버튼은 맨 아래에 있습니다.  
계약이 종료된 공급업체의 경우 수량을 입력할 수 있는 칸이 비활성화되어 있습니다.  


![](img/2024-11-23-07-25-38.png)  

주문 목록 탭에 들어오면 생성한 주문 내역을 확인할 수 있습니다.  

![](img/2024-11-23-07-26-10.png)  

다시 재료 정보 탭으로 돌아와서 재료 별 공급업체가 적혀있는 칸을 클릭합니다  


![](img/2024-11-22-19-37-40.png)  

그럼 해당 재료를 공급하는 공급업체의 정보를 확인할 수 있습니다.

## 공급업체 

공급업체 유저를 생성합니다.

```sql
CREATE USER 'supplier'@'%' IDENTIFIED BY 'secret123';
```

### 목표 기능

식자재 제공 현황 확인, 주문 상태 업데이트, 계약 내역 확인

### 권한부여

```sql
GRANT SELECT ON ORDERING TO 'supplier'@'%';
GRANT SELECT, UPDATE ON ORDERING_ITEM TO 'supplier'@'%';
GRANT SELECT ON INGREDIENT TO 'supplier'@'%';
GRANT SELECT ON SUPPLIER_CONTRACT TO 'supplier'@'%';
GRANT SELECT ON SUPPLIER TO 'supplier'@'%';
```

### 쿼리

```sql
SELECT * FROM ORDERING ORDER BY OrderedAt DESC;

SELECT oi.*, i.Name,
(oi.Quantity * i.Cost) AS TotalCost
FROM ORDERING_ITEM oi
JOIN INGREDIENT i
ON oi.IngredientID = i.IngredientID;
```

먼저 식자제 제공 현황을 확인할 수 있는 쿼리를 짜줍니다.

```sql
UPDATE ORDERING_ITEM
SET Status = [status]
WHERE OrderingID = [OrderingID]
AND IngredientID = [IngredientID];
```

해당 쿼리문으로 공급업체는 주문 상태를 업데이트할 수 있습니다.

```sql
SELECT s.*, 
CASE 
    WHEN EXISTS (
      SELECT SupplierID 
      FROM SUPPLIER_CONTRACT sc
      WHERE sc.SupplierID = s.SupplierID 
      AND NOW() BETWEEN sc.StartDate AND sc.EndDate
    ) 
    THEN 'Active' 
    ELSE 'Expired' 
END AS ContractStatus 
FROM SUPPLIER s 
ORDER BY ContractStatus;

SELECT *
FROM SUPPLIER_CONTRACT
WHERE SupplierID = [SupplierID];
```

공급업체의 계약 내역을 확인할 수 있는 쿼리도 짜줍니다.

### 결과 화면

![](img/2024-11-23-07-25-38.png)  

식자제 제공 현황은 앞에서 살펴 본 것과 같이 주문 탭에서 확인할 수 있습니다.  

![](img/2024-11-23-07-27-51.png)  

'상태'에 있는 드롭다운 메뉴를 통해 주문 상태를 업데이트할 수 있습니다.  

![](img/2024-11-23-07-28-22.png)  

치즈의 주문 상태를 'Delivered'로, 참기름의 주문 상태를 'Cancelled'로 변경했습니다.

## 영양사

영양사 유저를 생성합니다.

```sql
CREATE USER 'nutritionist'@'%' IDENTIFIED BY 'secret123';
```

### 목표 기능

학생식당 메뉴 등록 및 수정, 재료별 영양 정보 확인

### 권한부여

```sql
GRANT SELECT ON RECIPE TO 'nutritionist'@'%';
GRANT SELECT ON RECIPE_INGREDIENT TO 'nutritionist'@'%';
GRANT SELECT ON NUTRITION TO 'nutritionist'@'%';
GRANT SELECT ON INGREDIENT TO 'nutritionist'@'%';
GRANT SELECT, INSERT, UPDATE, DELETE ON MENU TO 'nutritionist'@'%';
```

### 쿼리

```sql
UPDATE MENU 
SET Price = [price], Term = [term], RecipeID = [recipe_id]
WHERE MenuID = [menu_id];


SELECT Name FROM RECIPE;

SELECT * FROM RECIPE
WHERE Name = [Name];

INSERT INTO MENU (Price, Term, RecipeID, Date)
VALUES ([price], [term], [recipe_id], [date]);


DELETE FROM MENU
WHERE MenuID = [menu_id];
```

메뉴 등록, 수정, 삭제를 할 수 있는 쿼리를 짜줍니다.

```sql
-- per recipe
SELECT Name FROM RECIPE;

SELECT 
    SUM(n.Calories * ri.QuantityRequired / 300) AS Calories,
    SUM(n.Carbohydrates * ri.QuantityRequired / 300) AS Carbohydrates,
    SUM(n.Protein * ri.QuantityRequired / 300) AS Protein,
    SUM(n.Fat * ri.QuantityRequired / 300) AS Fat,
    SUM(n.Sodium * ri.QuantityRequired / 300) AS Sodium,
    SUM(n.Sugar * ri.QuantityRequired / 300) AS Sugar
FROM RECIPE r
JOIN RECIPE_INGREDIENT ri ON r.RecipeID = ri.RecipeID
JOIN INGREDIENT i ON ri.IngredientID = i.IngredientID
JOIN NUTRITION n ON i.NutritionID = n.NutritionID
WHERE r.Name = [name];

-- per ingredient

SELECT NutritionID
FROM INGREDIENT;

SELECT *
FROM NUTRITION
WHERE NutritionID = [NutritionID];
```

레시피 별, 재료 별 영양정보도 확인이 가능합니다.

### 결과 화면

![](img/2024-11-22-19-41-43.png)  

메뉴 등록은 레시피 탭에서 할 수 있도록 구성했습니다.


![](img/2024-11-23-07-30-07.png)  

11월 23일 저녁에 8000원짜리로 메뉴를 등록하겠습니다.


![](img/2024-11-23-07-30-44.png)  

정상적으로 메뉴가 등록된 것을 확인할 수 있습니다.  


![](img/2024-11-23-07-31-37.png)  

방금 등록한 메뉴의 정보를 수정하겠습니다.


![](img/2024-11-23-07-32-58.png)  

정상적으로 메뉴가 수정되었습니다.  
이제 삭제 버튼을 눌러 메뉴를 삭제해보겠습니다.


![](img/2024-11-23-07-33-33.png)  

삭제까지 정상적으로 이루어졌습니다.


![](img/2024-11-22-19-42-50.png)  

재료별 영양 정보는 재료 탭에서 재료의 이름을 선택하면 확인할 수 있습니다.

## 권한 적용

마지막으로 FLUSH를 해서 모든 권한을 적용합니다.

```sql
FLUSH PRIVILEGES;
```
