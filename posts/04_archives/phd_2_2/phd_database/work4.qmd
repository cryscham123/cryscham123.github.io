---
title: 숭실대학교 학생식당 식자제 SCM 설계
subtitle: |
  ![](img/2024-11-26-04-56-30.png) \par
  산업정보시스템공학과 20192208 김형훈 \par
  산업정보시스템공학과 20211275 김진호 \par
  산업정보시스템공학과 20231342 박소윤 \par
  산업정보시스템공학과 20231351 안가은 \par
  \vfill
  \hfill 과목명: 데이터베이스 설계 및 활용 \par
  \hfill 분반: (가)반 \par
  \hfill 프로젝트 그룹: 4조

categories: ["보고서", 'database']
directories: ["phd_2_2"]
date: 2024-11-26
date-format: " "
format: 
  pdf:
    documentclass: report
    toc: true
    papersize: a4
    number-sections: true
    number-depth: 3
    top-level-division: chapter
    fontsize: 17pt
    geometry:
      - top=20mm
include-in-header: 
  text: |
    \usepackage{colortbl}
    \definecolor{lightgray}{RGB}{245,245,245}
    \rowcolors{2}{white}{lightgray}
    \usepackage{fontspec}
    \usepackage[table]{xcolor}
    \setmainfont{Noto Sans KR}
    \usepackage{titlesec}
    \titleformat{\chapter}{\normalfont\huge\bfseries}{}{0pt}{\huge}
    \titleformat{\subsection}[block]{\normalfont\large\bfseries}{}{0pt}{}
    \titleformat{\subsubsection}[block]{\normalfont\normalsize\bfseries}{}{0pt}{}
    \titlespacing*{\chapter}{-3pt}{-20pt}{5pt}
    \titlespacing*{\section}{0pt}{10pt}{10pt}
    \newcommand{\chapterbreak}{\clearpage}
    \usepackage{setspace}
    \setstretch{1.5}
    \usepackage{tabularx}
    \newcolumntype{Y}{>{\centering\arraybackslash}X}
    \usepackage[bottom]{footmisc}
    \usepackage{setspace}
    \renewcommand{\footnotesize}{\setstretch{1.2}\fontsize{9pt}{11pt}\selectfont}
    \setlength{\skip\footins}{10pt}
    \setlength{\footnotesep}{8pt}
    \renewcommand{\footnoterule}{\vspace{1em}\hrule width 0.5\linewidth\vspace{1em}}
    \makeatletter
    \renewcommand{\@makefntext}[1]{\noindent\makebox[1.5em][r]{\@makefnmark}\hspace{0.5em}#1}
    \makeatother

execute:
  echo: false
  warning: false
  message: false

---


# 주제 선정

## 주제

숭실대학교 학생식당 식자재 관리를 효율적으로 하기 위한 SCM 구축

## 주제 선정 배경

매일 수천 명의 학생들에게 식사를 제공하고 있는 숭실대학교 학생식당은 효율적인 식자재 관리가 필수적이다. 재고 관리와 발주 과정을 시스템화하여 식자재 낭비를 줄이고, 신선도 관리를 강화하며, 이해관계자 간의 원활한 소통을 실현하고자 한다.[^1] 또한 실제 운영되는 시스템을 가상으로 구현해봄으로써 데이터베이스 설계부터 구현까지의 전반적인 개발 과정을 학습하고, SCM(Supply Chain Management)의 실무적 이해를 높이고자 한다.

[^1]: Oracle의 [Symphony POS](https://www.oracle.com/kr/food-beverage/restaurant-pos-systems/restaurant-inventory-management-software/?er=228062#cost-reports)와 같은 전문 시스템은 재고 및 메뉴 관리, 레스토랑 데이터 분석 등의 기능을 제공하여 대형 프랜차이즈의 운영 효율성을 크게 향상시켰다.

## 과제 목표 및 범위

### 과제 목표

1. 식자재의 효율적인 공급 및 재고 관리를 위한 통합 시스템 구축
2. 주방 및 부서 간의 원활한 의사소통 및 작업 흐름 관리
3. 공급망 최적화를 통한 운영 효율성 향상

### 과제 범위

예상 사용자별로 다음 기능들을 구현한다.

1. **주방 직원**  
학생식당 메뉴별로 재료 사용량 및 재료 재고 확인

2. **구매 담당자**  
재료 주문 생성 및 공급업체 관리

3. **공급업체**  
식자재 제공 현황 및 거래 기록 확인  
주문 상태 업데이트

4. **영양사**  
학생식당 메뉴 등록/수정 및 재료별 영양 정보 확인

# ER Modeling

## E-R Diagram

\begin{figure}[H]

\fbox{\includegraphics[height=20cm]{img/2024-11-27-18-22-33.png}}  
\caption{ER 다이아그램 전체 모습}
\label{fig:improved_ui}
\end{figure}

\clearpage

## Entity 및 Attribute

**ORDERING**


- 재료 주문의 기본 정보(주문 시간) 저장

**ORDERING_ITEM**


- 주문된 재료의 상세 정보(수량, 상태) 저장
- 상세 정보는 공급 업체가 수정 가능
- 상태값: Preparing, Shipping, Delivered, Cancelled, Returning, Returned

**MENU**


- 학생식당 메뉴 정보(가격, 제공 시간대, 날짜) 저장
- 시간대: Breakfast, Lunch, Dinner

**RECIPE**


- 요리 레시피 정보(이름, 조리법, 코너) 저장
- 코너: HotPot, RiceBowl, Western

**RECIPE_INGREDIENT**


- 레시피별 필요한 재료와 수량 정보 저장

**INGREDIENT**


- 공급업체로부터 구매 가능한 재료 정보(이름, 단가, 단위) 저장

**STOCK**


- 재료별 재고 정보(수량, 유통기한) 저장

**NUTRITION**


- 재료의 영양 정보(칼로리, 단백질 등) 저장

**SUPPLIER**


- 공급업체 정보(이름, 연락처, 주소) 저장

**SUPPLIER_CONTRACT**


- 공급업체와의 계약 정보(시작일, 종료일) 저장

\clearpage


## Entity Relationship

**ORDERING - ORDERING_ITEM - INGREDIENT**

- ORDERING_ITEM은 weak entity
- ORDERING, INGREDIENT는 각각 고유한 PK를 가지므로 strong entity
- ORDERING → ORDERING_ITEM: 1:N (Mandatory One, Mandatory Many)  
  한 번의 주문에는 반드시 하나의 ORDERING_ITEM이 존재한다.
- ORDERING_ITEM ← INGREDIENT: N:1 (Optional Many, Mandatory One)  
  하나의 ORDERING_ITEM는 반드시 하나의 INGREDIENT에 의존하며, INGREDIENT를 여러번 주문할 수도, 안 할수도 있다.

**MENU - RECIPE**

- 둘 다 strong entity (non-identifying relationship)
- 1:N 관계 (Optional Many, Mandatory One)
  하나의 MENU는 반드시 하나의 RECIPE에 의존하며, 하나의 RECIPE는 여러 MENU에 연결될 수도, 안될 수도 있다.

**RECIPE - RECIPE_INGREDIENT - INGREDIENT**

- RECIPE_INGREDIENT는 weak entity
- RECIPE, INGREDIENT는 각각 고유한 PK를 가지므로 strong entity
- RECIPE → RECIPE_INGREDIENT: 1:N (Mandatory One, Mandatory Many)  
  하나의 RECIPE_INGREDIENT는 반드시 하나의 RECIPE에 의존하며, 하나의 RECIPE는 하나 이상의 RECIPE_INGREDIENT가 존재한다.
- RECIPE_INGREDIENT ← INGREDIENT: N:1 (Optional Many, Mandatory One)  
  하나의 RECIPE_INGREDIENT는 반드시 하나의 INGREDIENT에 의존하며, 하나의 INGREDIENT는 여러 RECIPE_INGREDIENT에 연결될 수도, 안될 수도 있다.

**INGREDIENT - STOCK**

- 둘 다 strong entity (non-identifying relationship)
- 1:N 관계 (Mandatory One, Optional Many)  
  STOCK은 반드시 하나의 INGREDIENT에 의존하며, 재고에 하나의 INGREDIENT가 여러 번 존재할수도, 안 존재할 수도 있다. (같은 ingredient 여도 유통기한때문에 주문 날짜가 다르면 다르게 본다.)

**INGREDIENT - NUTRITION**

- 1:1 관계 (Mandatory One, Mandatory One)  
  INGREDIENT는 반드시 하나의 NUTRITION에 의존하며, 하나의 NUTRITION도 반드시 하나의 INGREDIENT에 의존한다.
- 둘 다 strong entity (non-identifying relationship)

**SUPPLIER - INGREDIENT**

- 1:N 관계 (Mandatory One, Mandatory Many)  
  하나의 INGREDIENT는 하나의 SUPPLIER에 의존하고, 하나의 SUPPLIER는 하나 이상의 INGREDIENT와 연결될 수 있다.
- 둘 다 strong entity (non-identifying relationship)

**SUPPLIER - SUPPLIER_CONTRACT**

- 1:N 관계 (Mandatory One, Mandatory Many)  
  하나의 SUPPLIER는 하나 이상의 SUPPLIER_CONTRACT와 연결될 수 있고, SUPPLIER_CONTRACT는 반드시 하나의 SUPPLIER와 연결된다.
- 둘 다 strong entity (non-identifying relationship)

## 그외 요구사항

1.	MENU entity의 Term attribute에는 (‘Breakfast’, ‘Lunch’, ‘Dinner’) 중 하나의 값만 들어온다.
2.	RECIPE entity의 Corner attribute에는 (‘HotPot’, ‘RiceBowl’, ‘Western’) 중 하나의 값만 들어온다.
3.	ORDERING_ITEM entity의 Status attribute에는 (‘Preparing’, ‘Shipping’, ‘Delivered’, ‘Cancelled’, ‘Returning’, ‘Returned’) 중 하나의 값만 들어온다.

# Database Design

MySQL을 사용할 것을 고려하여 데이터베이스를 설계하였습니다.
1:N의 경우 외래키를 N쪽에, 1:1의 경우 외래키를 둘 중 하나에 추가했습니다.

## Database Design

\begin{figure}[H]

\fbox{\includegraphics[height=20cm]{img/2024-11-27-18-19-45.png}}  
\caption{Foreign key를 추가한 모습}
\label{fig:improved_ui}
\end{figure}

\clearpage

## Database Design Schema

\renewcommand{\arraystretch}{1.5}
\begin{table}[h]
\fontspec{Open Sans}
\small
\begin{tabularx}{\textwidth}{|l|X|}
\hline
\rowcolor{white} \normalsize\textbf{Entity} & \normalsize\textbf{Attributes} \\
\hline
MENU & \textbf{\underline{MenuID}}, Price, Term, \textit{RecipeID}, Date \\
\hline
RECIPE & \textbf{\underline{RecipeID}}, Name, Corner, Instructions \\
\hline
RECIPE\_INGREDIENT & \textbf{\underline{\textit{RecipeID}}}, \textbf{\underline{\textit{IngredientID}}}, QuantityRequired \\
\hline
INGREDIENT & \textbf{\underline{IngredientID}}, Name, Quantity, Cost, \textit{SupplierID}, \textit{NutritionID}, Unit \\
\hline
STOCK & \textbf{\underline{StockID}}, StockQuantity, ExpiryDate, \textit{IngredientID} \\
\hline
SUPPLIER & \textbf{\underline{SupplierID}}, Name, Phone, Address \\
\hline
SUPPLIER\_CONTRACT & \textbf{\underline{ContractID}}, StartDate, EndDate, \textit{SupplierID} \\
\hline
NUTRITION & \textbf{\underline{NutritionID}}, Calories, Protein, Carbohydrates, Fat, Sugar, Sodium \\
\hline
ORDERING\_ITEM & \textbf{\underline{\textit{OrderingID}}}, \textbf{\underline{\textit{IngredientID}}}, Quantity, Status \\
\hline
ORDERING & \textbf{\underline{OrderingID}}, OrderedAt \\
\hline
\end{tabularx}
\end{table}

Primary key: 굵은글씨, 밑줄  
Foreign key: 기울임

## Column Property Specifications

\renewcommand{\arraystretch}{1.5}

\begin{table}[h]
\caption{MENU 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
MenuID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
Price & decimal(10,2) & & YES & & \\
\hline
Term & char(10) & & YES & & 'Breakfast',\newline'Lunch',\newline'Dinner' \\
\hline
RecipeID & int & FK & YES & & \\
\hline
Date & date & & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{RECIPE 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
RecipeID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
Name & varchar(255) & & YES & & \\
\hline
Corner & char(50) & & YES & & 'HotPot',\newline'RiceBowl',\newline'Western' \\
\hline
Instructions & varchar(4095) & & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{RECIPE\_INGREDIENT 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
RecipeID & int & PK, FK & YES & & \\
\hline
IngredientID & int & PK, FK & YES & & \\
\hline
QuantityRequired & decimal(15,10) & & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{INGREDIENT 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
IngredientID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
Name & varchar(255) & & YES & & \\
\hline
Quantity & decimal(10,2) & & YES & & \\
\hline
Cost & decimal(10,2) & & YES & & \\
\hline
SupplierID & int & FK & YES & & \\
\hline
NutritionID & int & FK, UNIQUE & YES & & \\
\hline
Unit & char(5) & & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{STOCK 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
StockID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
StockQuantity & decimal(10,2) & & YES & & \\
\hline
ExpiryDate & datetime & & NO & & \\
\hline
IngredientID & int & FK & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{SUPPLIER 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
SupplierID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
Name & varchar(255) & & YES & & \\
\hline
Phone & char(15) & & YES & & \\
\hline
Address & varchar(255) & & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{SUPPLIER\_CONTRACT 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
ContractID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
StartDate & date & & YES & & \\
\hline
EndDate & date & & YES & & \\
\hline
SupplierID & int & FK & YES & & \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{NUTRITION 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
NutritionID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
Calories & decimal(10,2) & & NO & & kcal \\
\hline
Protein & decimal(10,2) & & NO & & g \\
\hline
Carbohydrates & decimal(10,2) & & NO & & g \\
\hline
Fat & decimal(10,2) & & NO & & g \\
\hline
Sugar & decimal(10,2) & & NO & & g \\
\hline
Sodium & decimal(10,2) & & NO & & mg \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{ORDERING\_ITEM 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
OrderingID & int & PK, FK & YES & & \\
\hline
IngredientID & int & PK, FK & YES & & \\
\hline
Quantity & int & & YES & & \\
\hline
Status & char(20) & & YES & & 'Preparing',\newline'Shipping',\newline'Delivered',\newline'Cancelled',\newline'Returning',\newline'Returned' \\
\hline
\end{tabularx}
\end{table}

\begin{table}[h]
\caption{ORDERING 테이블}
\small
\begin{tabularx}{\textwidth}{|l|l|l|l|l|X|}
\hline
\rowcolor{white} \textbf{ColumnName} & \textbf{DataType} & \textbf{Key} & \textbf{Required} & \textbf{DefaultValue} & \textbf{Remarks} \\
\hline
OrderingID & int & PK & YES & AUTO\_INCREMENT & \\
\hline
OrderedAt & datetime & & NO & & \\
\hline
\end{tabularx}
\end{table}

\clearpage

## SQL DDL

\begin{figure}[H]
\includegraphics{img/2024-11-26-21-28-58.png}
\includegraphics{img/2024-11-26-21-29-20.png}
\caption{SQL DDL}
\label{fig:improved_ui}
\end{figure}

Foreign key를 맨 뒤에 추가한 이유는, 테이블을 생성하는 동시에 외래키를 추가할 때, 참조하는 테이블이 존재하지 않을 수 있기 때문입니다.

# Implementation

## 구조

\begin{figure}[H]
\includegraphics{img/2024-11-23-08-12-51.png}  
\caption{개발 구조}
\label{fig:improved_ui}
\end{figure}

\begin{figure}[H]
\includegraphics{img/2024-11-23-08-09-57.png}  
\caption{사용자 접근 구조}
\label{fig:improved_ui}
\end{figure}

## 웹 서버 생성

AWS Console에서 다음의 과정들을 거쳐 필요한 자원을 생성합니다.  
먼저 Application Server이자 Mysql Client 역할을 해줄 컴퓨터(인스턴스)를 생성하겠습니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-07-49-26.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-21-13-47.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-21-14-42.png}}
\caption{AWS console EC2 접속}
\label{fig:improved_ui}
\end{center}
\end{figure}

제일 먼저 지역이 서울로 잘 설정되어 있는지 확인해줍니다.  
그런 다음, EC2를 검색한 후 들어간 다음 왼쪽 탭에서 인스턴스를 선택합니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-21-21-15-31.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-21-16-47.png}}
\caption{EC2 생성}
\label{fig:improved_ui}
\end{center}
\end{figure}

인스턴스 시작을 눌러 사용할 운영체제만 설정 해줍니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-21-21-17-29.png}}
\caption{EC2 생성 완료}
\label{fig:improved_ui}
\end{center}
\end{figure}

인스턴스가 정상적으로 생성된 모습을 확인해볼 수 있습니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-07-43-19.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-22-07-44-09.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-22-07-45-20.png}}
\caption{EC2 보안 그룹 설정}
\label{fig:improved_ui}
\end{center}
\end{figure}

생성된 인스턴스 옆 체크박스를 선택하면 아래에 추가적인 정보가 보이는데, 여기서 보안을 눌러줍니다.  
그런 다음 보안 그룹(firewall)의 'sg-...'으로 보이는 파란 글씨를 누른 다음 인바운드 규칙 편집을 눌러줍니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-07-45-45.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-22-07-48-05.png}}

\caption{EC2 보안 그룹 설정}
\label{fig:improved_ui}
\end{center}
\end{figure}

다음과 같이 보안그룹을 설정해줍니다.  
22번 포트는 컴퓨터에 접속하기 위해, 8000번 포트는 사용자가 웹 서버에 접속하기 위해 열어줍니다.  
설정을 마친 후, 보안 그룹 ID만 다른 곳에 복사를 해둡니다.

## 데이터베이스 서버 생성

이제 MySQL Server를 생성합니다.


\begin{figure}[H]
\begin{center}

\fbox{\includegraphics{img/2024-11-21-20-51-54.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-20-52-44.png}}
\caption{AWS RDS 생성}
\label{fig:improved_ui}
\end{center}
\end{figure}

RDS를 검색한 후 들어간 다음 왼쪽에 보이는 탭에서 데이터베이스를 선택합니다.  
이후 데이터베이스 생성을 눌러줍니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-21-20-53-30.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-20-53-47.png}}
\caption{RDS Configuration}
\label{fig:improved_ui}
\end{center}
\end{figure}

MySQL 엔진 프리티어(무과금)를 기준으로 선택하겠습니다.

\begin{figure}[H]
\begin{center}

\fbox{\includegraphics{img/2024-11-21-20-57-53.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-22-07-57-21.png}}
\caption{RDS 보안그룹}
\label{fig:improved_ui}
\end{center}
\end{figure}

외부에서 접속할 master 사용자(user)의 이름과 비밀번호도 설정해줍니다. 그런 다음 보안그룹도 새로 생성해줍니다. 
이름은 아무거나, 가용 영역은 ap-northeast-2c로 설정하겠습니다.

\begin{figure}[H]
\begin{center}

\fbox{\includegraphics{img/2024-11-21-21-04-22.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-21-03-31.png}}
\caption{RDS 생성 완료}
\label{fig:improved_ui}
\end{center}
\end{figure}

설정이 모두 마무리되면 데이터 베이스 생성을 클릭합니다. 그러면 정상적으로 생성된 모습을 확인해볼 수 있습니다.  
이제 위의 보이는 화면에서 파란 글씨의 식별자를 선택합니다.

\begin{figure}[H]
\begin{center}

\fbox{\includegraphics{img/2024-11-22-08-00-45.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-22-08-01-16.png}}

\caption{RDS 보안그룹}
\label{fig:improved_ui}
\end{center}
\end{figure}

RDS 엔드포인트만 복사를 해둔 다음 보안 그룹을 선택합니다. 그런 다음 보안 그룹 ID를 선택해줍니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-08-01-50.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-22-08-02-50.png}}
\caption{RDS 보안그룹}
\label{fig:improved_ui}
\end{center}
\end{figure}

아까 복사해둔 보안 그룹 ID를 찾아서 선택해준 후 규칙을 저장합니다.  

모든 자원할당 과정이 끝났습니다.  
이제 EC2에 접속해서, 데이터베이스 설정과 application 실행 과정을 진행하겠습니다


## 데이터베이스 설정 및 Application 실행

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-08-05-05.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-21-19-25.png}}
\caption{EC2 접속}
\label{fig:improved_ui}
\end{center}
\end{figure}

위의 보이는 화면에서 인스턴스 ID를 선택합니다.
그러면 보이는 화면에서 퍼블릭 IPv4 DNS만 복사한 후, 연결을 눌러줍니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-21-21-19-59.png}}

\vspace{0.5cm}

\fbox{\includegraphics{img/2024-11-21-21-20-32.png}}
\caption{EC2 접속}
\label{fig:improved_ui}
\end{center}
\end{figure}

이어지는 화면에서 다시 연결을 선택하면 EC2 인스턴스에 접속할 수 있습니다.
이제 필요한 프로그램들을 설치합니다.

```bash
sudo apt update
sudo apt install -y mysql-client python-is-python3 python3-pip
pip install flask pymysql

git clone https://github.com/cryscham123/db_gimal_work.git work # source code

export RDS_ENDPOINT=<Copied RDS Endpoint>
export RDS_USERNAME=<RDS User Name>
export RDS_PASSWORD=<RDS Password>
# create database
mysql -h $RDS_ENDPOINT -u $RDS_USERNAME -p $RDS_PASSWORD < work/sql/create.sql
# create user
mysql -h $RDS_ENDPOINT -u $RDS_USERNAME -p $RDS_PASSWORD < work/sql/auth.sql
# insert data
mysql -h $RDS_ENDPOINT -u $RDS_USERNAME -p $RDS_PASSWORD < work/sql/insert.sql

python work/app/index.py # run application
```

다음 명령어를 실행해서 데이터베이스를 설정해준 후 어플을 실행합니다.  
\<Copied RDS Endpoint\>는 복사해둔 RDS의 endpoint, 나머지 \<RDS User Name\>과 \<RDS Password\>는 RDS 생성시 설정한 것을 입력해줍니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-12-01-11-15-17.png}}
\caption{대략 이 정도의 데이터가 들어갑니다.}
\label{fig:improved_ui}
\end{center}
\end{figure}

이제 브라우저에서 복사해둔 퍼블릭 IPv4 DNS의 8000번 포트로 접속하면, 아래와 같은 화면이 나옵니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-08-14-00.png}}
\caption{HTTP 경고}
\label{fig:improved_ui}
\end{center}
\end{figure}

네트워크 암호화 설정을 안해준 관계로 해당 경고창이 뜹니다.  
그냥 HTTP 사이트로 계속 진행하겠습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-08-24-51.png}}
\caption{브라우저 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

정상적으로 실행되는 모습. 이 [페이지](http://ec2-3-35-235-211.ap-northeast-2.compute.amazonaws.com:8000/)에서 확인 가능합니다.

## Application Code

Python의 flask 라이브러리를 사용하여 웹 서버를 구축했습니다.  
구체적인 코드 구조는 [Remote 저장소](https://github.com/cryscham123/db_gimal_work.git)에서 확인 가능합니다.

### Menu 페이지

이 페이지에서는 날짜별 학생식당 메뉴를 확인하고 수정할 수 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-19-30-58.png}}
\caption{메뉴 화면(확대 시 선명하게 볼 수 있습니다)}
\label{fig:improved_ui}
\end{center}
\end{figure}

메뉴 이름의 하이퍼링크를 클릭하면 해당 메뉴의 레시피 정보를 확인할 수 있습니다.  
수정과 삭제버튼은 각각 record를 수정하고 삭제할 수 있는 기능을 제공합니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-19-41-27.png}}
\caption{Update 로직}
\label{fig:improved_ui}
\end{center}
\end{figure}

수정 버튼을 누르면 해당 레코드의 정보를 수정할 수 있는 form이 나타납니다. 원하는 값을 넣은 후, 저장을 누르면 수정이 완료됩니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-19-43-23.png}}
\caption{수정이 완료된 모습. 저장을 눌러야 적용됩니다.}
\label{fig:improved_ui}
\end{center}
\end{figure}

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-19-46-45.png}}
\caption{Delete 로직}
\label{fig:improved_ui}
\end{center}
\end{figure}

삭제 버튼을 누르면 해당 레코드가 삭제됩니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics[height=5cm]{img/2024-11-26-19-47-41.png}}
\caption{삭제가 완료된 모습}
\label{fig:improved_ui}
\end{center}
\end{figure}

### Recipe 페이지

이 페이지에서는 레시피 정보를 확인하고, 해당 레시피를 원하는 날짜의 메뉴에 추가할 수 있습니다.  
확인 가능한 레시피 정보는 레시피 이름, instructions, 재료 사용량, 사용 재료 재고, 영양 정보 입니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-08-25.png}}
\caption{레시피 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

새우까스 메뉴를 등록해보겠습니다. 필드를 채운 후 메뉴 등록 버튼을 눌러줍니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-09-22.png}}
\caption{메뉴 등록 폼}
\label{fig:improved_ui}
\end{center}
\end{figure}

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-10-30.png}}
\caption{메뉴 등록 완료}
\label{fig:improved_ui}
\end{center}
\end{figure}

\newpage

### Ingredient 페이지

이 페이지에서는 재료 정보를 확인하고 재료 구매 주문을 만들 수 있습니다.  

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-17-56.png}}
\caption{재료 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

재료 이름을 클릭할 경우 재료의 영양 정보, 재고량을 확인할 수 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-21-40.png}}
\caption{재료 세부 정보}
\label{fig:improved_ui}
\end{center}
\end{figure}

재료 주문을 만들어 보겠습니다. 재료의 좌측에 보이는 입력란에 원하는 수량을 입력한 후 주문 버튼을 누릅니다.
주문 버튼은 맨 아래에 있습니다. 계약이 만료된 공급업체의 재료는 입력란이 비활성화 되어 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-22-24.png}}

\vspace{0.5cm}

\fbox{\includegraphics[height=10cm]{img/2024-11-26-20-30-44.png}}
\caption{재료 주문}
\label{fig:improved_ui}
\end{center}
\end{figure}

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-24-29.png}}
\caption{주문 완료}
\label{fig:improved_ui}
\end{center}
\end{figure}

### Ordering 페이지

이 페이지에서는 주문 정보를 확인하고 주문 상태를 업데이트할 수 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-35-28.png}}
\caption{주문 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

주문 상태는 아래의 그림과 같이 드롭다운 메뉴를 통해 업데이트 할 수 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-36-02.png}}
\caption{주문 상태 업데이트}
\label{fig:improved_ui}
\end{center}
\end{figure}

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-38-22.png}}
\caption{주문 상태 업데이트}
\label{fig:improved_ui}
\end{center}
\end{figure}

### Supplier 페이지

마지막 페이지입니다. 이 페이지에서는 공급업체 정보를 확인하고, 공급업체의 계약을 확인할 수 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-41-39.png}}
\caption{공급 업체 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

업체의 이름을 클릭하면 세부 계약 내역을 확인할 수 있습니다.

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-26-20-42-13.png}}
\caption{공급 업체 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

# DB administration

## User User Management

### 유저 생성

```sql
CREATE USER 'kitchen_staff'@'%' IDENTIFIED BY 'secret123';
CREATE USER 'purchasing_manager'@'%' IDENTIFIED BY 'secret123';
CREATE USER 'supplier'@'%' IDENTIFIED BY 'secret123';
CREATE USER 'nutritionist'@'%' IDENTIFIED BY 'secret123';
```
목표한 사용자들을 생성합니다. 비밀번호는 'secret123'으로 설정해주었습니다.

### 권한 부여

```sql
-- kitchen staff
GRANT SELECT ON MENU TO 'kitchen_staff'@'%';
GRANT SELECT ON RECIPE_INGREDIENT TO 'kitchen_staff'@'%';
GRANT SELECT ON RECIPE TO 'kitchen_staff'@'%';
GRANT SELECT ON INGREDIENT TO 'kitchen_staff'@'%';
GRANT SELECT ON STOCK TO 'kitchen_staff'@'%';

-- purchasing manager
GRANT SELECT, INSERT ON ORDERING TO 'purchasing_manager'@'%';
GRANT SELECT, INSERT ON ORDERING_ITEM TO 'purchasing_manager'@'%';
GRANT SELECT ON INGREDIENT TO 'purchasing_manager'@'%';
GRANT SELECT ON STOCK TO 'purchasing_manager'@'%';
GRANT SELECT ON SUPPLIER TO 'purchasing_manager'@'%';
GRANT SELECT ON SUPPLIER_CONTRACT TO 'purchasing_manager'@'%';

-- supplier
GRANT SELECT ON ORDERING TO 'supplier'@'%';
GRANT SELECT, UPDATE ON ORDERING_ITEM TO 'supplier'@'%';
GRANT SELECT ON INGREDIENT TO 'supplier'@'%';
GRANT SELECT ON SUPPLIER_CONTRACT TO 'supplier'@'%';
GRANT SELECT ON SUPPLIER TO 'supplier'@'%';

-- nutritionist
GRANT SELECT ON RECIPE TO 'nutritionist'@'%';
GRANT SELECT ON RECIPE_INGREDIENT TO 'nutritionist'@'%';
GRANT SELECT ON NUTRITION TO 'nutritionist'@'%';
GRANT SELECT ON INGREDIENT TO 'nutritionist'@'%';
GRANT SELECT, INSERT, UPDATE, DELETE ON MENU TO 'nutritionist'@'%';
```


### 권한 적용

마지막으로 FLUSH를 해서 모든 권한을 적용합니다.

```sql
FLUSH PRIVILEGES;
```


## Backup

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-08-44-15.png}}
\caption{AWS Backup 화면}
\label{fig:improved_ui}
\end{center}
\end{figure}

RDS 기본 설정으로 백업이 설정되어 있습니다.
만약 백업 파일을 수동으로 생성하고 싶다면 EC2 인스턴스에서 다음 명령어를 실행합니다.

```bash
mysqldump -h $RDS_ENDPOINT -u $RDS_USERNAME -p$RDS_PASSWORD > backup.sql
```

만약 transaction log를 수동으로 생성하고 싶다면 다음의 단계를 따릅니다.

```bash
# set log retention period
CALL mysql.rds_set_configuration('binlog retention hours', 24);
SHOW BINARY LOGS; # check log file name
mysqlbinlog \
    --read-from-remote-server \
    --host=<RDS ENDPOINT> \
    --port=3306  \
    --user admin \
    --password \
    --raw \
    --verbose \
    --result-file=<path to store> \
    <name of log file> # create log file

mysqlbinlog \
    --base64-output=DECODE-ROWS \
    --verbose \
    <stored path> > binlog.sql # convert to sql format
```

우선 mysql에 접속해서 log파일의 보관기간을 수동으로 늘려줍니다.
그런 다음 log file의 파일명을 확인합니다.
그 후, mysqlbinlog 명령어를 통해 log file을 생성할 수 있습니다.
log file은 사용하기 좋게 sql 형식으로 변환해줍니다.


## Recovery

AWS 콘솔에서 복구를 선택할 수 있지만, 수동으로 생성한 백업 파일을 이용해서 복구할 수 있습니다.
다음의 명렁어를 새로운 환경에서 실행합니다.

```bash
cat << EOF | mysql
CREATE DATABASE SOONGSIL_STUDENT_CAFETERIA_SCM;
EOF
mysql SOONGSIL_STUDENT_CAFETERIA_SCM < backup.sql
mysql SOONGSIL_STUDENT_CAFETERIA_SCM < binlog.sql
```

log file은 AWS RDS 환경이 아니면 에러가 발생할 수 있습니다.
하지만 AWS RDS 환경에서 log file을 직접적으로 사용할 권한이 없습니다.
결론적으로, 우리의 구현에서 log file은 사용할 수 없습니다.

## Database Security

1. firewall  
  AWS 보안 그룹을 이용해서 RDS 인스턴스에 대한 접근을 제한했습니다.

2. Encryption store

\begin{figure}[H]
\begin{center}
\fbox{\includegraphics{img/2024-11-22-08-47-22.png}}
\caption{AWS RDS 생성 화면에서 암호화 설정}
\label{fig:improved_ui}
\end{center}
\end{figure}

RDS 인스턴스 기본 설정으로 암호화 설정을 활성화했습니다.
