<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>김형훈의 학습 블로그</title>
<link>https://cryscham123.github.io/posts/phd_database/</link>
<atom:link href="https://cryscham123.github.io/posts/phd_database/index.xml" rel="self" type="application/rss+xml"/>
<description>2학년 2학기 데이터베이스설계및활용 학부 정리</description>
<image>
<url>https://cryscham123.github.io/profile.jpg</url>
<title>김형훈의 학습 블로그</title>
<link>https://cryscham123.github.io/posts/phd_database/</link>
</image>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Wed, 30 Oct 2024 15:00:00 GMT</lastBuildDate>
<item>
  <title>Database Design</title>
  <link>https://cryscham123.github.io/posts/phd_database/09.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<p>MS access is <code>prototyping tool</code> for <code>mock-ups</code></p>
<section id="purpose-of-a-database-design" class="level2">
<h2 class="anchored" data-anchor-id="purpose-of-a-database-design">Purpose of a Database Design</h2>
<p>set of database specifications that can be implemented as a database in a DBMS</p>
<ul>
<li><code>conceptual design</code>: non-DBMS specific</li>
<li><code>logical design</code>: DBMS specific</li>
<li><code>physical design</code>: DBMS specific but not implemented directly by humans</li>
</ul>
</section>
<section id="logical-designrelational-design" class="level2">
<h2 class="anchored" data-anchor-id="logical-designrelational-design">Logical Design(<code>Relational</code> Design)</h2>
<ol type="1">
<li>Create a table(<code>relation</code>) for each entity
<ul>
<li>specify primary key</li>
<li>specify <code>properties</code> for each column
<ul>
<li>data type</li>
<li>constraints</li>
<li>default value</li>
<li>null status</li>
</ul></li>
<li>verify <code>normalization</code>: data structure의 <code>complexity</code>를 증가시킬 수도 있다 → <code>denormalization</code>: 조인 불필요, 조회 시 성능 향상 → datastructure complexity vs modification problems</li>
</ul></li>
<li>Create relationships by placing foreign keys:
<ul>
<li>Strong entity relationships</li>
<li>ID-dependent / non-ID-dependent weak entity relationships</li>
<li>Subtypes</li>
<li>Recursive</li>
</ul></li>
</ol>
</section>
<section id="representing-relationships" class="level2">
<h2 class="anchored" data-anchor-id="representing-relationships">Representing Relationships</h2>
<p>id-dependent의 경우 부모의 primary key로 <code>composite key</code> 생성</p>
<p><code>Maximum cardinality</code>의 유형에 따라 관계 표현 방법이 달라짐</p>
<ul>
<li><p><code>1:1</code>: <code>foreign key</code>를 어디에 두어도 상관 없음</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNIQUE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INDEX</span> idx_1_1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">table</span>(foriegn_key);</span></code></pre></div></li>
<li><p><code>1:N</code>: many(<code>child</code>) 쪽에 <code>foreign key</code>를 두는 것이 일반적</p>
<p>1 side is called <code>parent</code>, many side is called <code>child</code></p></li>
<li><p><code>M:N</code></p>
<p>Data Modeling에서만 쓰임. database design에서는 <code>intersection table</code>을 사용하여 표현. intersection table은 두 entity의 primary key를 포함하는 <code>composite key</code>를 가짐</p>
<p>만약 두 primary key 외의 attribute를 가진다면, <code>association entity</code>로 표현</p></li>
<li><p>Supertype / Subtype: Supertype의 primary key를 Subtype의 primary key로 사용</p></li>
<li><p>Recursive Relationship: 방향 이거 다시 보자</p>
<p>N:M의 경우 virtual table을 생성하여 표현</p></li>
</ul>
<p>설문조사는</p>
<p>descriptive statistics</p>
<p>남녀 비율, 경험 비율 등등도 포함되어야 한다.</p>
<p>가중 평균으로 보여준다</p>
<p>도서관 예약 시스템</p>
<ol type="1">
<li>퇴설 처리 미흡</li>
<li>좌석 이용 정보 파악</li>
<li>앱 알림</li>
</ol>
<p>좌석 배치도 감이 안온다. 잔여시간도 안뜬다</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <guid>https://cryscham123.github.io/posts/phd_database/09.html</guid>
  <pubDate>Wed, 30 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>ASP.NET</title>
  <link>https://cryscham123.github.io/posts/phd_database/13.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="tier-layers-of-database-system" class="level2">
<h2 class="anchored" data-anchor-id="tier-layers-of-database-system">3-Tier Layers of Database System</h2>
<ul>
<li>presentation layer: user interface</li>
<li>application layer: web server(<code>IIS</code>)</li>
<li><code>data</code> layer: database server</li>
</ul>
<p><img src="https://cryscham123.github.io/posts/phd_database/img/2024-12-10-08-08-56.png" class="img-fluid"></p>
</section>
<section id="api-interface-standards-for-db-access" class="level2">
<h2 class="anchored" data-anchor-id="api-interface-standards-for-db-access">API Interface Standards for DB Access</h2>
<p>DBMS에 접근하기 위한 표준 API</p>
<ul>
<li><p><code>ODBC</code> Open Database Connectivity<br>
DBMS-independent API</p></li>
<li><p><code>JDBC</code>: Java Database Connectivity</p></li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">a</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> target</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_blank"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</section>
<section id="asp-active-server-pages" class="level2">
<h2 class="anchored" data-anchor-id="asp-active-server-pages">ASP (Active Server Pages)</h2>
<p>server side scripting(<code>VBScript</code>) language<br>
CGI: &lt;% %&gt;는 server에서 실행되는 코드</p>
</section>
<section id="asp-데이터베이스-연동" class="level2">
<h2 class="anchored" data-anchor-id="asp-데이터베이스-연동">ASP 데이터베이스 연동</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb2-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span>%</span>
<span id="cb2-2">  Dim conn, connCmd, rs</span>
<span id="cb2-3">  Set connCmd = "DSN=dsn_name; Database=dbname; UID=user;PWD=password"</span>
<span id="cb2-4">  Set conn = Server.CreateObject("ADODB.Connection")</span>
<span id="cb2-5">  Set rs = Server.CreateObject("ADODB.Recordset")</span>
<span id="cb2-6">  conn.Open connCmd</span>
<span id="cb2-7">  rs.Open "SELECT * FROM table_name", conn</span>
<span id="cb2-8">%&gt;</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span>%</span>
<span id="cb2-11">  rs.getRows()</span>
<span id="cb2-12"></span>
<span id="cb2-13">  conn.Execute SQL</span>
<span id="cb2-14">%&gt;</span></code></pre></div>
</section>
<section id="오류-메세지-한글-설정" class="level2">
<h2 class="anchored" data-anchor-id="오류-메세지-한글-설정">오류 메세지 한글 설정</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">meta</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> charset</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTF-8"</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-2"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span>%</span>
<span id="cb3-3">  Session.CodePage = 949</span>
<span id="cb3-4">  Response.CharSet = "euc-kr"</span>
<span id="cb3-5">  Response.AddHeader "Pragma","no-cache"</span>
<span id="cb3-6">  Response.AddHeader "cache-control", "no-staff"</span>
<span id="cb3-7">  Response.Expires = -1</span>
<span id="cb3-8">%&gt;</span></code></pre></div>
<section id="form-tag-한글-깨짐-문제" class="level3">
<h3 class="anchored" data-anchor-id="form-tag-한글-깨짐-문제">form tag 한글 깨짐 문제</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode html code-with-copy"><code class="sourceCode html"><span id="cb4-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;</span>%</span>
<span id="cb4-2">Session.CodePage="65001"</span>
<span id="cb4-3">Response.CharSet="UTF-8"</span>
<span id="cb4-4">%&gt;</span></code></pre></div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <guid>https://cryscham123.github.io/posts/phd_database/13.html</guid>
  <pubDate>Wed, 30 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Database Administration</title>
  <link>https://cryscham123.github.io/posts/phd_database/11.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="terms" class="level1">
<h1>Terms</h1>
<p>Data Administration: <code>A management-oriented function</code> that concerns corporate data privacy and security issues.</p>
<p><code>Database Administration</code>: <code>A technical function</code> that is specific to a particular database, including application</p>
<p><code>Database Administrator(DBA)</code>: <code>Person in charge</code> of a database and facilitates the development of use of it</p>
</section>
<section id="database-administration-functions" class="level1">
<h1>Database Administration Functions</h1>
<section id="concurrency-control" class="level2">
<h2 class="anchored" data-anchor-id="concurrency-control"><code>Concurrency control</code></h2>
<p>Ensuring that one user’s work does not inappropriately influence another user’s work</p>
<ul>
<li><code>Strict concurrency control</code> requires <code>locking</code> the database, 다른 사용자의 동시 사용 허가 x</li>
<li><code>Lower concurrency control</code> allows <code>more throughput</code></li>
</ul>
<section id="transactions" class="level3">
<h3 class="anchored" data-anchor-id="transactions"><code>Transactions</code></h3>
<p>Users submit <code>Transactions(LUWs)</code></p>
<ul>
<li><p><code>Atmomic Transaction</code>: 데이터베이스에서 <code>일련의 작업들이 모두 성공적으로 수행</code>되거나, <code>그렇지 않을 경우 작업이 전혀 수행되지 않아 데이터베이스가 변경되지 않는 상태를 유지</code>하는 트랜잭션</p>
<p>→ Before <code>committed</code>, all LUWs must be successfully completed, or <code>rollback</code></p></li>
<li><p><code>Concurrent Transactions</code>: 여러 트랜잭션이 동시에 실행되는 것</p>
<ul>
<li><p><code>Lost update problem</code>: 두 트랜잭션이 동시에 같은 데이터를 수정할 때, 하나의 트렌잭션이 다른 트랜잭션의 변경을 덮어쓰는 문제</p></li>
<li><p><code>Inconsistent read problem</code>: 한 트랜잭션이 데이터를 읽는 도중 다른 트랜잭션이 데이터를 수정하는 문제</p>
<ul>
<li><code>Dirty read</code>: commit 되기 이전에 수정된 데이터를 읽는 것. 만약 rollback이 될 경우 문제가 발생.</li>
<li><code>Nonrepeatable read</code>: 데이터를 두 번 읽었는데 commit된 transaction 때문에 값이 다른 경우</li>
<li><code>Phantom read</code>: 데이터를 두 번 읽었는데 commit된 transaction 때문에 새로운 row가 추가된 경우</li>
</ul></li>
<li><p><code>Resource locking</code></p>
<ul>
<li><p><code>Implicit locks</code>: DBMS가 자동으로 수행하는 lock</p></li>
<li><p><code>Explicit locks</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LOCK</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLES</span> table_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">READ</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- or WRITE</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNLOCK</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLES</span></span></code></pre></div></li>
<li><p><code>Exclusive locks</code>: 다른 트랜잭션에서 읽기/쓰기 불가</p></li>
<li><p><code>Shared locks</code>: 다른 트랜잭션에서 읽기 가능, 쓰기 불가</p></li>
<li><p><code>rock granularity</code>: <code>row-level</code> vs <code>table-level</code> vs <code>database-level</code></p></li>
</ul></li>
</ul></li>
<li><p><code>Serializable Transactions</code>: 가장 강력한 격리 수준 보장</p>
<ul>
<li><code>Two-pase locking(2PL)</code>: <code>growing phase</code>와 <code>shrinking phase</code>로 나뉨</li>
</ul></li>
<li><p><code>ACID Transaction</code></p>
<ul>
<li><p><code>Atomic</code>: 성공한 transaction만 저장되어야 한다</p></li>
<li><p><code>Consistent</code>: 현재의 transaction이 마무리 되기 전 까지 record를 저장할 수 없다</p>
<p>→ 트랜잭션의 살향 결과로 데이터베이스 상태가 모순되지 않음</p></li>
<li><p><code>Isolated</code></p>
<ul>
<li><code>read uncommitted</code>: 다른 트랜잭션에서 commit되지 않은 데이터도 읽을 수 있음</li>
<li><code>read committed</code>: 다른 트랜잭션이 commit된 데이터만 읽을 수 있음</li>
<li><code>repeatable read</code>: 한 트랜잭션에서 하나의 스냅션만 사용</li>
<li><code>serializable</code>: 가장 강력한 격리 수준 보장</li>
</ul></li>
<li><p><code>Durable</code>: 트랜잭션이 <code>성공적으로 완료</code>되면, 그 결과는 <code>영구적으로 저장</code>되어야 한다</p></li>
</ul></li>
</ul>
<p><img src="https://cryscham123.github.io/posts/phd_database/img/2024-12-10-08-07-45.png" class="img-fluid"></p>
</section>
<section id="deadlock-deadly-embrace" class="level3">
<h3 class="anchored" data-anchor-id="deadlock-deadly-embrace"><code>Deadlock</code> / <code>deadly embrace</code></h3>
<p>두 개 이상의 트랜잭션이 서로 unlock을 무한히 기다리는 상태</p>
</section>
<section id="lock" class="level3">
<h3 class="anchored" data-anchor-id="lock">lock</h3>
<ul>
<li><p><code>optimistic locking</code></p>
<ul>
<li>assumption: <code>No conflict will occur</code></li>
<li>if no conflict occurs, the transaction is <code>committed</code> else it is <code>rolled back</code> and repeated</li>
</ul></li>
<li><p><code>pessimistic locking</code></p>
<ul>
<li>assumption: <code>Conflict will occur</code></li>
<li><code>lock</code> the data before the transaction starts</li>
</ul></li>
</ul>
</section>
<section id="cursor" class="level3">
<h3 class="anchored" data-anchor-id="cursor">Cursor</h3>
<p>A cursor is a pointer into a set of rows that are the result set from an <code>SQL SELECT</code> statement</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DECLARE</span> cursor_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CURSOR</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FOR</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> column_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> table_name</span></code></pre></div>
</section>
</section>
<section id="backup-and-recovery" class="level2">
<h2 class="anchored" data-anchor-id="backup-and-recovery"><code>Backup and recovery</code></h2>
<section id="recovery" class="level3">
<h3 class="anchored" data-anchor-id="recovery">Recovery</h3>
<ul>
<li>via <code>Reprocessing</code></li>
<li>via <code>Rollback</code> and <code>Rollforward</code>
<ul>
<li><code>log file</code> transaction을 <code>undo</code>할 때, <code>before-images</code>가 존재해함. (<code>rollback</code>) transaction을 <code>redo</code>할 때, <code>after-images</code>가 존재해함.(<code>rollforward</code>)</li>
</ul></li>
</ul>
</section>
</section>
<section id="security" class="level2">
<h2 class="anchored" data-anchor-id="security"><code>Security</code></h2>
<p>only <code>authenticated users</code> perform <code>authorized activities</code></p>
<ul>
<li><code>Authentication</code>: <code>User ID</code>와 <code>password</code>를 사용하여 사용자를 인증</li>
<li><code>Authorization</code>: <code>user groups(roles)</code>: dbcreator, public, … <code>sql  GRANT SELECT, INSERT, UPDATE, DELETE ON table_name TO user_name</code></li>
</ul>
</section>
<section id="database-performance" class="level2">
<h2 class="anchored" data-anchor-id="database-performance"><code>Database Performance</code></h2>
<ul>
<li>index</li>
<li><code>disk mirroring</code>: 데이터 복제 말씀하신 듯</li>
<li>RAID</li>
<li>SANs</li>
<li><code>Distributed database</code>: service cluster partitioned replicated</li>
</ul>
<section id="dba-responsibilities" class="level3">
<h3 class="anchored" data-anchor-id="dba-responsibilities">DBA Responsibilities</h3>
<ol type="1">
<li>user reported errors를 모아서 system이 잘 돌아갈 수 있게 해야함</li>
<li>database 설정을 잘 관리해야함</li>
<li>문서화 잘 해야함</li>
<li>cloud로 db 관리(<code>service level agreement</code>)</li>
</ol>


</section>
</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <guid>https://cryscham123.github.io/posts/phd_database/11.html</guid>
  <pubDate>Wed, 30 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Modeling and the Entity-Relationship Model</title>
  <link>https://cryscham123.github.io/posts/phd_database/07.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="data-and-information" class="level2">
<h2 class="anchored" data-anchor-id="data-and-information">Data and information</h2>
<ul>
<li>Data: raw facts. <code>recorded facts</code></li>
<li>Information: <code>meaningful context</code></li>
<li>Knowledge: information + 가치</li>
</ul>
</section>
<section id="what-is-information-system" class="level2">
<h2 class="anchored" data-anchor-id="what-is-information-system">What is information system?</h2>
<ul>
<li>System: a <code>set of components</code> that interact to achieve some <code>purpose</code> or <code>goal</code></li>
<li>Information System: composed of <code>hardware</code>, <code>software</code>, <code>data</code>, <code>procedures</code>, <code>people</code></li>
</ul>
<p><img src="https://cryscham123.github.io/img/system-work.png" class="img-fluid"></p>
</section>
<section id="system-analysis-and-design" class="level2">
<h2 class="anchored" data-anchor-id="system-analysis-and-design">System Analysis and Design</h2>
<ul>
<li><code>System analysis and design</code>: process of creating and maintaining <code>information systems</code></li>
<li>classic methodology: <code>SDLC</code></li>
</ul>
<section id="sdlc-system-development-life-cycle" class="level3">
<h3 class="anchored" data-anchor-id="sdlc-system-development-life-cycle"><code>SDLC</code> (System Development Life Cycle)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/system-use.png" class="img-fluid figure-img"></p>
<figcaption>SDLC</figcaption>
</figure>
</div>
<ol type="1">
<li>System definitions: 예산 편상, 위험 분석, …</li>
<li><code>Requirements</code> analysis</li>
<li>Component design</li>
<li>Implementation</li>
<li>System maintenance</li>
</ol>
<section id="database-development-process" class="level4">
<h4 class="anchored" data-anchor-id="database-development-process">database development process</h4>
<ol type="1">
<li><code>Requirements</code> analysis<br>
input: the project plan<br>
output: a set of approved requirements -&gt; <code>data model</code> (<code>ER model</code>로 <code>conceptual design</code>)<br>
source: <code>Use cases</code>, <code>Business rules</code></li>
<li>Component Design: Relational Database Design (상세 설계)</li>
<li>Implementation</li>
</ol>
</section>
</section>
</section>
<section id="er-model" class="level2">
<h2 class="anchored" data-anchor-id="er-model">ER model</h2>
<ul>
<li><code>Entities</code>
<ul>
<li><code>Entity class</code></li>
<li><code>Entity instance</code></li>
</ul></li>
<li>Attributes: <code>Data type</code>, <code>Properties</code>(default, constraints)</li>
<li>Identifiers
<ul>
<li><code>unique</code></li>
<li><code>Nonunique</code>: identifies a set of instances</li>
</ul></li>
<li><code>Relationships</code>
<ul>
<li><code>binary relationship</code>
<ul>
<li>Maximum cardinality: <code>1:1</code>(A has a B), <code>1:N</code>(A has a set of B), <code>M:N</code></li>
<li>Minimum cardinality: <code>0</code>, <code>1</code></li>
</ul></li>
<li><code>ternary relationship</code></li>
</ul></li>
</ul>
<p><img src="https://cryscham123.github.io/img/entity.jpg" class="img-fluid"></p>
</section>
<section id="entit-relationship-diagram" class="level2">
<h2 class="anchored" data-anchor-id="entit-relationship-diagram"><code>Entit-Relationship Diagram</code></h2>
<ul>
<li><p><code>Entity classes</code>: rectangle</p></li>
<li><p><code>Relationships</code>: diamond</p></li>
<li><p><code>maximum cardinality</code>: inside the diamond</p></li>
<li><p><code>minimum cardinality</code>: oval or hash mark next to diamond</p></li>
<li><p><code>strong entity</code>: 독자적으로 존재 가능. 강한개체 관계는 점선<br>
<code>Non-ID-dependent</code>: identifier에 다른 entity의 identifier가 포함되어 있지 않음. 점선으로 표기(<code>non-identifying relationship</code>)</p></li>
<li><p><code>weak entity</code>: 약, 강 관계는 실선. IS: rounded square, traditional: 2 layer square<br>
<code>ID-dependent</code>: identifier에 다른 entity의 identifier가 포함되어 있음. 실선으로 표기(<code>identifying relationship</code>)</p></li>
<li><p><code>associative entity</code>: <code>relationship</code>이 <code>entity</code>로 변환된 것.<br>
<code>Many-to-many</code> relationship을 2개의 <code>1:N</code>으로 변환</p></li>
<li><p><code>super type</code>, <code>sub type</code>: 상속관계. <code>sub type</code> is a <code>super type</code></p>
<ul>
<li>exclusive: <code>Discriminator attribute</code>가 필요함</li>
<li>inclusive</li>
</ul></li>
<li><p><code>recursive relationship</code></p></li>
<li><p>Business rule: build-in constraints, trigger, stored procedure, application code로 구현 가능</p></li>
<li><p>data model validation: form, report를 이용한 prototyping</p></li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <guid>https://cryscham123.github.io/posts/phd_database/07.html</guid>
  <pubDate>Sun, 13 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>SQL</title>
  <link>https://cryscham123.github.io/posts/phd_database/04-2.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<ul>
<li>SQL is not programming language but a <code>data sublanguage</code></li>
<li>MS Access 89에서는 <code>UNIQUE, CHECK, DEFAULT</code>,<code>NUMERIC(m,n)</code>, <code>LIKE</code>, <code>on update casacade, on delete casacade</code> 제약조건을 지원하지 않음</li>
<li>MS Access에서는 <code>AutoNumber</code>를 지원하지 않음. 대신 <code>Identity</code>를 사용</li>
<li>MS Access에서는 database 생성을 지원하지 않음</li>
</ul>
<section id="ddl-data-definition-language" class="level2">
<h2 class="anchored" data-anchor-id="ddl-data-definition-language">DDL (<code>Data Definition Language</code>)</h2>
<ol type="1">
<li>CREATE (database, tables, views, indexes)</li>
<li>ALTER: modify columns / constraints</li>
<li>DROP (database, tables, views, indexes)</li>
<li>TRUNCATE: delete table data while keeping structure.<br>
<code>MS Access에서는 지원하지 않음</code> =&gt; <code>DELETE FROM table</code></li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student (</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-3">    CourseID <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-4">    Name <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UNIQUE</span>, # unique는 자동으로 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">index</span> 생성</span>
<span id="cb1-5">    Age <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INT</span>,</span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CONSTRAINT</span> STUDENT_PK <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">PRIMARY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">KEY</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span>),</span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CONSTRAINT</span> </span>
<span id="cb1-8">    COURSE_FK <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FOREIGN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">KEY</span> (CourseID) </span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">REFERENCES</span> Course(CourseID) </span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UPDATE</span> CASACADE </span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DELETE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NO</span> ACTION</span>
<span id="cb1-12">);</span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALTER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ADD</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COLUMN</span> major <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>);</span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALTER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ADD</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CONSTRAINT</span> STUDENT_FK <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FOREIGN</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">KEY</span> (CourseID) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">REFERENCES</span> Course(CourseID) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DELETE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASCADE</span>;</span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALTER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ADD</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CONSTRAINT</span> AGE_CHECK <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CHECK</span> (Age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>);</span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ALTER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DROP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CONSTRAINT</span> AGE_CHECK;</span>
<span id="cb1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DROP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student;</span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TRUNCATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">TABLE</span> student;</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">VIEW</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">view</span> name] <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student;</span></code></pre></div>
<section id="dml-data-manipulation-language" class="level3">
<h3 class="anchored" data-anchor-id="dml-data-manipulation-language">DML (<code>Data Manipulation Language</code>)</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">INTO</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">VALUES</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>);</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">UPDATE</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SET</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, Name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'babo'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>;</span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DELETE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>;</span></code></pre></div>
</section>
<section id="dql-data-query-language" class="level3">
<h3 class="anchored" data-anchor-id="dql-data-query-language">DQL (Data Query Language)</h3>
<p>A query create temporarily a new table.<br>
this allows a query to <code>create a new relation</code> and feed information to another query as a <code>subquery</code></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student;</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> name </span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student </span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>, age <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ASC</span>;</span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DISTINCT</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student;</span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> name, age <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> Age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AVG</span>(Age) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> student);</span></code></pre></div>
</section>
<section id="join" class="level3">
<h3 class="anchored" data-anchor-id="join">JOIN</h3>
<ul>
<li>inner join(equijoin)
<ul>
<li>explicit join: <code>FROM table1 INNER JOIN table2 ON table1.id = table2.id</code><br>
(MS Access에서는 INNER를 명시해야됨)</li>
<li>implicit join: <code>FROM table1, table2 WHERE table1.id = table2.id</code></li>
</ul></li>
<li>outer join
<ul>
<li>left outer join: <code>FROM table1 LEFT JOIN table2 ON table1.id = table2.id</code></li>
<li>right outer join: <code>FROM table1 RIGHT JOIN table2 ON table1.id = table2.id</code></li>
</ul></li>
</ul>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <category>database</category>
  <guid>https://cryscham123.github.io/posts/phd_database/04-2.html</guid>
  <pubDate>Thu, 26 Sep 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Database Normalization</title>
  <link>https://cryscham123.github.io/posts/phd_database/04-1.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="normalization" class="level2">
<h2 class="anchored" data-anchor-id="normalization"><code>Normalization</code></h2>
<ul>
<li>process of organizing a database to reduce <code>redundancy problem</code> and improve data integrity</li>
</ul>
</section>
<section id="functional-dependency" class="level2">
<h2 class="anchored" data-anchor-id="functional-dependency"><code>Functional Dependency</code></h2>
<ul>
<li>하나의 atrribute가 다른 attribute의 value를 결정하는지 여부를 판단</li>
<li>well formed인지 판별할 수 있는 기준</li>
<li>A(<code>Determinant</code>) -&gt; B(<code>dependent</code>): A가 결정되면 B도 결정된다면 B는 A에 함수적 종속</li>
<li><code>Every determinant must be a Candidate Key</code></li>
</ul>
</section>
<section id="normalization-process" class="level2">
<h2 class="anchored" data-anchor-id="normalization-process"><code>Normalization</code> Process</h2>
<ul>
<li>BCFNF: <code>Boyce-Codd</code> Normal Form =&gt; <code>Each relation has only one theme</code></li>
</ul>
<ol type="1">
<li>Identify all the <code>Candidate Keys</code>.</li>
<li>Identify all the <code>Functional Dependencies</code>.</li>
<li>Examine the <code>determinants</code> of the functional dependencies
<ol type="a">
<li>place the columns of the functional dependency in a new relation of their own</li>
<li>make the determinant of the functianl dependency the primary key of the new relation</li>
<li>Leabe a copy of the determinant as a foreign key in the original relation</li>
<li>create a <code>referential integrity</code> constraint between the original and new relation</li>
</ol></li>
<li>Repeat the process until every determinant of every relation is a candidate key</li>
</ol>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <category>database</category>
  <guid>https://cryscham123.github.io/posts/phd_database/04-1.html</guid>
  <pubDate>Mon, 23 Sep 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>The Relational Model</title>
  <link>https://cryscham123.github.io/posts/phd_database/03.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="entity" class="level2">
<h2 class="anchored" data-anchor-id="entity"><code>entity</code></h2>
<p>a formal name for a thing that is being tracked one theme or <code>topic</code> (just single table)</p>
</section>
<section id="relation" class="level2">
<h2 class="anchored" data-anchor-id="relation"><code>Relation</code></h2>
<ul>
<li>a <code>two-dimensional table</code> that has specific charateristics</li>
<li>Cell of the table hold single value</li>
<li>All entries in a column are of the same kind</li>
<li>No two rows in a table are identical</li>
</ul>
</section>
<section id="domain-cartesian-product" class="level2">
<h2 class="anchored" data-anchor-id="domain-cartesian-product">domain &amp; cartesian product</h2>
<ul>
<li>domain: set of possible values for a column</li>
<li><code>cartesian product</code>: set of all possible combinations of rows from two tables</li>
</ul>
</section>
<section id="presenting-relation-structures" class="level2">
<h2 class="anchored" data-anchor-id="presenting-relation-structures">Presenting Relation Structures</h2>
<p><strong>RELATION_NAME(<u>PrimaryKey</u>, <em>ForeignKey</em>, ColumnName, …)</strong></p>
</section>
<section id="key" class="level2">
<h2 class="anchored" data-anchor-id="key">key</h2>
<ul>
<li><code>identify</code> a row</li>
<li>Unique Key(Primary Key)</li>
<li>NonUnique Key(Foreign Key)</li>
<li><code>Composite Key</code>: Primary key가 두개 이상. Surrogate Key로 대체되곤 함.</li>
<li><code>Candidate Key</code>: unique한 columns</li>
<li><code>Surrogate Key</code>: 자동으로 할당되는 일련번호<br>
IDENTITY (start, increment)</li>
</ul>
</section>
<section id="referential-integrity-constraint" class="level2">
<h2 class="anchored" data-anchor-id="referential-integrity-constraint"><code>Referential Integrity Constraint</code></h2>
<ul>
<li>모든 foriegn key는 존재하는 primary key와 매칭되야한다.</li>
</ul>
</section>
<section id="null-values" class="level2">
<h2 class="anchored" data-anchor-id="null-values">Null values</h2>
<ul>
<li>required, allow nulls 설정으로 null값을 허용할지 결정</li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <category>database</category>
  <guid>https://cryscham123.github.io/posts/phd_database/03.html</guid>
  <pubDate>Mon, 16 Sep 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>An Overview of Database</title>
  <link>https://cryscham123.github.io/posts/phd_database/01-2.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/db-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="the-importance-of-dbs-today" class="level2">
<h2 class="anchored" data-anchor-id="the-importance-of-dbs-today">The Importance of DBs Today</h2>
<ul>
<li>Depend upon <code>database</code>: <code>Internet</code>, <code>Web 2.0</code>, <code>IOT</code></li>
</ul>
</section>
<section id="why-and-how-databases-are-used" class="level2">
<h2 class="anchored" data-anchor-id="why-and-how-databases-are-used">Why and How Databases are Used?</h2>
<ul>
<li>The purpose of a database is to <code>keep track of thing</code></li>
<li>db store information that is more complicated than a simple spread sheet</li>
</ul>
</section>
<section id="problems-with-lists-spread-sheet" class="level2">
<h2 class="anchored" data-anchor-id="problems-with-lists-spread-sheet">Problems with Lists (spread sheet)</h2>
<ol type="1">
<li><code>Redundancy</code></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/redundancy.png" class="img-fluid figure-img"></p>
<figcaption>필요없는 column들이 중복됨</figcaption>
</figure>
</div>
<ol start="2" type="1">
<li><code>Multiple Themes</code></li>
</ol>
<ul>
<li>그 결과로, list에 나타날 때만 존재하는 informartion이 생김</li>
</ul>
<ol start="3" type="1">
<li><code>List Modification Issues</code></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/list-modification.png" class="img-fluid figure-img"></p>
<figcaption><code>deletion</code> problems, <code>update</code> problems, <code>insertion</code> problems</figcaption>
</figure>
</div>
</section>
<section id="relational-databases" class="level2">
<h2 class="anchored" data-anchor-id="relational-databases">Relational Databases</h2>
<ul>
<li><code>Relationa Model</code> is methodology used as a solution for database design</li>
<li>A <code>relational database</code> stores information in tables
<ul>
<li>Each <code>informational topic</code> is stored in its own table</li>
</ul></li>
<li><code>Each theme</code> in the list can be stored in a table</li>
</ul>
<p><code>Table</code> = <code>file</code> = <code>relation</code><br>
<code>column</code> = <code>fields</code> = <code>attribute</code><br>
<code>row</code> = <code>record</code> = <code>tuple</code></p>
</section>
<section id="sql-structured-query-language" class="level2">
<h2 class="anchored" data-anchor-id="sql-structured-query-language">SQL (<code>Structured Query Language</code>)</h2>
<ul>
<li>international standard for <code>creating</code>, <code>processing</code>, <code>querying</code> databases and their tables</li>
<li>db applications use SQL to <code>retrieve</code>, format, report, <code>insert</code>, <code>delete</code>, <code>modify</code> data for users</li>
<li>can combine table by <code>join</code> operation</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span>  CUSTOMER.CustomerLastName, </span>
<span id="cb1-2">        CUSTOMER.CustomerFirstName, </span>
<span id="cb1-3">        CUSTOMER.Phone,</span>
<span id="cb1-4">        COURSE.CourseDate, </span>
<span id="cb1-5">        ENROLLMENT.AmountPaid,</span>
<span id="cb1-6">        COURSE.Course, </span>
<span id="cb1-7">        COURSE.Fee</span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span>    CUSTOMER, ENROLLMENT, COURSE</span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span>   CUSTOMER.CustomerNumber <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ENROLLMENT.CustomerNumber <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- join condition</span></span>
<span id="cb1-10">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span>  COURSE.CourseNumber <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ENROLLMENT.CourseNumber; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- join condition</span></span></code></pre></div>
</section>
<section id="database-system-dbs" class="level2">
<h2 class="anchored" data-anchor-id="database-system-dbs">Database System (DBS)</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/component.png" class="img-fluid figure-img"></p>
<figcaption>The four components of database system</figcaption>
</figure>
</div>
<ul>
<li><code>User</code>: Employ database application to <code>keep track of things</code><br>
Use forms to <code>read</code>, <code>enter</code>, <code>query</code> data<br>
produce reports</li>
<li><code>Database Application</code>: <code>web/mobile database applications</code>, <code>Forms</code>, <code>Reports</code></li>
<li><code>DBMS</code>: used to <code>create</code>, <code>process</code>, <code>administer</code> the database</li>
<li><code>Database</code>: <code>self-describing</code> collection of <code>related</code> tables<br>
<code>user data</code>, <code>metadata</code>, <code>index</code> and other <code>overhead data</code>, <code>application metadata</code>(form, reports) are stored in db<br>
<code>metadata</code> = about the structure of the database. &lt;-&gt; user data</li>
</ul>
<section id="function-of-dbms" class="level3">
<h3 class="anchored" data-anchor-id="function-of-dbms">Function of DBMS</h3>
<ul>
<li><code>DB administration</code>
<ul>
<li>Control concurrency</li>
<li>Provide security</li>
<li>Perform backup and recovery</li>
</ul></li>
</ul>
</section>
<section id="referential-integrity-constraints" class="level3">
<h3 class="anchored" data-anchor-id="referential-integrity-constraints"><code>Referential Integrity</code> Constraints</h3>
</section>
</section>
<section id="personal-vs-enterprise-class-database-systems" class="level2">
<h2 class="anchored" data-anchor-id="personal-vs-enterprise-class-database-systems">Personal vs Enterprise-class Database Systems</h2>
<ul>
<li>Personal: Access</li>
<li><code>Enterprise-class</code>(Organizational): Microsoft SQL server</li>
</ul>
</section>
<section id="nosql-databases" class="level2">
<h2 class="anchored" data-anchor-id="nosql-databases">NoSQL databases</h2>
<ul>
<li>NoSQL database = <code>non-relational</code> database</li>
</ul>
</section>
<section id="cloud-databases" class="level2">
<h2 class="anchored" data-anchor-id="cloud-databases">Cloud databases</h2>
<p>Main frame -&gt; Client/server -&gt; Cloud</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>개념 정리</category>
  <category>database</category>
  <guid>https://cryscham123.github.io/posts/phd_database/01-2.html</guid>
  <pubDate>Mon, 02 Sep 2024 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
