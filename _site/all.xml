<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>김형훈의 학습 블로그</title>
<link>https://cryscham123.github.io/all.html</link>
<atom:link href="https://cryscham123.github.io/all.xml" rel="self" type="application/rss+xml"/>
<description>안녕하세요. 김형훈의 학습 블로그 입니다.</description>
<image>
<url>https://cryscham123.github.io/profile.jpg</url>
<title>김형훈의 학습 블로그</title>
<link>https://cryscham123.github.io/all.html</link>
</image>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Fri, 07 Feb 2025 15:00:00 GMT</lastBuildDate>
<item>
  <title>3 - 분석 마스터 플랜</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/06.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="마스터-플랜-수립-프레임-워크" class="level2">
<h2 class="anchored" data-anchor-id="마스터-플랜-수립-프레임-워크">마스터 플랜 수립 프레임 워크</h2>
<section id="마스터-플랜-수립-개요" class="level3">
<h3 class="anchored" data-anchor-id="마스터-플랜-수립-개요">1. 마스터 플랜 수립 개요</h3>
</section>
<section id="수행-과제-도출-및-우선순위-평가" class="level3">
<h3 class="anchored" data-anchor-id="수행-과제-도출-및-우선순위-평가">2. 수행 과제 도출 및 우선순위 평가</h3>
</section>
<section id="이행계획-수립" class="level3">
<h3 class="anchored" data-anchor-id="이행계획-수립">3. 이행계획 수립</h3>
</section>
</section>
<section id="분석-거버넌스-체계-수립" class="level2">
<h2 class="anchored" data-anchor-id="분석-거버넌스-체계-수립">분석 거버넌스 체계 수립</h2>
<section id="거버넌스-체계" class="level3">
<h3 class="anchored" data-anchor-id="거버넌스-체계">1. 거버넌스 체계</h3>
</section>
<section id="데이터-분석-수준진단" class="level3">
<h3 class="anchored" data-anchor-id="데이터-분석-수준진단">2. 데이터 분석 수준진단</h3>
</section>
<section id="분석지원-인프라-방안-수립" class="level3">
<h3 class="anchored" data-anchor-id="분석지원-인프라-방안-수립">3. 분석지원 인프라 방안 수립</h3>
</section>
<section id="데이터-거버넌스-체계-수립" class="level3">
<h3 class="anchored" data-anchor-id="데이터-거버넌스-체계-수립">4. 데이터 거버넌스 체계 수립</h3>
</section>
<section id="데이터-조직-및-인력방안-수립" class="level3">
<h3 class="anchored" data-anchor-id="데이터-조직-및-인력방안-수립">5. 데이터 조직 및 인력방안 수립</h3>
</section>
<section id="분석과제-관리-프로세스-수립" class="level3">
<h3 class="anchored" data-anchor-id="분석과제-관리-프로세스-수립">6. 분석과제 관리 프로세스 수립</h3>
</section>
<section id="분석-교육-및-변화관리" class="level3">
<h3 class="anchored" data-anchor-id="분석-교육-및-변화관리">7. 분석 교육 및 변화관리</h3>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/06.html</guid>
  <pubDate>Fri, 07 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>3 - 데이터 분석 기획의 이해</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/05.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="분석-기획-방향성-도출" class="level2">
<h2 class="anchored" data-anchor-id="분석-기획-방향성-도출">분석 기획 방향성 도출</h2>
<section id="분석기획의-특징" class="level3">
<h3 class="anchored" data-anchor-id="분석기획의-특징">1. 분석기획의 특징</h3>
<ul>
<li><code>과제를 정의</code>하고, 의도했던 <code>결과를 도출</code>할 수 있도록 적절하게 <code>관리</code>할 수 있는 방안을 <code>사전에 계획</code>하는 일련의 작업 (말 그대로 기획)</li>
</ul>
</section>
<section id="목표-시점-별-분석-기획-방안" class="level3">
<h3 class="anchored" data-anchor-id="목표-시점-별-분석-기획-방안">3. 목표 시점 별 분석 기획 방안</h3>
<p><img src="https://snipboard.io/lTz3GL.jpg" class="img-fluid"></p>
</section>
<section id="분석-기획시-고려사항" class="level3">
<h3 class="anchored" data-anchor-id="분석-기획시-고려사항">4. 분석 기획시 고려사항</h3>
<ol type="1">
<li>가용 데이터</li>
<li>적절한 활용방안과 유즈케이스</li>
<li>장애요소들에 대한 사전계획 수립</li>
</ol>
</section>
</section>
<section id="분석-과제-발굴" class="level2">
<h2 class="anchored" data-anchor-id="분석-과제-발굴">분석 과제 발굴</h2>
<ul>
<li>풀어야 할 다양한 문제를 데이터 분석 문제로 변환 후, 프로젝트를 수행할 수 있는 <code>과제 정의서 형태</code>로 도출</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://snipboard.io/3ioLEq.jpg" class="img-fluid figure-img"></p>
<figcaption>도출을 위한 접근 방법</figcaption>
</figure>
</div>
<p>최적의 의사결정은 두 접근 방식이 상호 보완 관계에 있을 때 가능하다.</p>
<p><img src="https://snipboard.io/V036c7.jpg" class="img-fluid"></p>
<section id="하향식-접근법" class="level3">
<h3 class="anchored" data-anchor-id="하향식-접근법">1. 하향식 접근법</h3>
<ul>
<li>사물을 <code>why</code> 관점에서 보는 방식</li>
</ul>
<p><img src="https://snipboard.io/6PJ1Tv.jpg" class="img-fluid"></p>
<ol type="1">
<li><code>문제 탐색</code>: 문제를 해결함으로써 발생하는 가치에 중점
<ul>
<li>비즈니스 모델기반</li>
<li>분석 기회 발굴의 범위 확장</li>
<li>외부참조 모델 기반</li>
<li>분석 유즈 케이스</li>
</ul></li>
<li><code>문제 정의</code>: 식별된 비즈니스 문제를 데이터의 문제로 변환</li>
<li><code>해결방안 탐색</code>: 분석 역량과, 분석 기법 및 시스템 존재 여부를 고려한다.</li>
<li><code>타당성 검토</code>
<ul>
<li>경제적 타당성: 비용대비 편익 분석 관점의 접근</li>
<li>데이터 및 기술적 타당성</li>
</ul></li>
</ol>
</section>
<section id="상향식-접근법" class="level3">
<h3 class="anchored" data-anchor-id="상향식-접근법">2. 상향식 접근법</h3>
<ul>
<li>사물을 <code>what</code> 관점에서 보는 방식</li>
</ul>
<ol type="1">
<li>비지도 학습</li>
<li>지도 학습</li>
</ol>
<ul>
<li>프로토타이핑 접근법</li>
</ul>
</section>
</section>
<section id="분석-방법론" class="level2">
<h2 class="anchored" data-anchor-id="분석-방법론">분석 방법론</h2>
<ul>
<li>방법론은 <code>절차</code>, <code>방법</code>, <code>도구와 기법</code>, <code>템플릿과 산출물</code>로 구성된다.</li>
</ul>
<ol type="1">
<li>폭포수 모델</li>
<li>프로토타입 모델</li>
<li>나선형 모델</li>
</ol>
<section id="kdd-분석-방법론" class="level3">
<h3 class="anchored" data-anchor-id="kdd-분석-방법론">1. KDD 분석 방법론</h3>
</section>
<section id="crisp-dm-분석-방법론" class="level3">
<h3 class="anchored" data-anchor-id="crisp-dm-분석-방법론">2. CRISP-DM 분석 방법론</h3>
</section>
<section id="빅데이터-분석-방법론" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터-분석-방법론">3. 빅데이터 분석 방법론</h3>
</section>
</section>
<section id="분석-프로젝트-관리-방안" class="level2">
<h2 class="anchored" data-anchor-id="분석-프로젝트-관리-방안">분석 프로젝트 관리 방안</h2>
<section id="분석과제-관리를-위한-5가지-주요-영역" class="level3">
<h3 class="anchored" data-anchor-id="분석과제-관리를-위한-5가지-주요-영역">1. 분석과제 관리를 위한 5가지 주요 영역</h3>
</section>
<section id="분석-프로젝트의-특성" class="level3">
<h3 class="anchored" data-anchor-id="분석-프로젝트의-특성">2. 분석 프로젝트의 특성</h3>
</section>
<section id="분석-프로젝트-관리방안" class="level3">
<h3 class="anchored" data-anchor-id="분석-프로젝트-관리방안">3. 분석 프로젝트 관리방안</h3>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/05.html</guid>
  <pubDate>Fri, 07 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>2 - 데이터 처리 프로세스</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/03.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="etl" class="level2">
<h2 class="anchored" data-anchor-id="etl">ETL</h2>
<section id="etl-개요" class="level3">
<h3 class="anchored" data-anchor-id="etl-개요">1. ETL 개요</h3>
<ul>
<li><code>ETL(Extract, Transformation, Load)</code>: 데이터 이동 및 변환 절차</li>
<li><code>batch ETL</code>, <code>real-time ETL</code>으로 나뉨</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-14-25-19.png" class="img-fluid figure-img"></p>
<figcaption>ETL 작업 단계</figcaption>
</figure>
</div>
<ol type="1">
<li><code>Interface</code>: 다양한 소스로부터 데이터 휙득을 위한 인터페이스(OLEDB, ODBC, FTP)</li>
<li><code>Staging</code>: 정기적으로 데이터 원천으로 부터 저장. 아직은 정규화 x</li>
<li><code>Profiling</code>: staging table의 데이터 특성을 식별하고, 품질 측정</li>
<li><code>Cleansing</code>: profiling된 데이터를 보정</li>
<li><code>Integration</code>: 데이터 충돌을 해소하고, 데이터를 통합. 아마 여기서 정규화가 이루어질듯(왜 책에 설명 똑바로 안해놓지)</li>
<li><code>Export</code>: 운영보고서 생성, 데이터웨어하우스 / 데이터마트에 적재하기 위한 최적화(denormalization) 진행</li>
</ol>
</section>
<section id="ods-구성" class="level3">
<h3 class="anchored" data-anchor-id="ods-구성">2. ODS 구성</h3>
<ul>
<li>통합된 데이터를 저정하는 중간 저장소</li>
<li><code>실시간</code>, <code>거의 실시간</code>으로 데이터 적재</li>
</ul>
</section>
<section id="데이터-웨어하우스" class="level3">
<h3 class="anchored" data-anchor-id="데이터-웨어하우스">3. 데이터 웨어하우스</h3>
<ul>
<li>ODS를 통해 정제 / 통합된 데이터를 분석 및 보고서 생성을 위해 저장</li>
</ul>
<p><strong>특징</strong></p>
<ul>
<li><code>주제중심성</code></li>
<li><code>영속성/비휘발성</code></li>
<li><code>통합성</code></li>
<li><code>시계열성</code></li>
</ul>
<p><strong>모델링 기법</strong></p>
<ul>
<li><code>스타 스키마(조인 스키마)</code>
<ul>
<li>제 3정규형의 fact 테이블과 제 2정규형의 차원 테이블로 구성</li>
<li>복잡성이 낮지만, 데이터 무결성이 떨어짐</li>
</ul></li>
</ul>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-14-42-58.png" class="img-fluid"></p>
<ul>
<li><code>스노우플레이크 스키마</code>
<ul>
<li>스타 스키마의 차원 테이블을 제 3정규형으로 정규화한 상태</li>
<li>데이터 무결성이 높지만, 복잡성이 높음</li>
</ul></li>
</ul>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-14-44-11.png" class="img-fluid"></p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>제 1 정규형: 반복되는 record나 다치 attribute를 포함하지 않음 제 2 정규형: 부분 종속성(primary key의 일부가 다른 일부를 종속함)이 없음 제 3 정규형: 이행적 종속성(primary key가 아닌 attribute의 종속성)이 없음</p>
</div>
</div>
</div>
</section>
<section id="ods-vs-dw" class="level3">
<h3 class="anchored" data-anchor-id="ods-vs-dw">4. ODS vs DW</h3>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-15-16-42.png" class="img-fluid"></p>
</section>
</section>
<section id="cdcchange-data-capture" class="level2">
<h2 class="anchored" data-anchor-id="cdcchange-data-capture">CDC(change data capture)</h2>
<section id="cdc-개념-및-특징" class="level3">
<h3 class="anchored" data-anchor-id="cdc-개념-및-특징">1. CDC 개념 및 특징</h3>
<ul>
<li>데이터 변경을 감지하고, 변경된 데이터를 추출하는 기술</li>
<li>하드웨어 계층부터 어플리케이션 계층까지 다양한 수준에서 적용 가능</li>
</ul>
</section>
<section id="cdc-구현-기법" class="level3">
<h3 class="anchored" data-anchor-id="cdc-구현-기법">2. CDC 구현 기법</h3>
<ol type="1">
<li><code>Time Stamp on Rows</code></li>
<li><code>Version Numbers on Rows</code>: 참조테이블을 같이 사용하는게 일반적이라고 한다.</li>
<li><code>Status on Rows</code>: time stamp, version number 보완 용도로, 사람이 레코드 반영 여부를 직접 판단할 수 있게 적용할 수 있음</li>
<li><code>Time/Version/Status on Rows</code></li>
<li><code>Triggers on Tables</code>: message queue로 변경 발생시 subscribe 된 대상에 publish하는 방식. 시스템 관리 복잡도가 높아짐</li>
<li><code>Event Programming</code>: 어플리케이션에 데이터 변경 식별 기능을 추가</li>
<li><code>Log Scanner on Database</code>: 데이터 스키마 변경 불필요, 어플리케이션 영향 최소화, 지연시간 최소화</li>
</ol>
</section>
<section id="cdc-구현-방식" class="level3">
<h3 class="anchored" data-anchor-id="cdc-구현-방식">3. CDC 구현 방식</h3>
<ul>
<li><code>Push</code>: 데이터 원천에서 변경 식별(agent)</li>
<li><code>Pull</code>: 대상 시스템에서 원천을 주기적으로 모니터링</li>
</ul>
</section>
</section>
<section id="eai" class="level2">
<h2 class="anchored" data-anchor-id="eai">EAI</h2>
<section id="eai의-개념-및-특징" class="level3">
<h3 class="anchored" data-anchor-id="eai의-개념-및-특징">1. EAI의 개념 및 특징</h3>
<ul>
<li>기업 내 혹은 기업 간 정보시스템을 연계하여 동기화.</li>
<li>ETL은 <code>batch 처리</code> 중심, EAI는 <code>실시간 혹은 근접 실시간 처리</code> 중심</li>
</ul>
</section>
<section id="데이터-연계-방식" class="level3">
<h3 class="anchored" data-anchor-id="데이터-연계-방식">2. 데이터 연계 방식</h3>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-16-02-51.png" class="img-fluid"></p>
<ul>
<li>ETL/CDC는 운영 데이터와 분석을 위한 데이터베이스가 <code>구분</code>되지만, EAI는 <code>그냥 통합</code></li>
</ul>
</section>
<section id="eai-구성요소" class="level3">
<h3 class="anchored" data-anchor-id="eai-구성요소">3. EAI 구성요소</h3>
<ul>
<li><code>Adapter</code>: 시스템 간 데이터 변환</li>
<li><code>Broker</code>: 데이터 전송</li>
<li><code>Bus</code>: 데이터 전송 경로 설정</li>
<li><code>Transformer</code>: 데이터 형식 변환</li>
</ul>
</section>
<section id="eai-구현-유형" class="level3">
<h3 class="anchored" data-anchor-id="eai-구현-유형">4. EAI 구현 유형</h3>
<ol type="1">
<li><code>Mediation</code>: Publish/Subscribe 방식</li>
<li><code>Federaion</code>: Request/Reply 방식</li>
</ol>
</section>
<section id="eai-활용-효과" class="level3">
<h3 class="anchored" data-anchor-id="eai-활용-효과">5. EAI 활용 효과</h3>
<ul>
<li>협력사, 파트너, 고객과의 상호 협력 프로세스 연계</li>
<li>그룹 및 지주 회사 계열사들 간 상호 관련 데이터 동기화 등을 위한 데이터 표준화 기반 제공</li>
</ul>
</section>
<section id="eai-vs-esb" class="level3">
<h3 class="anchored" data-anchor-id="eai-vs-esb">6. EAI vs ESB</h3>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-16-13-57.png" class="img-fluid"></p>
<p><a href="https://bcho.tistory.com/1292">추가적인 자료</a></p>
</section>
</section>
<section id="데이터-통합-및-연계-기법" class="level2">
<h2 class="anchored" data-anchor-id="데이터-통합-및-연계-기법">데이터 통합 및 연계 기법</h2>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-16-32-24.png" class="img-fluid"></p>
<ul>
<li>빅데이터는 시각화도 하고, NoSQL 같은 환경에서도 사용한다.</li>
</ul>
</section>
<section id="대용량의-비정형-데이터-처리-방법" class="level2">
<h2 class="anchored" data-anchor-id="대용량의-비정형-데이터-처리-방법">대용량의 비정형 데이터 처리 방법</h2>
<section id="대규모-분산-병렬-처리" class="level3">
<h3 class="anchored" data-anchor-id="대규모-분산-병렬-처리">2. 대규모 분산 병렬 처리</h3>
<ul>
<li><code>하둡</code>:
<ul>
<li><code>MapReduce</code>와 <code>HDFS</code>를 기반으로 한 분산 병렬 처리 프레임워크</li>
<li><code>비공유 분산 아키텍쳐</code></li>
<li>선형적인 성능과 용량 확장</li>
<li>MapReduce failover</li>
</ul></li>
</ul>
<section id="hadoop-ecosystem" class="level4">
<h4 class="anchored" data-anchor-id="hadoop-ecosystem">Hadoop ecosystem</h4>
</section>
</section>
<section id="데이터-연동" class="level3">
<h3 class="anchored" data-anchor-id="데이터-연동">3. 데이터 연동</h3>
<p>대규모 연산을 데이터베이스에서 처리하기 어렵기 때문에, 하둡으로 복사해와서 MapReduce 연산 후, 결과를 다시 데이터베이스에 기록하기 위해 스쿱 사용</p>
<ul>
<li><code>Sqoop</code>
<ul>
<li>JDBC를 지원하는 RDBMS, Hbase와 Hadoop 간 데이터 전송(Import, Export)</li>
<li>SQL 질의로 데이터 추출</li>
<li>MapReduce 사용</li>
</ul></li>
</ul>
</section>
<section id="데이터-질의-기술" class="level3">
<h3 class="anchored" data-anchor-id="데이터-질의-기술">4. 데이터 질의 기술</h3>
<ul>
<li><code>Hive</code>: SQL 질의, batch 처리</li>
<li><code>SQL on Hadoop</code>: SQL 질의, 실시간 처리
<ul>
<li>apache Drill, Stinger, Shark, Tajo, Impala, HAWQ, Presto</li>
</ul></li>
</ul>
<ol type="1">
<li><p>3</p></li>
<li><p>3 (2)</p></li>
<li><p>3 (?) (2)</p></li>
<li><p>3 (2)</p></li>
<li><p>4</p></li>
<li><p>3 (구글이 처음 고안한 기술?)</p></li>
<li><p>2 (3은 뭐야)</p></li>
<li><p>1</p></li>
<li><p>1</p></li>
<li><p>4</p></li>
<li><p>4</p></li>
<li><p>1</p></li>
<li><p>3</p></li>
<li><p>2</p></li>
<li><p>3</p></li>
<li><p>4</p></li>
<li><p>3 (4)</p></li>
<li><p>2</p></li>
<li><p>1</p></li>
<li><p>2</p></li>
<li><p>extract</p></li>
<li><p>영속성 / 비 휘발성</p></li>
<li><p>EAI</p></li>
<li><p>로그</p></li>
<li><p>멥 리듀스</p></li>
<li><p>스쿱</p></li>
<li><p>hive</p></li>
<li><p>페이스북 스크라이브 (프레스토)</p></li>
<li><p>ODC</p></li>
<li><p>스노우 플레이크 스키마</p></li>
</ol>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/03.html</guid>
  <pubDate>Fri, 07 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>2 - 데이터 처리 기술</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/04.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="분산-데이터-저장-기술" class="level2">
<h2 class="anchored" data-anchor-id="분산-데이터-저장-기술">분산 데이터 저장 기술</h2>
<section id="분산-파일-시스템" class="level3">
<h3 class="anchored" data-anchor-id="분산-파일-시스템">1. 분산 파일 시스템</h3>
<ul>
<li><code>GFS(Google File System)</code>: 구글의 분산 파일 시스템</li>
<li><code>HDFS(Hadoop Distributed File System)</code>: 아파치 하둡의 분산 파일 시스템</li>
<li><code>Lustre</code>: 고성능 컴퓨팅을 위한 분산 파일 시스템</li>
</ul>
</section>
<section id="데이터베이스-클러스터" class="level3">
<h3 class="anchored" data-anchor-id="데이터베이스-클러스터">2. 데이터베이스 클러스터</h3>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<ul>
<li>무공유 디스크
<ul>
<li>각 노드가 완전히 분리된 데이터를 가짐</li>
<li>Oracle RAC를 제외한 대부분의 클러스터가 채택</li>
<li>노드 확장에 제한이 없음</li>
</ul></li>
<li>공유 디스크
<ul>
<li>SAN과 같은 네트워크로 모든 노드가 디스크 공유</li>
<li>노드 확장시 디스크 병목현상 고려 필요</li>
</ul></li>
</ul>
</div>
</div>
</div>
<ol type="1">
<li>Orace RAC 데이터베이스 서버</li>
<li>IBM DB2 ICE(integrated cluster environment)</li>
<li>마이크로소프트 SQL Server</li>
<li>MySQL</li>
</ol>
</section>
<section id="nosql" class="level3">
<h3 class="anchored" data-anchor-id="nosql">3. NoSQL</h3>
<ol type="1">
<li>Google BigTable</li>
<li>HBase</li>
<li>Amazon SimpleDB</li>
<li>마이크로소프트 SSDS</li>
</ol>
</section>
</section>
<section id="분산-컴퓨팅-기술" class="level2">
<h2 class="anchored" data-anchor-id="분산-컴퓨팅-기술">분산 컴퓨팅 기술</h2>
<section id="mapreduce" class="level3">
<h3 class="anchored" data-anchor-id="mapreduce">1. MapReduce</h3>
<ul>
<li>대용량 데이터를 분산 처리할 수 있는 모델</li>
<li>보통 6MB를 기준으로 데이터 분할</li>
</ul>
<ol type="1">
<li>Google MapReduce</li>
<li>Hadoop MapReduce</li>
</ol>
</section>
<section id="병렬-쿼리-시스템" class="level3">
<h3 class="anchored" data-anchor-id="병렬-쿼리-시스템">2. 병렬 쿼리 시스템</h3>
</section>
<section id="sql-on-hadoop" class="level3">
<h3 class="anchored" data-anchor-id="sql-on-hadoop">3. SQL on Hadoop</h3>
</section>
</section>
<section id="클라우드-인프라-기술" class="level2">
<h2 class="anchored" data-anchor-id="클라우드-인프라-기술">클라우드 인프라 기술</h2>
<section id="클라우드-컴퓨팅" class="level3">
<h3 class="anchored" data-anchor-id="클라우드-컴퓨팅">1. 클라우드 컴퓨팅</h3>
</section>
<section id="cpu-가상화" class="level3">
<h3 class="anchored" data-anchor-id="cpu-가상화">2. CPU 가상화</h3>
</section>
<section id="메모리-가상화" class="level3">
<h3 class="anchored" data-anchor-id="메모리-가상화">3. 메모리 가상화</h3>
</section>
<section id="io-가상화" class="level3">
<h3 class="anchored" data-anchor-id="io-가상화">4. I/O 가상화</h3>
<ol type="1">
<li><p>3</p></li>
<li><p>2</p></li>
<li><p>1</p></li>
<li><p>1</p></li>
<li><p>4</p></li>
<li><p>3</p></li>
<li><p>2</p></li>
<li><p>=&gt; 3</p></li>
<li><p>2</p></li>
<li><p>3</p></li>
<li><p>4</p></li>
<li><p>3</p></li>
<li><p>3(?) =&gt; 4</p></li>
<li><p>1</p></li>
<li><p>4 (1번 뭐임) =&gt;3</p></li>
<li><p>2</p></li>
<li><p>4</p></li>
<li><p>2</p></li>
<li><p>4</p></li>
<li><p>1</p></li>
<li><p>chunk</p></li>
<li><p>master node</p></li>
<li><p>HDFS</p></li>
<li><p>lusture</p></li>
<li><p>mysql</p></li>
<li><p>item? =&gt; entity</p></li>
<li><p>가상화</p></li>
<li><p>컨테이너</p></li>
<li><p>병목</p></li>
<li><p>hypervisor</p></li>
</ol>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/04.html</guid>
  <pubDate>Fri, 07 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>성적 장학금</title>
  <link>https://cryscham123.github.io/posts/01_projects/bs_3_1/notes/scholarships/2.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<p><img src="https://cryscham123.github.io/posts/01_projects/bs_3_1/notes/scholarships/img/2025-02-05-20-38-17.png" class="img-fluid"></p>
<p>오~예~ (남은 등록금 300만원을 대출 받으며)</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>장학금</category>
  <guid>https://cryscham123.github.io/posts/01_projects/bs_3_1/notes/scholarships/2.html</guid>
  <pubDate>Tue, 04 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>통계 기초</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/통계/01.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="결정론적-vs-통계적-의사결정" class="level2">
<h2 class="anchored" data-anchor-id="결정론적-vs-통계적-의사결정">결정론적 vs 통계적 의사결정</h2>
<p>우리가 일상생활에서 무의식적으로 사용하는 것은 결정론적 의사결정이다.</p>
<p>변화의 원인을 결정론적으로 확신하는 것이 결정론적 의사결정이다.</p>
<p>어떤 사건이 우연히 발생할 확률을 묻는 것으로 시작하는 것이 통계적 의사결정이다.</p>
</section>
<section id="통계의-본질" class="level2">
<h2 class="anchored" data-anchor-id="통계의-본질">통계의 본질</h2>
<p>데이터를 설명하는 대표적인 특징이 평균과 분산, 중앙값, 최빈값, … 이다.</p>
<ol type="1">
<li>중심 경향성: 평균, 중앙값, 최빈값</li>
<li>산포도: 분산, 표준편차, 사분위수, 변동계수</li>
</ol>
<p>이 중 평균, 분산이 계산하기 쉽고, 좋은 추정값이 된다.</p>
<p>통계는 분산의 마법이다.</p>
</section>
<section id="what-is-p-value" class="level2">
<h2 class="anchored" data-anchor-id="what-is-p-value">what is p-value</h2>
<p>어떤 사건이 우연히 발생할 확률</p>
<p>p-value가 0.05보다 작다 = 어떤 사건이 우연히 발생할 확률이 낮다 = 우연이 아니다.</p>
</section>
<section id="통계적-가설검정" class="level2">
<h2 class="anchored" data-anchor-id="통계적-가설검정">통계적 가설검정</h2>
<ul>
<li><p>귀무가설(Null Hypothesis, <img src="https://latex.codecogs.com/png.latex?H_0">): 기존의 주장</p></li>
<li><p>대립가설(Alternative Hypothesis, <img src="https://latex.codecogs.com/png.latex?H_1">): 새로운 주장</p></li>
<li><p>p-value가 0.05보다 작다: <img src="https://latex.codecogs.com/png.latex?H_1"> 채택, <img src="https://latex.codecogs.com/png.latex?H_0">이 실제로 참일 경우: 1종 오류</p></li>
<li><p>p-value가 0.05보다 크다: <img src="https://latex.codecogs.com/png.latex?H_0"> 채택, <img src="https://latex.codecogs.com/png.latex?H_1">이 실제로 참일 경우: 2종 오류</p></li>
</ul>
</section>
<section id="변수와-데이터" class="level2">
<h2 class="anchored" data-anchor-id="변수와-데이터">변수와 데이터</h2>
<ol type="1">
<li>이산/범주형 변수
<ul>
<li>명목변수</li>
<li>순위변수</li>
</ul></li>
<li>연속형 변수
<ul>
<li>구간 변수</li>
<li>비율 변수</li>
</ul></li>
</ol>
</section>
<section id="상관관계와-상관계수" class="level2">
<h2 class="anchored" data-anchor-id="상관관계와-상관계수">상관관계와 상관계수</h2>
<p>상관관계: 한 변수와 다른 변수가 공변하는 함수관계 - 상관계수는 힘(0~1), 방향(+,-)을 나타냄 - scatter plot에서 데이터가 모여있으면 상관계수가 높고, 흩어져 있으면 상관계수가 낮다(공 모양). - 상관계수의 힘은 점이 모여있는 정도를 나타내고, 각도(방향)와는 관련이 없다. - 단, 직선이 완벽히 수평이면 상관계수는 0이다. - 직선 관계만 알 수 있다.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>통계</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/통계/01.html</guid>
  <pubDate>Mon, 03 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>통계 기초</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/통계/02.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="t-test" class="level2">
<h2 class="anchored" data-anchor-id="t-test">t-test</h2>
<p>모집단의 표준편차가 알려지지 않았을 때, 정규분포의 모집단에서 추출된 표본의 평균값에 대한 가설검정 방법</p>
<p>목적: 두개의 집단이 같은지 다른지 비교하기 위해 사용</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>통계</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/통계/02.html</guid>
  <pubDate>Mon, 03 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>1 - 데이터의 가치와 미래</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/01.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="빅데이터의-이해" class="level2">
<h2 class="anchored" data-anchor-id="빅데이터의-이해">빅데이터의 이해</h2>
<section id="빅데이터의-정의" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터의-정의">1. 빅데이터의 정의</h3>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-12-15-57.png" class="img-fluid"></p>
<ul>
<li>좁은 범위
<ul>
<li>데이터 자체의 특성에 초점을 맞춘 정의</li>
<li><code>3V(다양성, 속도, 규모)</code>를 강조</li>
</ul></li>
<li>중간 범위
<ul>
<li>데이터 자체뿐 아니라 처리, 분석 방법도 포함하는 정의</li>
</ul></li>
<li>넓은 관점
<ul>
<li>인재, 조직 변화까지 포함한 정의</li>
</ul></li>
</ul>
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-12-16-09.png" class="img-fluid"></p>
<p>∴ 기존 방식으로는 얻을 수 없는 통찰 및 가치 창출</p>
</section>
<section id="출현-배경과-변화" class="level3">
<h3 class="anchored" data-anchor-id="출현-배경과-변화">2. 출현 배경과 변화</h3>
<ol type="1">
<li>산업계: 고객 데이터가 축적되며 새로운 가치 활용</li>
<li>학계: 거대 데이터 활용 분야가 늘어나며 통계 도구들이 발전</li>
<li>기술발전: 관련기술의 발전</li>
</ol>
</section>
<section id="빅데이터의-기능" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터의-기능">3. 빅데이터의 기능</h3>
<ol type="1">
<li><code>산업혁명의 석탄, 철</code>: 산업 전반에 혁명적 변화를 가져옴</li>
<li><code>21세기의 원유</code>: 생산성을 향상시키고, 기존에 없던 새로운 범주의 산업을 만들어낼 것으로 전망</li>
<li><code>렌즈</code>: 데이터가 산업에 영향을 미침</li>
<li><code>플랫폼</code></li>
</ol>
</section>
<section id="빅데이터가-만들어-내는-본질적인-변화" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터가-만들어-내는-본질적인-변화">4. 빅데이터가 만들어 내는 본질적인 변화</h3>
<ol type="1">
<li><code>사전처리 → 사후처리</code></li>
<li><code>표본조사 → 전수조사</code></li>
<li><code>질 → 양</code></li>
<li><code>인과관계 → 상관관계</code></li>
</ol>
</section>
</section>
<section id="빅데이터의-가치와-영향" class="level2">
<h2 class="anchored" data-anchor-id="빅데이터의-가치와-영향">빅데이터의 가치와 영향</h2>
<section id="빅데이터의-가치" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터의-가치">1. 빅데이터의 가치</h3>
<p>빅데이터는 아래와 같은 이유로 가치 선정이 어렵다.</p>
<ul>
<li>데이터 활용방식: 데이터를 언제 어디서 누가 사용할지 미리 예측하기 어려움</li>
<li>새로운 가치 창출: 기존에 없던 가치를 창출하기 때문에 가치를 예측하기 어려움</li>
<li>분석 기술 발전: 현재 가치가 없더라도, 추후 기술이 발전하면 가치가 생길 수 있음</li>
</ul>
</section>
<section id="빅데이터의-영향" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터의-영향">2. 빅데이터의 영향</h3>
<p>빅데이터는 다양한 주체(기업, 정부, 개인)에 영향을 미친다.</p>
</section>
</section>
<section id="비즈니스-모델" class="level2">
<h2 class="anchored" data-anchor-id="비즈니스-모델">비즈니스 모델</h2>
<section id="빅데이터-활용-사례" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터-활용-사례">1. 빅데이터 활용 사례</h3>
<p>여러가지 활용 사례가 있다.</p>
</section>
<section id="빅데이터-활용-기본-테크닉" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터-활용-기본-테크닉">2. 빅데이터 활용 기본 테크닉</h3>
<ul>
<li><code>연관규칙학습</code>: 범주형 데이터의 변인들간의 규칙을 발견. 비지도 학습 (ex. 장바구니 분석)</li>
<li><code>유형(군집)분석</code>: 데이터를 분류하거나 군집화. 비지도 학습 (not 분류분석)</li>
<li><code>유전자 알고리즘</code>: 최적해를 찾는 알고리즘</li>
<li><code>기계학습</code>: 훈련한 데이터로 예측</li>
<li><code>회귀분석</code>: 연속형 데이터의 독립변수와 종속변수의 관계를 수학적으로 모델링해서 예측</li>
<li><code>감정분석</code>: 비정형 데이터 분석</li>
<li><code>소셜네트워크분석(사회관계망분석)</code>: 비정형 데이터 분석</li>
</ul>
</section>
</section>
<section id="위기-요인과-통제-방안" class="level2">
<h2 class="anchored" data-anchor-id="위기-요인과-통제-방안">위기 요인과 통제 방안</h2>
<section id="빅데이터-시대의-위기-요인과-통제-방안" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터-시대의-위기-요인과-통제-방안">1. 빅데이터 시대의 위기 요인과 통제 방안</h3>
<ul>
<li><code>사생활 침해</code>: 동의에서 책임으로</li>
<li><code>책임 원칙 훼손</code>: 결과 기반 책임 원칙 고수</li>
<li><code>데이터 오용</code>: 알고리즘 접근 허용, <code>알고리즈미스트</code></li>
</ul>
</section>
</section>
<section id="미래의-빅데이터" class="level2">
<h2 class="anchored" data-anchor-id="미래의-빅데이터">미래의 빅데이터</h2>
<section id="빅데이터-활용의-3요소" class="level3">
<h3 class="anchored" data-anchor-id="빅데이터-활용의-3요소">1. 빅데이터 활용의 3요소</h3>
<ul>
<li><code>데이터</code>: 모든것의 데이터화</li>
<li><code>기술</code>: 인공지능</li>
<li><code>인력</code>: 데이터 사이언티스트, 알고리즈미스트</li>
</ul>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/01.html</guid>
  <pubDate>Mon, 03 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>1 - 데이터 이해</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/00.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="데이터와-정보" class="level2">
<h2 class="anchored" data-anchor-id="데이터와-정보">데이터와 정보</h2>
<section id="데이터" class="level3">
<h3 class="anchored" data-anchor-id="데이터">1. 데이터</h3>
<ul>
<li><code>객관적 사실</code>을 나타내는 <code>존재적 특성</code>과, <code>추론 예측 전망 추정을 위한 근거</code>가 되는 <code>당위적 특성</code>을 모두 포함하는 개념</li>
<li>단위: <code>바이트(byte)</code>, <code>킬로바이트(KB)</code>, <code>메가바이트(MB)</code>, <code>기가바이트(GB)</code>, <code>테라바이트(TB)</code>, <code>페타바이트(PB)</code>, <code>엑사바이트(EB)</code>, <code>제타바이트(ZB)</code>, <code>요타바이트(YB)</code></li>
<li>유형:
<ul>
<li><code>정성적 데이터</code>: 비정형 데이터, 주관적 내용, 통계분석이 어려움</li>
<li><code>정량적 데이터</code>: 정형 데이터, 객관적 내용, 통계분석이 용이함</li>
</ul></li>
<li>지식 경영의 핵심 이슈인 <code>암묵지</code>와 <code>형식지</code>를 연결하는 역할을 함</li>
</ul>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<ul>
<li><code>정형</code> 데이터: 표 형태로 정리된 데이터</li>
<li><code>반정형</code> 데이터: HTML, XML, JSON 등의 형태(스키마, 메타데이터)가 있고, 연산이 불가능한 데이터</li>
<li><code>비정형</code> 데이터: 형태가 없고, 연산이 불가능한 데이터</li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<ul>
<li>암묵지:
<ul>
<li>학습과 경험을 통해 개인에게 체화되어 잇지만 겉으로 드러나지 않는 지식</li>
<li>개인에게 축적된 <code>내면화</code>된 지식 → 조직의 지식으로 <code>공통화</code></li>
</ul></li>
<li>형식지:
<ul>
<li>문서나 메뉴얼처럼 형상화된 지식</li>
<li>언어, 기호, 숫자로 <code>표출화</code>된 지식 → 개인의 지식으로 <code>연결화</code></li>
</ul></li>
</ul>
<p>∴ 내면화 → 공통화 → 표출화 → 연결화 → 내면화</p>
</div>
</div>
</div>
</section>
<section id="데이터와-정보의-관계" class="level3">
<h3 class="anchored" data-anchor-id="데이터와-정보의-관계">2. 데이터와 정보의 관계</h3>
<ul>
<li><p><code>데이터(data)</code>: 그 자체로는 의미가 중요하지 않은 객관적인 사실</p>
<p>ex) A마트는 100원, B마트는 200원에 휴지를 판다.</p></li>
<li><p><code>정보(information)</code>: 데이터를 가공하여 의미를 부여한 결과물</p>
<p>ex) A마트가 100원에 판 휴지는 B마트보다 100원 싸다.</p></li>
<li><p><code>지식(knowledge)</code>: 정보를 구조화하여 유의미한 정보를 분류하고 <code>개인적인 경험을 결합</code>시켜 고유의 지식으로 <code>내재화</code>된 것</p>
<p>ex) 가격이 더 저렴한 A마트에 가서 휴지를 사야겠다.</p></li>
<li><p><code>지혜(wisdom)</code>: 지식의 축적과 아이디어가 결합된 창의적인 결과물</p>
<p>ex) A마트의 다른 물건도 B마트보다 저렴할 것이다.</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-11-19-56.png" class="img-fluid figure-img"></p>
<figcaption>DIKW 피라미드</figcaption>
</figure>
</div>
</section>
</section>
<section id="데이터베이스-정의와-특징" class="level2">
<h2 class="anchored" data-anchor-id="데이터베이스-정의와-특징">데이터베이스 정의와 특징</h2>
<section id="데이터베이스의-정의" class="level3">
<h3 class="anchored" data-anchor-id="데이터베이스의-정의">1. 데이터베이스의 정의</h3>
<p>기존에는 정형 데이터 관리의 의미로 사용되다가, 빅데이터의 출현으로 비정형 데이터까지 포함하는 개념으로 확장됨</p>
</section>
<section id="데이터베이스의-일반적인-특징" class="level3">
<h3 class="anchored" data-anchor-id="데이터베이스의-일반적인-특징">2. 데이터베이스의 일반적인 특징</h3>
<ol type="1">
<li><code>통합된 데이터</code>: 동일한 내용의 데이터가 중복되어 있지 않다.</li>
<li><code>저장된 데이터</code></li>
<li><code>공용 데이터</code></li>
<li><code>변화되는 데이터</code>: 데이터베이스에는 항상 현재의 정확한 데이터를 유지한다.</li>
</ol>
</section>
</section>
<section id="데이터베이스의-활용" class="level2">
<h2 class="anchored" data-anchor-id="데이터베이스의-활용">데이터베이스의 활용</h2>
<section id="년대-기업-내부-데이터베이스" class="level3">
<h3 class="anchored" data-anchor-id="년대-기업-내부-데이터베이스">1. 1980년대 기업 내부 데이터베이스</h3>
<ul>
<li><code>OLTP(On-Line Transaction Processing)</code>
<ul>
<li>데이터베이스의 데이터를 실시간으로 <code>갱신</code>하는 프로세싱.</li>
<li><code>구조가 복잡</code>하고, <code>현재의 단기간</code> 데이터.</li>
<li><code>갱신이 동적</code>이고, <code>엑세스 빈도가 높다</code>.</li>
<li><code>질의가 단순하고, 주기적</code>이다.</li>
</ul></li>
<li><code>OLAP(On-Line Analytical Processing)</code>
<ul>
<li>데이터 <code>조회, 분석</code> 위주.</li>
<li><code>구조가 단순</code>하고, <code>과거의 장기간 요약</code> 데이터.</li>
<li><code>갱신이 정적</code>이고, <code>엑세스 빈도가 보통이다</code>.</li>
<li><code>질의가 복잡하다</code>.</li>
</ul></li>
</ul>
</section>
<section id="년대-기업-내부-데이터베이스-1" class="level3">
<h3 class="anchored" data-anchor-id="년대-기업-내부-데이터베이스-1">2. 2000년대 기업 내부 데이터베이스</h3>
<ul>
<li><code>CRM(Customer Relationship Management)</code>: 고객 관리 시스템</li>
<li><code>SCM(Supply Chain Management)</code>: 공급망 관리 시스템</li>
</ul>
</section>
<section id="각-분야별-내부-데이터베이스" class="level3">
<h3 class="anchored" data-anchor-id="각-분야별-내부-데이터베이스">3. 각 분야별 내부 데이터베이스</h3>
<ul>
<li>제조부문
<ul>
<li><code>ERP(Enterprise Resource Planning)</code>: 기업 내부 자료를 하나의 통합 시스템으로 재구축</li>
<li><code>BI(Business Intelligence)</code>: 기업의 수많은 데이터를 정리, 분석해 의사결정에 활용하는 프로세스</li>
<li>CRM</li>
<li><code>RTE(Real-Time Enterprise)</code>: ERP, SCM, CRM 등의 부문별 전산화 시스템을 하나로 통합</li>
</ul></li>
<li>금융부문
<ul>
<li><code>EAI(Enterprise Application Integration)</code></li>
<li><code>EDW(Enterprise Data Warehouse)</code>: BPR, CRM, BSC 등의다양한 분석 시스템을 위한 원천</li>
</ul></li>
<li>유통부문
<ul>
<li><code>KMS(Knowledge Management System)</code></li>
<li><code>RFID(Radio Frequency Identification)</code>: 주파수를 이용해 ID를 식별</li>
</ul></li>
</ul>
</section>
<section id="사회기반구조로서의-데이터베이스" class="level3">
<h3 class="anchored" data-anchor-id="사회기반구조로서의-데이터베이스">4. 사회기반구조로서의 데이터베이스</h3>
<ul>
<li><code>EDI(Electronic Data Interchange)</code>: 전자상거래를 위한 표준화된 데이터 포맷</li>
<li><code>VAN(Value Added Network)</code>: EDI를 위한 통신망 (카드 결제 시, 가맹점과 카드사 사이에서 승인 요청 및 결과 전달을 중계함.)</li>
<li><code>CALS(Commerce At Light Speed)</code>: 제품의 설계, 생산, 유통, 판매 등의 모든 과정을 통합한 경영정보시스템</li>
</ul>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/00.html</guid>
  <pubDate>Mon, 03 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>1 - 가치 창조를 위한 데이터 사이언스와 전략 인사이트</title>
  <link>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/02.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="빅데이터-분석과-전략-인사이트" class="level2">
<h2 class="anchored" data-anchor-id="빅데이터-분석과-전략-인사이트">빅데이터 분석과 전략 인사이트</h2>
<p>빅테이터 분석은 분석을 통해 <code>가치를 창출</code>하는 것이 목적이다.</p>
<ul>
<li>일차원적인 분석: 해당 부서나 업무 영역에만 효과가 있다. 변화하는 환경에서 새로운 기회를 포착하기 어려움.</li>
<li>전략도출 가치기반 분석: 일차원적인 분석을 통해 얻은 가치를 기반으로 활용 범위를 더 넓고 전략적으로 확장해야한다.</li>
</ul>
</section>
<section id="전략-인사이트-도출을-위한-필요-역량" class="level2">
<h2 class="anchored" data-anchor-id="전략-인사이트-도출을-위한-필요-역량">전략 인사이트 도출을 위한 필요 역량</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/img/2025-02-08-12-48-06.png" class="img-fluid figure-img"></p>
<figcaption>데이터 사이언티스트의 요구 역량</figcaption>
</figure>
</div>
<p><code>외부 환경</code>이 다음과 같이 <code>변화</code>함에 따라 인사이트 도출을 위한 <code>인문학적 역량</code>이 요구됨.</p>
<ul>
<li><code>컨버전스 → 디버전스</code></li>
<li><code>생산 → 서비스</code></li>
<li><code>생상 → 시장창조</code></li>
</ul>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>adp</category>
  <guid>https://cryscham123.github.io/posts/01_projects/adp_필기/notes/adp_자습서/02.html</guid>
  <pubDate>Mon, 03 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>인간 관계론 - 데일 카네기</title>
  <link>https://cryscham123.github.io/posts/00_inboxes/notes/01.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://contents.kyobobook.co.kr/sih/fit-in/458x0/pdt/9791164459667.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:30.0%"></p>
</figure>
</div>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>도서 <a href="https://product.kyobobook.co.kr/detail/S000213900397">인간 관계론</a> 정리 노트입니다.</p>
</div>
</div>
</div>
<section id="사람을-대하는-기본-기술" class="level2">
<h2 class="anchored" data-anchor-id="사람을-대하는-기본-기술">사람을 대하는 기본 기술</h2>
<section id="꿀을-얻으려면-벌집을-걷어차지-마라" class="level3">
<h3 class="anchored" data-anchor-id="꿀을-얻으려면-벌집을-걷어차지-마라">꿀을 얻으려면 벌집을 걷어차지 마라</h3>
<p>남을 비난하고 원망하며 불평하는 것은 어떤 바보라도 할 수 있다. 실제로 바보들은 그렇게 한다. 하지만 남을 이해하고 용서하려면 인격과 자제력이 필요하다.</p>
<p><code>사람을 비난하는 대신 그들을 이해하려고 노력해 보자</code>. 그들이 왜 그런 행동을 하는지 곰곰이 생각해 보자. 그편이 비난하는 것보다 훨씬 이롭고 흥미롭다.</p>
</section>
<section id="사람을-대하는-핵심-비결" class="level3">
<h3 class="anchored" data-anchor-id="사람을-대하는-핵심-비결">사람을 대하는 핵심 비결</h3>
<p>누군가에게 어떤 일을 하게 만드는 방법은 상대방이 그 일을 하고 싶게 만드는 것 뿐이다. 강제적인 방법들은 반드시 역효과를 일으킨다.</p>
<p>타인에게 어떤 일을 하게 하려면 그 사람이 원하는 것을 주는 방법밖에 없다. <code>인간의 본성이 지닌 가장 깊은 충동이 바로 중요한 사람이 되고자 하는 욕망이다.</code></p>
<p>이러한 갈망을 제대로 충족시켜 주는 사람은 다른 사람의 마음을 사로잡을 수 있다. <code>타인을 진실된 마음으로 칭찬하자.</code> 이는 이기적이고 거짓인 아첨과는 다르다.</p>
</section>
<section id="이-일을-해내는-사람은-세상을-얻을-것이고-그렇지-못한-사람은-외로운-길을-걸을-것이다." class="level3">
<h3 class="anchored" data-anchor-id="이-일을-해내는-사람은-세상을-얻을-것이고-그렇지-못한-사람은-외로운-길을-걸을-것이다.">이 일을 해내는 사람은 세상을 얻을 것이고, 그렇지 못한 사람은 외로운 길을 걸을 것이다.</h3>
<p><code>상대방에게 영향을 미치는  방법은 그사람이 원하는 것을 이야기하고, 이를 얻는 방법을 보여 주는 것이다.</code></p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>…이 부분 예시로 드는 것들이 조금 오버스럽다고 느껴진다.<br>
문화가 달라서 그런가? 아니면 번역 이슈인가?<br>
무슨 말을 하는진 알겠는데, 몇몇 부분은 별로 공감이 안 된다.</p>
</div>
</div>
</div>
</section>
</section>
<section id="사람들에게-호감을-얻는-6가지-방법" class="level2">
<h2 class="anchored" data-anchor-id="사람들에게-호감을-얻는-6가지-방법">사람들에게 호감을 얻는 6가지 방법</h2>
<section id="이렇게-하면-어디서든-환영받을-것이다." class="level3">
<h3 class="anchored" data-anchor-id="이렇게-하면-어디서든-환영받을-것이다.">이렇게 하면 어디서든 환영받을 것이다.</h3>
<p>다른 사람에게 관심이 없는 사람은 인생에서 가장 큰 어려움을 겪고, 다른 사람에게 가장 큰 상처를 준다. <code>상대방에게 진심으로 관심을 가져라</code></p>
</section>
<section id="좋은-첫인상을-남기는-간단한-방법" class="level3">
<h3 class="anchored" data-anchor-id="좋은-첫인상을-남기는-간단한-방법">좋은 첫인상을 남기는 간단한 방법</h3>
<p>미소를 지어라</p>
</section>
<section id="이렇게-하지-않으면-문제가-생길-것이다." class="level3">
<h3 class="anchored" data-anchor-id="이렇게-하지-않으면-문제가-생길-것이다.">이렇게 하지 않으면 문제가 생길 것이다.</h3>
<p>사람의 이름을 기억하라</p>
</section>
<section id="좋은-대화-상대가-되는-쉬운-방법" class="level3">
<h3 class="anchored" data-anchor-id="좋은-대화-상대가-되는-쉬운-방법">좋은 대화 상대가 되는 쉬운 방법</h3>
<p>상대의 이야기를 경청하고, 상대가 자신에 관해 이야기하도록 격려하라</p>
</section>
<section id="사람들의-관심을-얻는-방법" class="level3">
<h3 class="anchored" data-anchor-id="사람들의-관심을-얻는-방법">사람들의 관심을 얻는 방법</h3>
<p>상대방의 관심사에 대해 이야기하라</p>
</section>
<section id="사람들에게-즉시-호감을-얻는-방법" class="level3">
<h3 class="anchored" data-anchor-id="사람들에게-즉시-호감을-얻는-방법">사람들에게 즉시 호감을 얻는 방법</h3>
<p>모든 사람은 자신이 상대보다 우월하다고 생각한다. 항상 상대방이 자신을 중요하다고 느끼게 하라</p>
</section>
</section>
<section id="사람들의-마음을-사로잡는-12가지-방법" class="level2">
<h2 class="anchored" data-anchor-id="사람들의-마음을-사로잡는-12가지-방법">사람들의 마음을 사로잡는 12가지 방법</h2>
<section id="논쟁으로는-이길-수-없다" class="level3">
<h3 class="anchored" data-anchor-id="논쟁으로는-이길-수-없다">논쟁으로는 이길 수 없다</h3>
<p>자기 의사에 반하여 설득당한 사람은 여전히 자기 생각을 바꾸지 않는 법이다. 논쟁에서 최선의 결과를 얻는 유일한 방법은 논쟁을 피하는 것뿐이다.</p>
</section>
<section id="적을-만드는-확실한-방법과-이를-피하는-방법" class="level3">
<h3 class="anchored" data-anchor-id="적을-만드는-확실한-방법과-이를-피하는-방법">적을 만드는 확실한 방법과 이를 피하는 방법</h3>
<p>되도록 남들보다 지혜로운 사람이 되거라. 하지만 남들에게 그렇다고 말하지 않도록 해라.</p>
<p>상대가 틀린 말을 해도 굳이 지적하지 마라</p>
</section>
<section id="틀렸다면-인정하라" class="level3">
<h3 class="anchored" data-anchor-id="틀렸다면-인정하라">틀렸다면, 인정하라</h3>
<p>조금 잘못했는데, 상대가 비난할거 같으면 오바해서 자기 잘못을 시인하라</p>
</section>
<section id="이성에-호소하는-확실한-방법" class="level3">
<h3 class="anchored" data-anchor-id="이성에-호소하는-확실한-방법">이성에 호소하는 확실한 방법</h3>
<p>우호적인 방식으로 시작하라</p>
</section>
<section id="소크라테스의-비결" class="level3">
<h3 class="anchored" data-anchor-id="소크라테스의-비결">소크라테스의 비결</h3>
<p>상대방이 동의할 수 밖에 없는 질문을 유도하라.</p>
</section>
<section id="불만을-잠재우는-안전밸브" class="level3">
<h3 class="anchored" data-anchor-id="불만을-잠재우는-안전밸브">불만을 잠재우는 안전밸브</h3>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>독서</category>
  <category>인간 관계</category>
  <guid>https://cryscham123.github.io/posts/00_inboxes/notes/01.html</guid>
  <pubDate>Sat, 01 Feb 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>선형결합과 생성</title>
  <link>https://cryscham123.github.io/posts/02_areas/선형대수/notes/5.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/human-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="선형결합" class="level2">
<h2 class="anchored" data-anchor-id="선형결합">선형결합</h2>
<p>벡터들의 상수배 합으로 만들 수 있는 벡터의 집합</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>선형 대수</category>
  <guid>https://cryscham123.github.io/posts/02_areas/선형대수/notes/5.html</guid>
  <pubDate>Thu, 30 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>벡터와 공간</title>
  <link>https://cryscham123.github.io/posts/02_areas/선형대수/notes/4.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/human-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="what-is-vector" class="level2">
<h2 class="anchored" data-anchor-id="what-is-vector">what is vector</h2>
<p>vector는 크기(magnitude)와 방향(direction)을 가지고 있고, 2, 3, 4 차원 너머를 수학적으로 표현할 수 있다.</p>
<section id="vector의-수학적-표현" class="level3">
<h3 class="anchored" data-anchor-id="vector의-수학적-표현">vector의 수학적 표현</h3>
<p>vector는 ordered list인 tuple 형태로 표현할 수 있다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bv%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A3%20%5C%5C%0A4%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>domain과 dimension에 따라 vector는 다음과 같이 표현할 수 있다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bv%7D%20%E2%88%88%20R%5E2%0A"></p>
<ul>
<li>1차원: <img src="https://latex.codecogs.com/png.latex?R%5E1"></li>
<li>2차원: <img src="https://latex.codecogs.com/png.latex?R%5E2"></li>
<li>3차원: <img src="https://latex.codecogs.com/png.latex?R%5E3"></li>
<li>n차원: <img src="https://latex.codecogs.com/png.latex?R%5En"></li>
</ul>
</section>
</section>
<section id="vector의-합" class="level2">
<h2 class="anchored" data-anchor-id="vector의-합">vector의 합</h2>
<p>vector의 합은 각 성분별로 더한 결과를 반환한다.</p>
<section id="기하학적-의미" class="level3">
<h3 class="anchored" data-anchor-id="기하학적-의미">기하학적 의미</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A3%20%5C%5C%0A2%0A%5Cend%7Bbmatrix%7D%20+%0A%5Cbegin%7Bbmatrix%7D%0A-2%20%5C%5C%0A1%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>위의 수식을 좌표평면에 나타나면 다음과 같다.</p>
<div id="c919db24" class="cell" data-execution_count="1">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/선형대수/notes/4_files/figure-html/cell-2-output-1.png" width="591" height="434" class="figure-img"></p>
</figure>
</div>
</div>
</div>
<p>끝점을 다 더한 좌표와 시작 점을 연결한 벡터인 <code>초록색 화살표</code>가 두 벡터의 합이 된다.</p>
</section>
</section>
<section id="vector의-scalar-곱" class="level2">
<h2 class="anchored" data-anchor-id="vector의-scalar-곱">vector의 scalar 곱</h2>
<p>vector에 scalar, 즉 숫자 하나를 곱하면 무슨 일이 생길까?</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A2%20*%20%5Cbegin%7Bbmatrix%7D%0A2%20%5C%5C%0A1%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A4%20%5C%5C%0A2%0A%5Cend%7Bbmatrix%7D%0A"> <img src="https://latex.codecogs.com/png.latex?%0A-2%20*%20%5Cbegin%7Bbmatrix%7D%0A2%20%5C%5C%0A1%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A-4%20%5C%5C%0A-2%0A%5Cend%7Bbmatrix%7D%0A"></p>
</section>
<section id="vector의-차" class="level2">
<h2 class="anchored" data-anchor-id="vector의-차">vector의 차</h2>
<p>vector의 차는 각 성분별로 뺀 결과를 반환한다.</p>
<p>기하학적으로는 두 벡터의 끝점을 연결한 벡터가 된다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bx%7D%20-%20%5Cvec%7By%7D">는 y에서 x를 연결한 벡터가 된다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cvec%7By%7D%20-%20%5Cvec%7Bx%7D">는 x에서 y를 연결한 벡터가 된다.</p>
</section>
<section id="단위-벡터" class="level2">
<h2 class="anchored" data-anchor-id="단위-벡터">단위 벡터</h2>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bv%7D%20=%20%5Cbegin%7Bbmatrix%7D%0A3%20%5C%5C%0A4%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>위의 벡터를 단위 벡터의 합으로 만들면 다음과 같다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7Bi%7D%20=%20%5Cbegin%7Bbmatrix%7D%0A1%20%5C%5C%0A0%0A%5Cend%7Bbmatrix%7D,%0A%5Chat%7Bj%7D%20=%20%5Cbegin%7Bbmatrix%7D%0A0%20%5C%5C%0A1%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bv%7D%20=%203%5Chat%7Bi%7D%20+%204%5Chat%7Bj%7D%0A"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Scalar 배를 한 기저 벡터끼리 더하면 모든 2차원 좌표를 표현할 수 있다.</p>
</div>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>선형 대수</category>
  <guid>https://cryscham123.github.io/posts/02_areas/선형대수/notes/4.html</guid>
  <pubDate>Wed, 29 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>cloud-1 코드 설명</title>
  <link>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/6.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">intro</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/42-outer-1.png" class="img-fluid figure-img"></p>
<figcaption>42 seoul outer 과제</figcaption>
</figure>
</div>
<p><a href="../../../../posts/02_areas/42_seoul/notes/5.html">개념 설명</a>에 이어서 진행하도록 하겠습니다.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>전체 코드는 <a href="https://github.com/cryscham123/cloud-1">github repo</a>에서 확인하실 수 있습니다.</p>
</div>
</div>
</div>
</section>
<section id="프로젝트-및-구현-설명" class="level2">
<h2 class="anchored" data-anchor-id="프로젝트-및-구현-설명">프로젝트 및 구현 설명</h2>
<section id="pre-requirements" class="level3">
<h3 class="anchored" data-anchor-id="pre-requirements">pre requirements</h3>
<p>이 프로젝트를 진행하기 위해 필요한 것들은 다음과 같습니다.</p>
<ul>
<li>AWS IAM 계정</li>
<li>Packer</li>
<li>Terraform</li>
<li>Ansible</li>
<li>jq</li>
<li>boto3</li>
</ul>
</section>
<section id="build" class="level3">
<h3 class="anchored" data-anchor-id="build">build</h3>
<p>최종 build는 (42 seoul 사람에게 익숙한) <code>makefile</code>을 사용했습니다.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>제가 아직 로컬에서 돌려볼만한 다른 build 툴을 배우지 않아서 makefile을 사용하긴 했지만, 사실 c언어도 아니고..이 과제 구현에서 이 tool이 그렇게 어울리진 않은거 같긴 합니다.</p>
</div>
</div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.env</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename=".env" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only 1 line variable is allowed</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">AWS_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-4">AWS_ACCESS_KEY_ID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-5">AWS_SECRET_ACCESS_KEY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-6">SERVER_INSTANCE_COUNT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># public subnet에 접근할 수 있는 ip address를 지정해줍니다.</span></span>
<span id="cb1-9">SSH_IP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># public subnet에 접근할 때 사용할 ssh key path를 지정해줍니다.</span></span>
<span id="cb1-12">SSH_PUBLIC_KEY_PATH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-13">SSH_PRIVATE_KEY_PATH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker compose setting</span></span>
<span id="cb1-16">MYSQL_USER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-17">MYSQL_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-18">MYSQL_ROOT_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-19">DATABASE_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-20">SITE_TITLE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-21">ADMIN_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-22">ADMIN_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-23">ADMIN_EMAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-24">USER_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-25">USER_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb1-26">USER_EMAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Makefile</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="Makefile" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .env의 내용들을 makefile의 변수로 load 해줍니다.</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">include .env</span>
<span id="cb2-4">export</span></code></pre></div>
</div>
<p>먼저 <code>필요한 변수들</code>을 모두 <code>.env</code>에 저장해 <code>한번에 관리</code>할 수 있게 구현했습니다. 저장된 .env 내용은 makefile에서 위의 명령어로 불러와 build 명령어 실행시 사용할 수 있게 했습니다.</p>
<p>makefile이 .env 파일을 읽을 때 한 줄씩 읽기 때문에, 위의 방식으로 구현하면 여러 줄에 걸친 환경변수는 사용하기 어려울 수 있습니다. (그럴땐 그냥 makefile 말고 다른 tool을 쓰면 됩니다)</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>Makefile</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="Makefile" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">.PHONY: provision deploy <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> destroy re build_ami</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>: build_ami provision deploy</span>
<span id="cb3-4"></span>
<span id="cb3-5">build_ami: packer</span>
<span id="cb3-6">    packer init $(PACKER_PATH)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>database.pkr.hcl</span>
<span id="cb3-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@PKR_VAR_AWS_REGION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(AWS_REGION) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-8">    PKR_VAR_MYSQL_USER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(MYSQL_USER) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-9">    PKR_VAR_MYSQL_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(MYSQL_PASSWORD) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-10">    PKR_VAR_DATABASE_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(DATABASE_NAME) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-11">    PKR_VAR_MYSQL_ROOT_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(MYSQL_ROOT_PASSWORD) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-12">    packer build $(PACKER_PATH)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>database.pkr.hcl</span>
<span id="cb3-13"></span>
<span id="cb3-14">provision: build_ami terraform</span>
<span id="cb3-15">    terraform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>chdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(PROVISION_PATH) init</span>
<span id="cb3-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@TF_VAR_AWS_REGION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(AWS_REGION) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-17">    TF_VAR_SERVER_INSTANCE_COUNT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(SERVER_INSTANCE_COUNT) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-18">    TF_VAR_SSH_IP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(SSH_IP) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-19">    TF_VAR_SSH_PUBLIC_KEY_PATH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(SSH_PUBLIC_KEY_PATH) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-20">    terraform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>chdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(PROVISION_PATH) <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>auto<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>approve</span>
<span id="cb3-21"></span>
<span id="cb3-22">deploy: ansible</span>
<span id="cb3-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@DB_PRIVATE_IP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$(shell terraform -chdir=$(PROVISION_PATH) output -json db_private_ip | jq -r '.[]' | tr '</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' ' ')"</span> \</span>
<span id="cb3-24">    ANSIBLE_HOST_KEY_CHECKING<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-25">    ANSIBLE_REMOTE_USER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ubuntu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-26">    AWS_DEFAULT_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(AWS_REGION) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-27">    ANSIBLE_PYTHON_INTERPRETER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>auto_silent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-28">    ansible<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>playbook <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i $(DEPLOY_PATH)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>inventories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>private<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>$(SSH_PRIVATE_KEY_PATH) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-31">    $(DEPLOY_PATH)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>server.yml </span></code></pre></div>
</div>
<p>build 과정은 <code>ami 생성</code>, <code>provision</code>, <code>ansible deploy</code> 순서로 진행됩니다.</p>
<p>각 과정에 필요한 변수들은 <code>명령어 수행 시 환경변수로 제공</code>해줍니다. 대표적으로 ansible의 경우, provision 이후 생성된 database ec2의 private ip를 전달하고 있습니다.</p>
</section>
<section id="packer-코드" class="level3">
<h3 class="anchored" data-anchor-id="packer-코드">Packer 코드</h3>
<p>이 프로젝트에서는 데이터베이스 서버를 Private subnet에 위치시키고, Public subnet의 EC2만 이 데이터베이스에 접근할 수 있도록 설계했습니다. <code>Private subnet에 있는 서버</code>는 SSH 접근이 제한되기 때문에 <code>Ansible로 직접 설정하기는 어렵습니다.</code> 이런 경우 <code>Packer로 미리 설정된 AMI를 생성</code>하는 방법을 생각해볼 수 있습니다.</p>
<p>구현한 Packer 파일 구조는 아래와 같습니다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">packer/</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> database.pkr.hcl</span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> ansible/</span>
<span id="cb4-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> _requirements/                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker compose setting files</span></span>
<span id="cb4-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> roles/setting_docker/tasks</span>
<span id="cb4-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── main.yml</span>
<span id="cb4-7">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> database.yml                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># playbook</span></span></code></pre></div>
<p>먼저 <code>기본 이미지로 Ubuntu 20.04</code>를 사용하도록 작성했습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>database.pkr.hcl</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="database.pkr.hcl" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">source <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amazon-ebs"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database"</span> {</span>
<span id="cb5-2">  region  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var.AWS_REGION</span>
<span id="cb5-3">  profile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">  ami_name      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hyunghki-database-${formatdate("</span>YYYYMMDDhhmmss<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", timestamp())}"</span></span>
<span id="cb5-6">  instance_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t2.micro"</span></span>
<span id="cb5-7">  source_ami_filter {</span>
<span id="cb5-8">    filters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-9">      name                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"</span></span>
<span id="cb5-10">      root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ebs"</span></span>
<span id="cb5-11">      virtualization<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hvm"</span></span>
<span id="cb5-12">    }</span>
<span id="cb5-13">    most_recent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true</span>
<span id="cb5-14">    owners      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"099720109477"</span>]</span>
<span id="cb5-15">  }</span>
<span id="cb5-16">  ssh_username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntu"</span></span>
<span id="cb5-17">}</span></code></pre></div>
</div>
<p>Packer는 기본적으로 이미지 생성을 위한 최소한의 기능만 제공하지만, 다양한 플러그인을 지원합니다. 여기서는 <code>Ansible 플러그인을 사용</code>하여 데이터베이스 서버 설정을 자동화했습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>database.pkr.hcl</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="database.pkr.hcl" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">build {</span>
<span id="cb6-2">  sources <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source.amazon-ebs.database"</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4">  provisioner <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ansible"</span> {</span>
<span id="cb6-5">    playbook_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{path.root}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/ansible/database.yml"</span></span>
<span id="cb6-6">    user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntu"</span></span>
<span id="cb6-7">    ansible_env_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANSIBLE_HOST_KEY_CHECKING=False"</span>,</span>
<span id="cb6-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MYSQL_USER=$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.MYSQL_USER}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MYSQL_PASSWORD=$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.MYSQL_PASSWORD}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATABASE_NAME=$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.DATABASE_NAME}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MYSQL_ROOT_PASSWORD=$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.MYSQL_ROOT_PASSWORD}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANSIBLE_PYTHON_INTERPRETER=auto_silent"</span></span>
<span id="cb6-14">    ]</span>
<span id="cb6-15">  }</span>
<span id="cb6-16">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>ansible/database.yml</strong></pre>
</div>
<div class="sourceCode" id="cb7" data-filename="ansible/database.yml" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hosts: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span></span>
<span id="cb7-2">  gather_facts: false</span>
<span id="cb7-3">  become: true</span>
<span id="cb7-4">  roles:</span>
<span id="cb7-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker compose를 machine에 설치해줍니다.</span></span>
<span id="cb7-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> role: setting_docker</span>
<span id="cb7-7"></span>
<span id="cb7-8">  tasks:</span>
<span id="cb7-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker compose에 필요한 파일들을 옮겨줍니다.</span></span>
<span id="cb7-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: copy_requirements</span>
<span id="cb7-11">      copy:</span>
<span id="cb7-12">        src: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./_requirements/"</span></span>
<span id="cb7-13">        dest: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ansible_user </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/app/"</span></span>
<span id="cb7-14">        mode: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0755'</span></span>
<span id="cb7-15">        directory_mode: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0755'</span></span>
<span id="cb7-16"></span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 적절한 환경변수와 함께 docker compose 명령어를 실행합니다.</span></span>
<span id="cb7-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: execute docker compose</span>
<span id="cb7-19">      shell:</span>
<span id="cb7-20">        cmd: docker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compose up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d</span>
<span id="cb7-21">        chdir: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ansible_user </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/app/"</span></span>
<span id="cb7-22">      environment:</span>
<span id="cb7-23">        MYSQL_USER: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'MYSQL_USER') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-24">        MYSQL_PASSWORD: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'MYSQL_PASSWORD') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-25">        DATABASE_NAME: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'DATABASE_NAME') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-26">        MYSQL_ROOT_PASSWORD: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'MYSQL_ROOT_PASSWORD') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
<p>이렇게 Ansible과 Packer를 조합하면 <code>멱등성이 보장되는 안정적인 서버 이미지를 생성</code>할 수 있습니다.</p>
<p>참고로 packer에서 ansible plugin을 사용할 때 <code>taget host를 ami가 build되는 임시 EC2로 간주</code>하기 때문에, <code>inventory는 사용하지 않습니다.</code> 자세한 내용은 ansible part를 참고해주세요.</p>
</section>
<section id="terraform-코드" class="level3">
<h3 class="anchored" data-anchor-id="terraform-코드">Terraform 코드</h3>
<p>이제 본격적으로 provision을 해보겠습니다. 잠시 전체적인 구조를 다시 한번 보겠습니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-27-45.png" class="img-fluid figure-img"></p>
<figcaption>구현 aws 구조</figcaption>
</figure>
</div>
<p>필요한 리소스는 VPC, subnet, security group, ec2 입니다.</p>
<p><code>server ec2</code>와 <code>database ec2</code>는 환경변수 SERVER_INSTANCE_COUNT에 지정된 갯수 만큼 생성됩니다. database ec2는 이전 단계에서 생성한 ami를 사용해줍니다.</p>
<p>public, private subnet의 갯수는 임의로 생성했습니다.</p>
<p>파일 구조는 아래와 같습니다.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform/</span></span>
<span id="cb8-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> main/</span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── main.tf</span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── data.tf</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   ├── output.tf</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── variables.tf</span>
<span id="cb8-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> modules/network/</span>
<span id="cb8-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> main.tf</span>
<span id="cb8-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> output.tf</span>
<span id="cb8-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> variables.tf</span></code></pre></div>
<p>main.tf에서는 <code>aws_instance</code>를 생성하고, 그 외 VPC, subnet과 같은 리소스는 <code>network module</code>로 분리해서 생성했습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>modules/network/main.tf</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="modules/network/main.tf" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_vpc"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main_vpc"</span> {</span>
<span id="cb9-2">  cidr_block           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10.0.0.0/16"</span></span>
<span id="cb9-3">  instance_tenancy     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span></span>
<span id="cb9-4">  enable_dns_hostnames <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span></span>
<span id="cb9-5">}</span>
<span id="cb9-6"></span>
<span id="cb9-7">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_subnet"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"public-1"</span> {</span>
<span id="cb9-8">  vpc_id                  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb9-9">  cidr_block              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10.0.1.0/24"</span></span>
<span id="cb9-10">  map_public_ip_on_launch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span></span>
<span id="cb9-11">  availability_zone       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.AWS_REGION}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a"</span></span>
<span id="cb9-12">}</span>
<span id="cb9-13"></span>
<span id="cb9-14">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_subnet"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"public-2"</span> {</span>
<span id="cb9-15">  vpc_id                  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb9-16">  cidr_block              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10.0.2.0/24"</span></span>
<span id="cb9-17">  map_public_ip_on_launch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"true"</span></span>
<span id="cb9-18">  availability_zone       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.AWS_REGION}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c"</span></span>
<span id="cb9-19">}</span>
<span id="cb9-20"></span>
<span id="cb9-21">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_subnet"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"private"</span> {</span>
<span id="cb9-22">  vpc_id                  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb9-23">  cidr_block              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"10.0.3.0/24"</span></span>
<span id="cb9-24">  map_public_ip_on_launch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"false"</span></span>
<span id="cb9-25">  availability_zone       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.AWS_REGION}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a"</span></span>
<span id="cb9-26">}</span></code></pre></div>
</div>
<p>먼저 VPC와 subnet을 생성합니다.</p>
<p>cidr_block은 private ip 중에서 겹치지 않는 범위로 지정해줍니다.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Private IP ranges
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Class A: 10.0.0.0–10.255.255.255</li>
<li>Class B: 172.16.0.0–172.31.255.255</li>
<li>Class C: 192.168.0.0–192.168.255.255</li>
</ul>
</div>
</div>
<p>Public subnet이 인터넷과 통신하기 위해서는 <code>Internet Gateway</code>와 <code>Route Table</code>이 필요합니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>modules/network/main.tf</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="modules/network/main.tf" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_internet_gateway"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gate_way"</span> {</span>
<span id="cb10-2">  vpc_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-3">}</span>
<span id="cb10-4"></span>
<span id="cb10-5">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_route_table"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"public_route_table"</span> {</span>
<span id="cb10-6">  vpc_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">  route {</span>
<span id="cb10-9">    cidr_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0/0"</span></span>
<span id="cb10-10">    gateway_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_internet_gateway.gate_way.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-11">  }</span>
<span id="cb10-12">}</span>
<span id="cb10-13"></span>
<span id="cb10-14">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_route_table_association"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"public-1"</span> {</span>
<span id="cb10-15">  subnet_id      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_subnet.public<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-16">  route_table_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_route_table.public_route_table.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-17">}</span>
<span id="cb10-18"></span>
<span id="cb10-19">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_route_table_association"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"public-2"</span> {</span>
<span id="cb10-20">  subnet_id      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_subnet.public<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-21">  route_table_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_route_table.public_route_table.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb10-22">}</span></code></pre></div>
</div>
<p>모든 외부 트래픽을 Internet Gateway로 보내도록 Route Table을 설정하고, 이를 두 개의 Public subnet에 연결했습니다.</p>
<p>참고로 VPC 내부 통신은 자동으로 라우팅됩니다. 같은 VPC 안에 있는 리소스들은 VPC의 기본 라우팅 테이블을 통해 서로 통신할 수 있기 때문에 내부 통신을 위한 route table은 따로 생성하지 않았습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>modules/network/main.tf</strong></pre>
</div>
<div class="sourceCode" id="cb11" data-filename="modules/network/main.tf" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_security_group"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server_sg"</span> {</span>
<span id="cb11-2">  vpc_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb11-3">  name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server_sg"</span></span>
<span id="cb11-4"></span>
<span id="cb11-5">  ingress {</span>
<span id="cb11-6">    from_port   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span></span>
<span id="cb11-7">    to_port     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span></span>
<span id="cb11-8">    protocol    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcp"</span></span>
<span id="cb11-9">    cidr_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var.SSH_CIDR_BLOCKS</span>
<span id="cb11-10">  }</span>
<span id="cb11-11"></span>
<span id="cb11-12">  ingress {</span>
<span id="cb11-13">    from_port   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb11-14">    to_port     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb11-15">    protocol    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcp"</span></span>
<span id="cb11-16">    cidr_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0/0"</span>]</span>
<span id="cb11-17">  }</span>
<span id="cb11-18"></span>
<span id="cb11-19">  ingress {</span>
<span id="cb11-20">    from_port   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">443</span></span>
<span id="cb11-21">    to_port     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">443</span></span>
<span id="cb11-22">    protocol    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcp"</span></span>
<span id="cb11-23">    cidr_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0/0"</span>]</span>
<span id="cb11-24">  }</span>
<span id="cb11-25"></span>
<span id="cb11-26">  egress {</span>
<span id="cb11-27">    from_port   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-28">    to_port     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-29">    protocol    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-1"</span></span>
<span id="cb11-30">    cidr_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0/0"</span>]</span>
<span id="cb11-31">  }</span>
<span id="cb11-32">}</span>
<span id="cb11-33"></span>
<span id="cb11-34">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_security_group"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database_sg"</span> {</span>
<span id="cb11-35">  vpc_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_vpc.main_vpc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb11-36">  name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"efs_sg"</span></span>
<span id="cb11-37"></span>
<span id="cb11-38">  ingress {</span>
<span id="cb11-39">    from_port       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3306</span></span>
<span id="cb11-40">    to_port         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3306</span></span>
<span id="cb11-41">    protocol        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tcp"</span></span>
<span id="cb11-42">    security_groups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [aws_security_group.server_sg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>]</span>
<span id="cb11-43">  }</span>
<span id="cb11-44"></span>
<span id="cb11-45">  egress {</span>
<span id="cb11-46">    from_port   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-47">    to_port     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-48">    protocol    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-1"</span></span>
<span id="cb11-49">    cidr_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0/0"</span>]</span>
<span id="cb11-50">  }</span>
<span id="cb11-51">}</span></code></pre></div>
</div>
<p>마지막으로 security group입니다.</p>
<p>server ec2의 ssh 접근은 환경변수를 통해 ansible을 실행하는 머신의 ip에서만 접근 가능하도록 설정해줬습니다.</p>
<p>database ec2는 server ec2만 접근할 수 있도록 설정했습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>main/main.tf</strong></pre>
</div>
<div class="sourceCode" id="cb12" data-filename="main/main.tf" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용자가 지정한 경로의 ssh key를 사용해 ec2에 접근 가능하도록 설정했습니다.</span></span>
<span id="cb12-2">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_key_pair"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_labtop"</span> {</span>
<span id="cb12-3">  key_name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_labtop"</span></span>
<span id="cb12-4">  public_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>(var.SSH_PUBLIC_KEY_PATH)</span>
<span id="cb12-5">}</span>
<span id="cb12-6"></span>
<span id="cb12-7">module <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"network"</span> {</span>
<span id="cb12-8">  source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../modules/network"</span></span>
<span id="cb12-9"></span>
<span id="cb12-10">  AWS_REGION           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var.AWS_REGION</span>
<span id="cb12-11">  SSH_CIDR_BLOCKS      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{var.SSH_IP}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/32"</span>]</span>
<span id="cb12-12">}</span>
<span id="cb12-13"></span>
<span id="cb12-14">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_instance"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"server"</span> {</span>
<span id="cb12-15">  count         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var.SERVER_INSTANCE_COUNT</span>
<span id="cb12-16">  ami           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.aws_ami.latest_ubuntu.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb12-17">  instance_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t2.micro"</span></span>
<span id="cb12-18"></span>
<span id="cb12-19">  vpc_security_group_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module.network.server_sg_id]</span>
<span id="cb12-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subnet은 2개를 번걸아가면서 사용하도록 설정했습니다.</span></span>
<span id="cb12-21">  subnet_id              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> module.network.public_subnets[count.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb12-22"></span>
<span id="cb12-23">  key_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_key_pair.my_labtop.key_name</span>
<span id="cb12-24">  tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-25">    Name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serverNode"</span></span>
<span id="cb12-26">  }</span>
<span id="cb12-27">}</span>
<span id="cb12-28"></span>
<span id="cb12-29">resource <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_instance"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database"</span> {</span>
<span id="cb12-30">  count         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> var.SERVER_INSTANCE_COUNT</span>
<span id="cb12-31">  ami           <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.aws_ami.database_ami.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span>
<span id="cb12-32">  instance_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t2.micro"</span></span>
<span id="cb12-33"></span>
<span id="cb12-34">  vpc_security_group_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [module.network.database_sg_id]</span>
<span id="cb12-35">  subnet_id              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> module.network.private_subnets</span>
<span id="cb12-36"></span>
<span id="cb12-37">  key_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> aws_key_pair.my_labtop.key_name</span>
<span id="cb12-38">  tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb12-39">    Name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dbNode"</span></span>
<span id="cb12-40">  }</span>
<span id="cb12-41">}</span></code></pre></div>
</div>
<p>최종적으로 main.tf에서 network module을 불러와서 필요한 리소스를 생성한 후, server와 database ec2를 생성했습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>main/data.tf</strong></pre>
</div>
<div class="sourceCode" id="cb13" data-filename="main/data.tf" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">data <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_ami"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest_ubuntu"</span> {</span>
<span id="cb13-2">  most_recent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true</span>
<span id="cb13-3"></span>
<span id="cb13-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> {</span>
<span id="cb13-5">    name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb13-6">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"</span>]</span>
<span id="cb13-7">  }</span>
<span id="cb13-8"></span>
<span id="cb13-9">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> {</span>
<span id="cb13-10">    name   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"virtualization-type"</span></span>
<span id="cb13-11">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hvm"</span>]</span>
<span id="cb13-12">  }</span>
<span id="cb13-13"></span>
<span id="cb13-14">  owners <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"099720109477"</span>]</span>
<span id="cb13-15">}</span>
<span id="cb13-16"></span>
<span id="cb13-17">data <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aws_ami"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database_ami"</span> {</span>
<span id="cb13-18">  most_recent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> true</span>
<span id="cb13-19">  owners <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"self"</span>]</span>
<span id="cb13-20">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> {</span>
<span id="cb13-21">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span></span>
<span id="cb13-22">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hyunghki-database-*"</span>]</span>
<span id="cb13-23">  }</span>
<span id="cb13-24">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> {</span>
<span id="cb13-25">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"root-device-type"</span></span>
<span id="cb13-26">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ebs"</span>]</span>
<span id="cb13-27">  }</span>
<span id="cb13-28">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> {</span>
<span id="cb13-29">    name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"virtualization-type"</span></span>
<span id="cb13-30">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hvm"</span>]</span>
<span id="cb13-31">  }</span>
<span id="cb13-32">}</span></code></pre></div>
</div>
<p>server ec2는 기본 ubuntu 20.04 이미지를 사용하고, database ec2는 이전에 생성한 ami를 사용했습니다.</p>
</section>
<section id="ansible-코드" class="level3">
<h3 class="anchored" data-anchor-id="ansible-코드">ansible 코드</h3>
<p>이제 필요한 설정을 진행하겠습니다.</p>
<p>파일 구조는 아래와 같습니다.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">terraform/</span></span>
<span id="cb14-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> _requirements/                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># docker compose setting files</span></span>
<span id="cb14-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> inventories/</span>
<span id="cb14-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── aws_ec2.yml</span>
<span id="cb14-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> roles/setting_docker/tasks</span>
<span id="cb14-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">│</span>   └── main.yml</span>
<span id="cb14-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> server.yml</span></code></pre></div>
<p>먼저 용어를 알아야 합니다.</p>
<ol type="1">
<li><p>Inventory (인벤토리)</p>
<p>인벤토리는 Ansible이 관리할 호스트(서버)의 목록입니다. 호스트를 그룹으로 묶어 관리할 수 있습니다.</p></li>
<li><p>Playbook (플레이북)</p>
<p>플레이북은 Ansible에서 작업을 정의하는 YAML 파일입니다. 플레이북은 하나 이상의 <code>플레이</code>로 구성되며, 각 플레이는 특정 호스트 그룹에 대해 수행할 작업(task)을 정의합니다.</p></li>
<li><p>Role (롤)</p>
<p>롤은 Ansible에서 재사용 가능한 구성 단위입니다. 플레이북을 모듈화하고 구조화하여 재사용성을 높이는 데 사용됩니다.</p></li>
</ol>
<p>Inventory에서 server 그룹을 정의한 후, playbook으로 docker compose 환경을 설정하겠습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>aws_ec2.yml</strong></pre>
</div>
<div class="sourceCode" id="cb15" data-filename="aws_ec2.yml" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">plugin: aws_ec2</span>
<span id="cb15-2">keyed_groups:</span>
<span id="cb15-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> key: tags</span>
<span id="cb15-4">compose:</span>
<span id="cb15-5">  ansible_host: public_ip_address</span>
<span id="cb15-6">leading_separator: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-7">filters:</span>
<span id="cb15-8">  instance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>name: running</span></code></pre></div>
</div>
<p>AWS EC2 동적 인벤토리 설정입니다. Terraform으로 생성한 EC2 인스턴스들을 자동으로 관리할 수 있습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>server.yml</strong></pre>
</div>
<div class="sourceCode" id="cb16" data-filename="server.yml" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> hosts: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name_serverNode"</span></span>
<span id="cb16-2">  gather_facts: false</span>
<span id="cb16-3">  become: true</span>
<span id="cb16-4">  roles:</span>
<span id="cb16-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> role: setting_docker</span>
<span id="cb16-6">  tasks:</span>
<span id="cb16-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: copy_requirements</span>
<span id="cb16-8">      copy:</span>
<span id="cb16-9">        src: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./_requirements/"</span></span>
<span id="cb16-10">        dest: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ansible_user </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/app/"</span></span>
<span id="cb16-11">        mode: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0755'</span></span>
<span id="cb16-12">        directory_mode: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0755'</span></span>
<span id="cb16-13"></span>
<span id="cb16-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: Split array values <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> DB_PRIVATE_IP</span>
<span id="cb16-15">      set_fact:</span>
<span id="cb16-16">        target: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'DB_PRIVATE_IP') | split(' ') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-17"></span>
<span id="cb16-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: execute docker compose</span>
<span id="cb16-19">      shell:</span>
<span id="cb16-20">        cmd: docker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>compose up <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d</span>
<span id="cb16-21">        chdir: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ansible_user </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/app/"</span></span>
<span id="cb16-22">      environment:</span>
<span id="cb16-23">        DOMAIN_NAME: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ansible_host </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-24">        MYSQL_USER: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'MYSQL_USER') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-25">        MYSQL_PASSWORD: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'MYSQL_PASSWORD') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-26">        DATABASE_NAME: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'DATABASE_NAME') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-27">        SITE_TITLE: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'SITE_TITLE') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-28">        ADMIN_NAME: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'ADMIN_NAME') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-29">        ADMIN_PASSWORD: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'ADMIN_PASSWORD') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-30">        ADMIN_EMAIL: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'ADMIN_EMAIL') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-31">        USER_NAME: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'USER_NAME') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-32">        USER_PASSWORD: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'USER_PASSWORD') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-33">        USER_EMAIL: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lookup('env', 'USER_EMAIL') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-34">        DB_PRIVATE_IP: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> target[ansible_play_hosts.index(inventory_hostname)] </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-35"></span>
<span id="cb16-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span> done message</span>
<span id="cb16-37">      debug:</span>
<span id="cb16-38">        msg: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> ansible_host </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</div>
<p>’Name’이 ’serverNode’인 인스턴스들만 선택하여 설정을 진행하겠습니다.</p>
</section>
</section>
<section id="실행" class="level2">
<h2 class="anchored" data-anchor-id="실행">실행</h2>
<p>먼저 .env 파일에 환경변수를 설정해줍니다.</p>
<p>ip 정보도 알아낸 후, SSH_IP에 설정해줍니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-30-17.png" class="img-fluid figure-img"></p>
<figcaption>naver에 내 ip 검색</figcaption>
</figure>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>.env</strong></pre>
</div>
<div class="sourceCode" id="cb17" data-filename=".env" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only 1 line variable is allowed</span></span>
<span id="cb17-2">AWS_REGION<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>northeast<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-3">AWS_ACCESS_KEY_ID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=********************</span></span>
<span id="cb17-4">AWS_SECRET_ACCESS_KEY<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=********************</span></span>
<span id="cb17-5">SERVER_INSTANCE_COUNT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb17-6">SSH_IP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">121.135.181.56</span></span>
<span id="cb17-7">SSH_PUBLIC_KEY_PATH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=~/</span>.ssh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>id_rsa.pub</span>
<span id="cb17-8">SSH_PRIVATE_KEY_PATH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=~/</span>.ssh<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>id_rsa</span>
<span id="cb17-9">MYSQL_USER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dudu</span>
<span id="cb17-10">MYSQL_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>secret</span>
<span id="cb17-11">MYSQL_ROOT_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>secret</span>
<span id="cb17-12">DATABASE_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cloud</span>
<span id="cb17-13">SITE_TITLE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hyunghki blog'</span></span>
<span id="cb17-14">ADMIN_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>admin</span>
<span id="cb17-15">ADMIN_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>secret</span>
<span id="cb17-16">ADMIN_EMAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>admin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>example.com</span>
<span id="cb17-17">USER_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user</span>
<span id="cb17-18">USER_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>secret</span>
<span id="cb17-19">USER_EMAIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>example.com</span></code></pre></div>
</div>
<p>그후 make 명령어를 입력하면 자동으로 build가 진행됩니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-24-46.png" class="img-fluid figure-img"></p>
<figcaption>명령어 실행 결과</figcaption>
</figure>
</div>
<p>build가 완료되면 완료 메세지의 ip로 접속해줍니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-44-52.png" class="img-fluid figure-img"></p>
<figcaption>접속 페이지</figcaption>
</figure>
</div>
<p>wordpress 접속 페이지가 잘 뜨는 것을 확인할 수 있습니다.</p>
</section>
<section id="결과" class="level2">
<h2 class="anchored" data-anchor-id="결과">결과</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-19-46.png" class="img-fluid figure-img"></p>
<figcaption>최종 점수</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-21-13.png" class="img-fluid figure-img"></p>
<figcaption>최종 평가</figcaption>
</figure>
</div>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">outro</h2>
<p>솔직히 일반적으로 사용되는 cloud 구조를 적용한건 아니긴 하지만, 과제에 맞춰서 진행하기 위해 고민하는 과정에서 다양한 구조를 적용해봤는데, 그 과정이 나름 학습에 도움이 된거 같습니다. 이 분야에 공부를 꽤 했고, 그 내용들을 다양하게 고민하며 적용해보고 싶다면 이 프로젝트가 괜찮은 선택지가 될 수도 있어 보입니다.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>aws</category>
  <category>packer</category>
  <category>terraform</category>
  <category>ansible</category>
  <category>42 seoul</category>
  <guid>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/6.html</guid>
  <pubDate>Wed, 29 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>cloud-1 개념 설명</title>
  <link>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/5.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">intro</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/42-outer-1.png" class="img-fluid figure-img"></p>
<figcaption>42 seoul outer 과제</figcaption>
</figure>
</div>
<p>다음 학기 시작 전까지 개념공부만 하면서 시간을 보내려고 하니까 프로젝트가 하고 싶어졌습니다. 원래는 python 과제를 하려고 했는데, 이전에 cloud 과제를 진행하다가 말았던게 기억나서 이어서 해보면 괜찮겠다 생각했습니다.</p>
</section>
<section id="프로젝트-및-구현-설명" class="level2">
<h2 class="anchored" data-anchor-id="프로젝트-및-구현-설명">프로젝트 및 구현 설명</h2>
<section id="개요" class="level3">
<h3 class="anchored" data-anchor-id="개요">개요</h3>
<p><a href="https://cdn.intra.42.fr/pdf/pdf/147805/en.subject.pdf">과제 명세서</a></p>
<p>참고한 자료는 다음과 같습니다:</p>
<ul>
<li><a href="https://www.udemy.com/course/aws-certified-solutions-architect-associate-saa-c03/">AWS SAA Udemy 강의</a></li>
<li><a href="https://www.udemy.com/course/terraform-and-ansible/?utm_campaign=2025-01-21&amp;utm_content=promo&amp;utm_medium=4897172&amp;utm_source=email-sendgrid&amp;utm_term=38475056">ansible terraform Udemy 강의</a></li>
</ul>
<p>이 강의들도 본 지 1년이 다되어가긴 하지만..과제할 때 사용한 제 배경지식이 여기서 나온거니까요. 과제를 진행하실 분들은 한번 수강해보시면 도움이 될 것 같습니다.</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>이 포스팅에서 docker와 nginx, wordpress, mysql 구조에 대한 설명은 생략하겠습니다.<br>
전체 코드는 <a href="https://github.com/cryscham123/cloud-1">github repo</a>에서 확인하실 수 있습니다.</p>
</div>
</div>
</div>
</section>
<section id="what-is-iac" class="level3">
<h3 class="anchored" data-anchor-id="what-is-iac">What is IaC?</h3>
<p>이 프로젝트의 목표는 <code>IaC(Infrastructure as Code) tool</code>을 이용하여 wordpress 사이트를 cloud에 자동으로 배포하는 것입니다.</p>
<p>IaC는 <code>인프라 구성을 코드로 관리하는 방식</code>으로, 수동으로 리소스를 생성하고 설정하는 방식에 비해 <code>버전 관리가 간편</code>하고, <code>동일한 환경을 쉽게 재현</code>하거나, <code>코드 리뷰 등의 방식으로 휴먼 에러를 줄이는 데 용이</code>하게 사용할 수 있습니다.</p>
<p>이번 프로젝트에서는 <code>Packer, Terraform, Ansible</code> 세 가지 IaC tool을 조합해 사용했습니다</p>
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-27-17.png" class="img-fluid"></p>
<ol type="1">
<li><p><strong>Packer</strong>: <code>인프라 생성 전, 상세 설정</code>이 되어있는 image를 build할 수 있는 tool 입니다.</p></li>
<li><p><strong>Terraform</strong>: <code>cloud 인프라를 생성</code>하는 tool입니다. <code>packer에서 생성한 ami를 사용</code>할 수 있습니다.</p></li>
<li><p><strong>Ansible</strong>: 서버 내부의 <code>상세 설정을 자동화</code>합니다. 일반적인 bash script와는 다르게 <code>멱등성 있는 설정</code>이 가능하다는 점이 큰 장점입니다. 이때, 서버는 <code>python이 설치되어 있어야 하고, ssh로 접근 가능</code>해야 합니다.</p></li>
</ol>
<p>위의 이미지 처럼, packer로 <code>필요한 설정이 완료된 image를 생성</code>한 뒤, 그 이미지를 기반으로 <code>cloud infra</code>를 terraform으로 생성하고, <code>생성된 infra의 상세 설정</code>을 ansible을 이용해서 구현해줄 것입니다.</p>
<p>Packer와 Ansible은 서버 설정 자동화라는 <code>동일한 기능</code>을 수행하는 도구입니다. 두 도구는 각각 다양한 특징과 장단점이 있지만, 이 과제에서 알아야 하는 차이점은 아래와 같습니다.</p>
<p>Packer는 <code>임시 EC2 인스턴스</code>를 생성하여 그 위에서 필요한 설정을 완료한 후, 해당 인스턴스를 AMI로 변환하는 방식으로 동작합니다. 이렇게 생성된 AMI는 이후 실제 인프라 구축 시 그대로 사용할 수 있습니다. 따라서 최종 목적지 서버가 <code>SSH 접근이 제한되는 환경</code>이더라도, 미리 필요한 <code>모든 설정이 완료된 이미지를 사용</code>할 수 있다는 장점이 있습니다.</p>
<p>반면에 Ansible은 <code>SSH 접근이 가능한 서버에서만 동작</code>하지만, Packer와 달리 <code>인프라 구축 후에 얻을 수 있는 정보</code>(예: EC2의 IP)를 활용할 수 있습니다.</p>
<p>이러한 특성을 고려하여 이 프로젝트에서는 두 도구를 상황에 맞게 조합하여 사용했습니다.</p>
</section>
<section id="전체적인-구조" class="level3">
<h3 class="anchored" data-anchor-id="전체적인-구조">전체적인 구조</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-27-45.png" class="img-fluid figure-img"></p>
<figcaption>구현 aws 구조</figcaption>
</figure>
</div>
<p><code>Public subnet의 EC2</code>들에 대한 <code>ssh 접근</code>은 <code>관리용 컴퓨터에서만</code>(terraform, ansible 코드가 실행되는 컴퓨터) 접근이 가능하도록 제한했고, MySQL의 데이터는 <code>Private subnet의 EC2</code>에 저장한 뒤 <code>Public subnet의 EC2만 접근</code>할 수 있도록 설정했습니다. <code>Public subnet의 EC2</code>는 <code>사용자가 원하는 갯수를 설정</code>할 수 있고, <code>그 갯수에 맞춰서</code> private subnet의 <code>dbms EC2</code>가 생성되도록 설계했습니다.</p>
<p>실제 프로덕션 환경이라면 위와 같은 구조로는 설계하지 않습니다. 일단 EC2 머신들을 Auto Scaling Group으로 묶고, 그 앞에 Network Load Balancer를 두어 단일 엔드포인트로 관리하는 것이 좋습니다. 또한 Database는 AWS RDS를 이용하고, WordPress의 파일 시스템은 EFS나 S3를 활용해 Stateless하게 구현하는게 좋습니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-29-17.png" class="img-fluid figure-img"></p>
<figcaption>조금 더 일반적인 구조(물론 docker compose는 잘 안쓸것 같긴 합니다)</figcaption>
</figure>
</div>
<p>제 구현에서는 <code>각 서버가 독립적인 상태와 엔드포인트</code>를 가지고 있습니다.</p>
<p>그렇게 한 이유는 일단 <code>aws free tier</code> 서비스만으로 과제를 구현하려고 했던게 제일 크고요..(NLB는 사용할 수 없었습니다.) 나머지는 과제 제약사항 때문인데,</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-02-05-20-28-30.png" class="img-fluid figure-img"></p>
<figcaption>과제 제약사항</figcaption>
</figure>
</div>
<p>모든 프로세스는 컨테이너 안에서 동작해야 한다는 제약때문에, <code>aws RDS</code>는 <code>사용할 수 없었습니다</code>. 그리고 database는 public internet에서 접근할 수 없다고 해서, <code>db</code>는 <code>private subnet</code>의 ec2에서 돌아가게 설계했습니다.</p>
</section>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">outro</h2>
<p>여기서 구현된 infra 구조는 사실 별로 근본있는 구조는 아니니까, 이것보다는 IaC 툴을 얼마나 편리하게 사용할 수 있는지에 초점을 맞춰서 봐주시길 바라고 있습니다.</p>
<p>이어서 코드에 대한 설명은 다음 게시글에 포스팅하겠습니다.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>aws</category>
  <category>packer</category>
  <category>terraform</category>
  <category>ansible</category>
  <category>42 seoul</category>
  <guid>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/5.html</guid>
  <pubDate>Mon, 27 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>3-몰라</title>
  <link>https://cryscham123.github.io/posts/02_areas/선형대수/notes/3.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/human-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="가우스-조던-소거법" class="level2">
<h2 class="anchored" data-anchor-id="가우스-조던-소거법">가우스 조던 소거법</h2>
<blockquote class="blockquote">
<p>선형대수의 목표는 <img src="https://latex.codecogs.com/png.latex?Ax%20=%20b">에서 x를 찾는 것이다.</p>
</blockquote>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0Ax%20+%202y%20%5Cquad%20%20&amp;=%204%20%5C%5C%0A2x%20+%205y%20%5Cquad%20&amp;=%209%0A%5Cend%7Baligned%7D">
<p>이 수식을 다시 살펴보자. 위의 수식은 아래와 같이 적용할 수 있다.</p>
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%0A2x%20+%204y%20%5Cquad%20%20&amp;=%208%20%5C%5C%0A2x%20+%205y%20%5Cquad%20&amp;=%209%0A%5Cend%7Baligned%7D">
<p>위의 열립방정식을 풀면 <img src="https://latex.codecogs.com/png.latex?y%20=%201">이라는 결과를 얻는다. 다시 <img src="https://latex.codecogs.com/png.latex?y=1">을 대입해서 <img src="https://latex.codecogs.com/png.latex?x=2">라는 값을 구할 수 있다.</p>
<p>이제 이를 matrix와 vector로 풀어보자.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20%5C%5C%0A2%20&amp;%205%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0Ax%20%5C%5C%0Ay%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A4%20%5C%5C%0A9%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>이를 확장행렬로 표현하면 다음과 같다</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5BA%7Cb%5D%20=%20%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20&amp;%20%7C%20&amp;%204%20%5C%5C%0A2%20&amp;%205%20&amp;%20%7C%20&amp;%209%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>이제 가우스 조던 소거법을 적용해보자</p>
<p>적용 순서는 다음과 같다.</p>
<ol type="1">
<li>양 변에 0이 아닌 상수배를 해준다.</li>
<li>상수배를 한 행을 다른행에 더하거나 뺀다.</li>
<li>행끼리 자리 바꾼다.</li>
</ol>
<p>이에 맞춰서 위의 식을 풀이하면,</p>
<ol type="1">
<li>두 번째 행에서 첫 번째 행의 2배를 빼면</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20&amp;%20%7C%20&amp;%204%20%5C%5C%0A0%20&amp;%201%20&amp;%20%7C%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A"></p>
<ol start="2" type="1">
<li>첫 번째 행에서 두 번째 행의 2배를 빼면</li>
</ol>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%200%20&amp;%20%7C%20&amp;%202%20%5C%5C%0A0%20&amp;%201%20&amp;%20%7C%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>따라서 <img src="https://latex.codecogs.com/png.latex?x%20=%202">, <img src="https://latex.codecogs.com/png.latex?y%20=%201">이라는 해를 얻을 수 있다.</p>
<p>즉 가우스조던 소거법은 <code>왼쪽을 항등행렬</code>로 만들고, 그 <code>오른쪽에 있는 값이 답</code>이되는 소거법이다.</p>
</section>
<section id="역행렬-구하기" class="level2">
<h2 class="anchored" data-anchor-id="역행렬-구하기">역행렬 구하기</h2>
<p>역행렬을 구할 수 있다면 x의 값을 쉽게 구할 수 있다. (<img src="https://latex.codecogs.com/png.latex?x%20=%20A%5E%7B-1%7Db">)</p>
<p>가우스 조던 소거법을 이용해 역행렬을 구해보자.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0Aa%20&amp;%20b%20&amp;%20%7C%20&amp;%201%20&amp;%200%20%5C%5C%0Ac%20&amp;%20d%20&amp;%20%7C%20&amp;%200%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0Aa%20&amp;%20b%20&amp;%20%7C%20&amp;%201%20&amp;%200%20%5C%5C%0A0%20&amp;%20%5Cfrac%7Bad-bc%7D%7Ba%7D%20&amp;%20%7C%20&amp;%20-%5Cfrac%7Bc%7D%7Ba%7D%20&amp;%201%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0Aa%20&amp;%20b%20&amp;%20%7C%20&amp;%201%20&amp;%200%20%5C%5C%0A0%20&amp;%201%20&amp;%20%7C%20&amp;%20-%5Cfrac%7B-c%7D%7Bad-bc%7D%20&amp;%20%5Cfrac%7Ba%7D%7Bad-bc%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0Aa%20&amp;%200%20&amp;%20%7C%20&amp;%20%5Cfrac%7Bad%7D%7Bad-bc%7D%20&amp;%20%5Cfrac%7B-ab%7D%7Bad-bc%7D%20%5C%5C%0A0%20&amp;%201%20&amp;%20%7C%20&amp;%20-%5Cfrac%7B-c%7D%7Bad-bc%7D%20&amp;%20%5Cfrac%7Ba%7D%7Bad-bc%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%200%20&amp;%20%7C%20&amp;%20%5Cfrac%7Bd%7D%7Bad-bc%7D%20&amp;%20%5Cfrac%7B-b%7D%7Bad-bc%7D%20%5C%5C%0A0%20&amp;%201%20&amp;%20%7C%20&amp;%20-%5Cfrac%7B-c%7D%7Bad-bc%7D%20&amp;%20%5Cfrac%7Ba%7D%7Bad-bc%7D%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%E2%88%B4%20A%5E%7B-1%7D%20=%20%5Cfrac%7B1%7D%7Bad-bc%7D%0A%5Cbegin%7Bbmatrix%7D%0Ad%20&amp;%20-b%20%5C%5C%0A-c%20&amp;%20a%0A%5Cend%7Bbmatrix%7D%0A"></p>
<section id="invertible" class="level3">
<h3 class="anchored" data-anchor-id="invertible">invertible</h3>
<p>역행렬이 존재할 경우 invertible하다고 한다.</p>
<ol type="1">
<li><code>non singular matrix</code></li>
<li><code>det(A) ≠ 0</code>: ad - bc(<code>determinant</code>) = 0인 경우 역행렬이 존재하지 않는다.</li>
<li><code>A가 full rank</code>이다</li>
<li><code>N(A) = 0</code></li>
</ol>
</section>
</section>
<section id="determinant" class="level2">
<h2 class="anchored" data-anchor-id="determinant">determinant</h2>
<p>정사각행렬의 element로 scalar 값을 만드는 함</p>
<section id="x-3-행렬의-det" class="level3">
<h3 class="anchored" data-anchor-id="x-3-행렬의-det">3 x 3 행렬의 det</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0AA=%0A%5Cbegin%7Bbmatrix%7D%0Aa%20&amp;%20b%20&amp;%20c%5C%5C%0Ad%20&amp;%20e%20&amp;%20f%20%5C%5C%0Ag%20&amp;%20h%20&amp;%20i%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?det(A)%20=%20a(ei%20-%20fh)%20-%20b(di-fg)+c(dh-eg)"></p>
<p><code>Laplace expansion</code> or <code>cofactor expansion</code></p>
</section>
<section id="properties" class="level3">
<h3 class="anchored" data-anchor-id="properties">properties</h3>
<ol type="1">
<li>det(A) = 0 이면 A is singular</li>
<li>A가 rank-deficient 이면 det(A) = 0</li>
<li>diagonal or triangular matrix, det(A) = 대각요소의 곱</li>
<li>항등행렬의 det=1</li>
<li>det(cA) = <img src="https://latex.codecogs.com/png.latex?c%5Endet(A)"> (A = nxn)</li>
<li><img src="https://latex.codecogs.com/png.latex?det(A%5ET)%20=%20det(A)"></li>
<li><code>det(AB) = det(A)det(B)</code></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ccolor%7Bred%7D%7Bdet(A%5E%7B-1%7D)%20=%20%5Cfrac%7B1%7D%7Bdet(A)%7D%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ccolor%7Bred%7D%7Bdet(A)%20=%20%CE%BB_1%CE%BB_2,...,%CE%BB_n%7D"></li>
</ol>
</section>
</section>
<section id="trace" class="level2">
<h2 class="anchored" data-anchor-id="trace">Trace</h2>
<p>정사각 행렬에 대해서만 정의되는 것, diagonal 전부 더함</p>
<p><img src="https://latex.codecogs.com/png.latex?tr(A)%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7Da_%7Bii%7D"></p>
<ol type="1">
<li>tr(A + B) = tr(A) + tr(B)</li>
<li>tr(cA) = ctr(A)</li>
<li><img src="https://latex.codecogs.com/png.latex?tr(A%5ET)%20=%20tr(A)"></li>
<li>tr(AB) = tr(BA)</li>
<li><img src="https://latex.codecogs.com/png.latex?tr(a%5ETb)%20=%20tr(ba%5ET)"></li>
<li><code>tr(ABCD) = tr(BCDA) = tr(CDAB) = tr(DABC)</code> (cyclic property)</li>
<li><img src="https://latex.codecogs.com/png.latex?tr(A)%20=%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Clambda_i"></li>
</ol>
</section>
<section id="최소자승법" class="level2">
<h2 class="anchored" data-anchor-id="최소자승법">최소자승법</h2>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>선형 대수</category>
  <guid>https://cryscham123.github.io/posts/02_areas/선형대수/notes/3.html</guid>
  <pubDate>Tue, 21 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>자기 소개서</title>
  <link>https://cryscham123.github.io/posts/01_projects/bs_3_1/notes/scholarships/1.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<ol type="1">
<li>자기소개 및 가치관 (500자 이내)</li>
</ol>
<p>저는 데이터 분석과 IT 인프라 설계 분야에 깊은 관심을 가지고 있는 산업공학과 학생입니다. 산업공학을 전공하며 시스템 최적화와 데이터 기반 의사결정에 대한 이론을 배우며 데이터 분석 및 IT 인프라 설계 분야에 관심을 가지게 되었고, 이를 실무에 적용할 수 있는 지식을 학습하고자 42서울 교육기관에서 2년 동안 IT 관련 학습을 진행했습니다. 또한 이 기간 동안 AWS와 ADsP(Advanced Data Analytics Semi-Professional) 자격증을 취득하며 클라우드 컴퓨팅과 데이터 분석에 대한 기초 역량을 쌓았습니다.</p>
<p>저는 효율적이고 신뢰할 수 있는 시스템을 구축하는 것을 가장 중요한 가치로 삼고 있습니다. 이러한 시스템은 데이터 손실과 보안 위협을 방지할 뿐만 아니라, 장기적인 성장의 토대가 되기 때문입니다. 현재는 데이터와 블록체인 기술을 활용하여 복잡한 문제를 단순화하고, 효율적인 해결책을 찾는 데 큰 관심을 가지고 있습니다. 앞으로도 지속적인 학습과 경험을 통해 해당 분야에서 전문성을 키워가고자 합니다.</p>
<ol start="2" type="1">
<li>졸업 후 IT 및 블록체인 분야에 관련해서 이루고자 하는 꿈과 선정 사유 (500자 이내)</li>
</ol>
<p>저는 데이터 분석, IT 인프라, 블록체인 기술을 융합하여 현실의 복잡한 문제들을 해결하고 혁신적인 가치를 창출하는 데 기여하고 싶습니다. 전공 수업과 프로젝트를 통해 데이터가 지닌 잠재력을 배워가면서, 동시에 데이터의 신뢰성과 보안이라는 중요한 과제에 대해서도 깊이 고민하게 되었습니다. 특히 42서울에서의 학습 경험을 통해, 안전하고 효율적인 데이터 활용을 위해서는 IT 인프라와 블록체인 기술의 역할이 매우 중요하다는 것을 깨달았습니다. 이러한 경험들을 바탕으로 IT 인프라와 블록체인 기술에 더욱 관심을 가지게 되었고, 관련 기술 서적과 온라인 자료를 통해 꾸준히 학습하며 이해의 폭을 넓혀가고 있습니다. 앞으로도 끊임없이 배우고 성장하여 데이터의 가치를 안전하게 실현할 수 있는 시스템을 만드는 데 기여하고 싶습니다.</p>
<ol start="3" type="1">
<li>목표 달성을 위한 그간의 성과 및 계획 (500자 이내)</li>
</ol>
<p>저의 주요 성과로는 42서울에서의 프로젝트 경험과 AWS, ADsP 자격증 취득을 들 수 있습니다. 42서울에서 진행한 Solidity 기반 이더리움 스마트 컨트랙트 설계 및 배포 프로젝트를 통해 블록체인의 핵심 원리와 실제 활용 방안을 학습했습니다. 또한 Vagrant, Kubernetes(K8s), ArgoCD, GitLab helm 배포 프로젝트를 수행하며 온프레미스 환경에서의 인프라 설계와 개발 환경 관리 역량을 키웠고, 이를 통해 클라우드와 온프레미스 환경의 IT 인프라 운영에 대한 실질적인 이해도를 높일 수 있었습니다. 향후 계획으로는 학부 과정에 충실히 임하면서 데이터사이언스 대학원 진학을 위한 준비를 체계적으로 진행하고자 합니다. 대학원에서는 빅데이터 처리, 머신러닝, 딥러닝 등 데이터 분석의 핵심 기술을 심도 있게 학습하고자 합니다. 이와 병행하여 온라인 강좌 수강과 실전 프로젝트 수행을 통해 IT 인프라 및 블록체인 분야의 역량을 지속적으로 강화하고, 각종 공모전 참여를 통해 실력을 검증받고자 합니다. 궁극적으로는 이러한 기술들을 융합하여 데이터의 신뢰성과 보안을 보장하고, 효율적인 시스템을 설계하는 전문가로 성장하고 싶습니다.</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>자기 소개서</category>
  <guid>https://cryscham123.github.io/posts/01_projects/bs_3_1/notes/scholarships/1.html</guid>
  <pubDate>Thu, 16 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>ft_transcendence - github action</title>
  <link>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/1.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">intro</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/42-course-6.png" class="img-fluid figure-img"></p>
<figcaption>42 seoul 공통과정 6서클 과제</figcaption>
</figure>
</div>
<p>42 Seoul 공통과정의 마지막 과제입니다. 이 프로젝트는 개발자가 선호하는 라이브러리와 프레임워크를 자유롭게 선택하여 구현할 수 있다는 점이 특징입니다.</p>
<p>대형 협업 과제인 만큼, 과제에 명시되어있지 않지만 협업을 위한 툴도 공부해서 다양하게 적용해볼 수 있는 좋은 과제인것 같습니다. 저같은 경우에는 coursera, udemy 강의를 통해 <strong>agile</strong> 협업 방식과 <strong>github에서의 적용 방법</strong>에 대해 공부를 했고, 프로젝트 진행에 있어서 꽤 도움이 됐던걸로 기억합니다. 사실 프로젝트를 진행하다보니, agile 방식을 온전히 다 적용하기엔 적합하지 않다고 판단했지만, <strong>Kanban Board</strong>로 프로젝트를 관리하는 것 같은 부분은 꽤 유용하게 활용할 수 있었습니다.</p>
</section>
<section id="프로젝트-및-구현-설명" class="level2">
<h2 class="anchored" data-anchor-id="프로젝트-및-구현-설명">프로젝트 및 구현 설명</h2>
<section id="개요" class="level3">
<h3 class="anchored" data-anchor-id="개요">개요</h3>
<p><a href="https://cdn.intra.42.fr/pdf/pdf/140713/en.subject.pdf">과제 명세서</a></p>
<p>해당 과제는 실시간 <a href="https://www.ponggame.org/">Pong 게임</a> 매칭 웹사이트를 만드는게 목표입니다. 저는 이번 프로젝트에서 <strong>github action 설정, User Management Backend 설계와 42 API를 이용한 OAuth 인증, JWT 구현, Game History를 Block Chain으로 저장</strong>하는 파트를 담당했습니다.</p>
<p>참고한 자료는 다음과 같습니다:</p>
<ul>
<li><a href="https://www.coursera.org/learn/agile-project-management">Google Agile Project 관리</a></li>
<li><a href="https://docs.github.com/ko/actions">Github Action Docs</a></li>
<li><a href="https://cli.github.com/manual/">Github CLI Docs</a></li>
<li><a href="https://www.udemy.com/course/python-django-the-practical-guide/?couponCode=KRLETSLEARNNOW">Django udemy 강좌</a></li>
<li><a href="https://www.django-rest-framework.org/">Django Rest Framework Docs</a></li>
<li><a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/index.html">Django Simple JWT</a></li>
<li><a href="https://mgyo.tistory.com/832">JWT Token 탈취 대응 시나리오</a></li>
<li><a href="https://medium.com/@jose-luis-navarro/securing-our-microservices-through-authentication-and-authorization-with-jwt-refresh-tokens-and-f4439810fce7">micro service에서 JWT 활용 방법</a></li>
<li><a href="https://puleugo.tistory.com/154">Refresh Token을 사용해야 하는 이유</a></li>
<li><a href="https://www.hahwul.com/2020/01/18/samesite-lax/">Cookie에서의 same site 옵션</a></li>
<li><a href="https://bitcoin.org/files/bitcoin-paper/bitcoin_ko.pdf">Bitcoin 백서</a></li>
<li><a href="https://www.udemy.com/course/ethereum-and-solidity-the-complete-developers-guide/?couponCode=KRLETSLEARNNOW">Solidity Udemy 강의</a></li>
<li><a href="https://docs.soliditylang.org/en/latest/">Solidity Docs</a></li>
<li><a href="https://youtube.com/playlist?list=PL7jH19IHhOLOJfXeVqjtiawzNQLxOgTdq&amp;si=k5TMs5VUF0Z1xIA2">nomad coder 블록체인 시리즈</a></li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>이 포스팅에서는 <strong>github action setting, jwt, block chain</strong> 부분만 다루겠습니다.<br>
전체 코드는 비공개 되어있는 상태입니다.</p>
</div>
</div>
</div>
</section>
<section id="github-action-setting" class="level3">
<h3 class="anchored" data-anchor-id="github-action-setting">Github Action Setting</h3>
<p>github를 이용해서 agile 방법론을 적용할 수 있도록 의도했고, <strong>자동화</strong>와 <strong>template</strong>을 이용해 통일성 있는 구조를 유지하려고 했습니다.</p>
<p><strong>1. 회의를 통해 진행해야 하는 작업을 Kanban board에 정리한다.</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-17-11-28-18.png" class="img-fluid figure-img"></p>
<figcaption>Github Kanban Board</figcaption>
</figure>
</div>
<p>각각의 column에는 다음과 같은 내용이 들어갑니다.</p>
<ol type="1">
<li><strong>Discussion</strong>: 논의가 필요한 작업. 개개인이 자유롭게 올릴 수 있습니다</li>
<li><strong>Backlog</strong>: Discussion에 있는 내용 중 구현하기로 회의에서 정한 작업</li>
<li><strong>Ready</strong>: Back log에 있는 작업 중 이번 Sprint에서 구현할 작업들</li>
<li><strong>In Progress</strong>: Ready에 있는 작업 중 누군가가 작업중인 것</li>
<li><strong>Done</strong>: master branch에 merge가 완료된 작업</li>
</ol>
<p>자세한 내용은 meeting 부분을 참고해 주세요.</p>
<p>참고로 <strong>Disccusion</strong>에 작업을 올리는 방법은 <strong>template에 맞게 issue를 올리</strong>면 됩니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-16-19-51-40.png" class="img-fluid figure-img"></p>
<figcaption>Discussion template</figcaption>
</figure>
</div>
<p>아래와 같이 설정 파일을 만들어서 ‘.github/ISSUE_TEMPLATE/’ 폴더 안에 저장하면 issue create 시 자동으로 template이 뜨게 할 수 있습니다.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">name:</span> New discussion</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">description:</span> new discussion</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">title:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[DISCUSSION]"</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">labels:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enhancement"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">projects:</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org_name/5"</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">body:</span></span>
<span id="cb1-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> type: markdown</span>
<span id="cb1-8">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">attributes:</span></span>
<span id="cb1-9">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">value:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb1-10">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">해당</span> 기능과 관련된 request가 이미 존재하는지 확인해주세요.</span>
<span id="cb1-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> type: textarea</span>
<span id="cb1-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">id:</span> story</span>
<span id="cb1-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">attributes:</span></span>
<span id="cb1-14">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">label:</span> Story</span>
<span id="cb1-15">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">description:</span> 해당 기능에 대한 설명이나 필요한 배경을 작성해주세요.</span>
<span id="cb1-16">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">placeholder:</span> 자유로운 양식으로 작성해주세요.</span>
<span id="cb1-17">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">validations:</span></span>
<span id="cb1-18">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">required:</span> true</span></code></pre></div>
<p><strong>2. Kanban board를 보고 개인이 능동적으로 고유 브랜치에 작업을 진행한다.</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-17-11-29-41.png" class="img-fluid figure-img"></p>
<figcaption>빨간 밑줄 부분을 설정해줍니다.</figcaption>
</figure>
</div>
<p>Kanban board의 Ready section에 있는 작업을 클릭해서 들어간 후, <strong>assignees를 본인으로 선택해서 작업</strong>하면 됩니다. <strong>task completion criteria</strong>라는 내용이 보이는데, 이는 <strong>회의를 통해 결정</strong>하는 것으로, 나중에 작업이 완료되고 <strong>pull request 시, 평가자가 작업에 완성도에 대해 판단할 수 있는 기준</strong>으로 제공됩니다.</p>
<p>자동화 코드는 아래와 같이 구현했습니다.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">name:</span> Create branch</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">on:</span></span>
<span id="cb2-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">issues:</span></span>
<span id="cb2-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">types:</span> [ assigned ]</span>
<span id="cb2-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pull_request:</span></span>
<span id="cb2-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">types:</span> [ opened, closed ]</span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jobs:</span></span>
<span id="cb2-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">create_issue_branch_job:</span></span>
<span id="cb2-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">runs-on:</span> ubuntu-latest</span>
<span id="cb2-10">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">steps:</span></span>
<span id="cb2-11">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Generate token</span>
<span id="cb2-12">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">id:</span> generate_token</span>
<span id="cb2-13">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uses:</span> tibdex/github-app-token@v2</span>
<span id="cb2-14">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">with:</span></span>
<span id="cb2-15">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app_id:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ secrets.APP_ID </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb2-16">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">private_key:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ secrets.PRIVATE_KEY </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb2-17"></span>
<span id="cb2-18">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gh 명령어를 이용해 project의 상태를 In progress로 수정해줍니다.</span></span>
<span id="cb2-19">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Project in-progress</span>
<span id="cb2-20">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">if:</span> github.event.action == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'assigned'</span></span>
<span id="cb2-21">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">run:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb2-22">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PROJECT_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> project view 5 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--owner</span> organization-for-practice <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--jq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.id'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-23">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ITEM_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> project item-list 5 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--owner</span> organization-for-practice <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--jq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".items[] | select(.content.number == </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${NUMBER}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">) | .id"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-24">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FIELD_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> project field-list 5 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--owner</span> organization-for-practice <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--jq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.fields[2].id'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-25">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">SINGLE_ID</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> project field-list 5 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--owner</span> organization-for-practice <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--jq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.fields[2].options[] | select(.name == "In progress") | .id'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb2-26">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> project item-edit <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--id</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ITEM_ID}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--field-id</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${FIELD_ID}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--single-select-option-id</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${SINGLE_ID}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project-id</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PROJECT_ID}</span></span>
<span id="cb2-27">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">env:</span></span>
<span id="cb2-28">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GH_TOKEN:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ steps.generate_token.outputs.token </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb2-29">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NUMBER:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ github.event.issue.number </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb2-30"></span>
<span id="cb2-31">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign한 작업에 대한 branch를 새로 만들어줍니다.</span></span>
<span id="cb2-32">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Create Issue Branch</span>
<span id="cb2-33">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uses:</span> robvanderleek/create-issue-branch@main</span>
<span id="cb2-34">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">env:</span></span>
<span id="cb2-35">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GITHUB_TOKEN:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ steps.generate_token.outputs.token </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span></code></pre></div>
<p>위의 코드는 assign한 작업을 Ready column에서 In progress column으로 옮겨주고, 자동으로 작업할 branch를 만들어줍니다.</p>
<p>branch 자동 생성은 <a href="https://github.com/robvanderleek/create-issue-branch">이 workflow</a>를 사용하였고, 적용 시 아래와 같이 브랜치가 생성됩니다.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoLinkIssue</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoCloseIssue</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branchName</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> tiny</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">commentMessage</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb3-5">  \"${branchName}\" branch 생성 완료.</span>
<span id="cb3-6">  해당 branch를 통해서 main에 pull request 올려주세요.</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">branches</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task list'</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prefix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> feature/${issue.title[12,27],}/</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">copyIssueAssigneeToPR</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bug'</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prefix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> hot_fix/${issue.title[6,21],}/</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">copyIssueAssigneeToPR</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">skip</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
<p>위의 config 파일을 작성해주면 아래와 같이 브랜치가 생성됩니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-17-11-30-26.png" class="img-fluid figure-img"></p>
<figcaption>자동 생성된 branch</figcaption>
</figure>
</div>
<p>이름도 자동으로 생성되게 해서 <strong>convention을 지켜야 한다는 부담을 줄여</strong>줬습니다.</p>
<p><strong>3. 작업이 완료되면, 모든 조건을 충족하는지 확인한 후, master에 merge 한다.</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-17-11-31-07.png" class="img-fluid figure-img"></p>
<figcaption>pull request 화면</figcaption>
</figure>
</div>
<p>작업이 완료됬다고 판단되면 위 화면과 같이 <strong>pull request를 생성</strong>하고, <strong>Reviewer를 설정</strong>해주면 됩니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-17-11-31-35.png" class="img-fluid figure-img"></p>
<figcaption>task completion criteria</figcaption>
</figure>
</div>
<p>그러면 이전에 설정했던 기준들이 자동으로 불러와지고, <strong>모든 항목에 체크가 완료</strong>되어야 <strong>merge를 할 수 있게 설정</strong>했습니다. 구현 코드는 아래와 같습니다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">name:</span> Master merge rutine</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">on:</span></span>
<span id="cb4-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pull_request_target:</span></span>
<span id="cb4-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">types:</span> [ opened, synchronize ]</span>
<span id="cb4-5">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">branches:</span></span>
<span id="cb4-6">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> master</span>
<span id="cb4-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">env:</span></span>
<span id="cb4-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">PR_NUM:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ github.event.pull_request.number </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-9">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GH_REPO:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ github.repository </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">jobs:</span></span>
<span id="cb4-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">get_checklist:</span></span>
<span id="cb4-12">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">runs-on:</span> ubuntu-latest</span>
<span id="cb4-13">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">if:</span> github.event.action == <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'opened'</span></span>
<span id="cb4-14">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">steps:</span></span>
<span id="cb4-15">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Generate token</span>
<span id="cb4-16">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">id:</span> generate_token</span>
<span id="cb4-17">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uses:</span> tibdex/github-app-token@v2</span>
<span id="cb4-18">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">with:</span></span>
<span id="cb4-19">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">app_id:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ secrets.APP_ID </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-20">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">private_key:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ secrets.PRIVATE_KEY </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-21">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Get issue</span>
<span id="cb4-22">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">id:</span> issue_num</span>
<span id="cb4-23">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">env:</span></span>
<span id="cb4-24">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">BRANCH:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ github.event.pull_request.head.ref </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-25">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">run:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb4-26">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BRANCH</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feature\/.*\/i[0-9]\+'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BRANCH</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hot_fix\/.*\/i[0-9]\+'</span></span>
<span id="cb4-27">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TMP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$BRANCH</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'i[0-9]\+'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-28">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NUMBER=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${TMP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span>i<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_OUTPUT</span></span>
<span id="cb4-29">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Get issue body</span>
<span id="cb4-30">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">id:</span> issue_body</span>
<span id="cb4-31">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">env:</span></span>
<span id="cb4-32">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GH_TOKEN:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ steps.generate_token.outputs.token </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-33">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">NUM:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ steps.issue_num.outputs.number </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-34">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">run:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb4-35">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CONTENTS&lt;&lt;EOF"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_OUTPUT</span></span>
<span id="cb4-36">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> issue view <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${NUM}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--json</span> body <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--jq</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.body'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_OUTPUT</span></span>
<span id="cb4-37">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EOF"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_OUTPUT</span></span>
<span id="cb4-38">      <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">-</span> name: Update checklist</span>
<span id="cb4-39">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">run:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span></span>
<span id="cb4-40">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gh</span> pr comment <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PR_NUM</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--body</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${BODY}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-41">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">env:</span></span>
<span id="cb4-42">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">GH_TOKEN:</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ steps.generate_token.outputs.token </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>}</span>
<span id="cb4-43">          <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">BODY:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">{ steps.issue_body.outputs.contents </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}"</span></span></code></pre></div>
<p><strong>merge가 완료된 branch</strong>는 <strong>자동으로 삭제</strong>가 되도록 설정을 해주었습니다.</p>
<p>이제 아래는 실제 <strong>프로젝트를 진행할 때 만들었던 rule</strong>들입니다.</p>
<section id="work-flow" class="level4">
<h4 class="anchored" data-anchor-id="work-flow"><strong>1. work flow</strong></h4>
<p><strong>github flow</strong>로 진행됩니다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-16-20-11-33.png" class="img-fluid figure-img"></p>
<figcaption>github flow</figcaption>
</figure>
</div>
<ol type="1">
<li>매 작업은 master branch의 HEAD를 기반으로 이루어집니다.<br>
pr을 올리지 않는 개인 작업용 <strong>local branch는 자유롭게 생성</strong>해주세요.</li>
<li>master에 직접적인 push는 관리자를 제외하고는 불가능합니다.</li>
<li>master에 대한 merge는 squash merge로 진행됩니다.</li>
<li>그 외의 merge는 rebase로 진행해주세요.</li>
</ol>
</section>
<section id="work" class="level4">
<h4 class="anchored" data-anchor-id="work"><strong>2. work</strong></h4>
<ol type="1">
<li>kanban board의 'Ready' 섹션에서 하나를 정해서 새로운 기능에 대한 작업을 진행해주세요.<br>
선택한 작업은 assignees에 자신의 팀원을 등록 후, Start Date를 해당 날짜로 설정해주세요.<br>
assignees 등록이 완료되면 자동으로 target branch가 생성됩니다.<br>
해당 branch에 팀원들이 필요한 기능들을 자유로운 방식으로 구현한 후, master branch에 merge 해주세요.<br>
단, 해당 branch에 대한 merge는 rebase로 진행해주세요.</li>
<li>hot_fix issue나, new feature request issue는 discussion의 필요성이 있을 경우에 등록해주세요.</li>
<li>작업 중, 현재 작업하는 범위 외에서 추가적인 기능이 필요할 경우 관련 issue에 comment를 남기거나, reopen 해주세요.</li>
</ol>
</section>
<section id="commit-message-convention" class="level4">
<h4 class="anchored" data-anchor-id="commit-message-convention"><strong>3. commit message convention</strong></h4>
<p>아래의 명령어를 입력해주세요</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> config commit.template .github/COMMIT_MESSAGE_TEMPLATE</span></code></pre></div>
<p>이후, -m 옵션 없이 ’git commit’으로 message를 입력해주세요.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>COMMIT_MESSAGE_TEMPLATE</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="COMMIT_MESSAGE_TEMPLATE" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># commit message template</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ▼ &lt;Title&gt; 작성</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ▼ &lt;빈 줄&gt;</span></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ▼ &lt;body&gt; 작성</span></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ▼ &lt;빈 줄&gt;</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ▼ &lt;footer&gt; 작성</span></span>
<span id="cb6-11"></span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># About Convention</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   &lt;Title&gt;</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 필수로 입력해주세요</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 형식: &lt;type&gt;: &lt;short summary&gt;</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       &lt;type&gt;</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - config: 설정 관련 파일 작성 또는 변경</span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - docs: 문서 변경사항</span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - feat: 새로운 기능</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - fix: 버그 수정</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - refactor: 기능 추가나 버그 수정이 아닌 변경 사항</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - remove: 코드나 파일 제거</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - style: 스타일 작성 또는 수정</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - test: 누락된 테스트 추가 또는 기존 테스트 수정</span></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - core: 기능 구현 외 시스템 관련 작업</span></span>
<span id="cb6-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       &lt;short summary&gt;</span></span>
<span id="cb6-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - 변경 사항에 대한 간단한 설명</span></span>
<span id="cb6-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#           - 첫글자 소문자, 현재 시제, 명령문으로 마지막에 .(마침표) 없이 작성</span></span>
<span id="cb6-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   &lt;body&gt;</span></span>
<span id="cb6-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 선택적으로 입력 해주세요</span></span>
<span id="cb6-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 현재 시제, 명령문으로 작성</span></span>
<span id="cb6-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 변경 사항의 동기(왜)를 설명</span></span>
<span id="cb6-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 변경 효과를 설명하기 위해 이전 동작과 현재 동작의 비교를 포함할 수 있음</span></span>
<span id="cb6-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb6-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   &lt;footer&gt;</span></span>
<span id="cb6-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 선택적으로 입력 해주세요</span></span>
<span id="cb6-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 해당 commit과 관련된 task의 issue 번호들을 적어주세요</span></span>
<span id="cb6-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - 'bug'나 'task list' label이 붙은 issue는 제외해주세요</span></span>
<span id="cb6-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       - ex) closes #&lt;issue 번호&gt; closes #&lt;issue 번호&gt; ...</span></span></code></pre></div>
</div>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>commit message template은 <a href="https://www.conventionalcommits.org/en/v1.0.0/">이 사이트</a>를 참고해서 만들었습니다.</p>
</div>
</div>
</div>
</section>
<section id="pull-request" class="level4">
<h4 class="anchored" data-anchor-id="pull-request"><strong>4. pull request</strong></h4>
<ol type="1">
<li>pull request는 <strong>500줄의 코드</strong>를 넘어가지 않게 작성 바랍니다.</li>
<li>모든 check list를 통과한 request만 master에 merge 가능합니다.</li>
<li>reviewers에는 해당 작업과 관련된 domain의 팀원을 선택해주세요. 최소 1명 이상의 동료에게 평가를 받은 request만 merge 가능합니다.</li>
</ol>
</section>
<section id="meeting" class="level4">
<h4 class="anchored" data-anchor-id="meeting"><strong>5. meeting</strong></h4>
<ul>
<li><p>daily meeting</p>
<ul>
<li><p>매일 정해진 시간에 팀원들은 각각 다음과 같은 사안에 대해 논의합니다.</p>
<ol type="1">
<li>개인이 어제 작업한 내용</li>
<li>개인이 오늘 작업할 내용</li>
<li>개인이 현재 도움이 필요한 내용</li>
</ol></li>
<li><p>이후, 새로운 내용이 추가된 ('Disccusion' 섹션에 있는) issue 중 다음과 같은 내용에 대해 논의합니다.</p>
<ol type="1">
<li>해당 issue가 유효한가</li>
<li>추가적으로 필요하거나 필요 없는 내용</li>
<li>해당 issue의 priority (매우 급함 / 급함 / 안 급함)</li>
<li>해당 issue의 estimate (작업하는데 필요한 노력의 정량적인 수치)</li>
</ol></li>
<li><p>추가적으로, project의 'Back log' 항목에서 'Ready' 항목으로 추가해야 할 작업에 대해 논의하거나 'Ready' 항목에서 'Back log' 항목으로 제외할 작업에 대해 논의할 수 있습니다.</p></li>
</ul></li>
<li><p>sprint planning / retrospective</p>
<ul>
<li>2주에 한번 진행.</li>
<li>이전 sprint에 대한 평가와 이후 sprint를 위한 계획을 세웁니다.<br>
</li>
<li>planning
<ul>
<li>Project의 'Back log' 항목 중 본격적으로 작업을 진행할 항목을 정합니다.</li>
<li>daily meeting 시간을 조정할 수 있습니다.</li>
</ul></li>
<li>retrospective
<ul>
<li>이전 sprint의 문제점에 대해 서로 의논해봅니다.</li>
</ul></li>
</ul></li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>프로젝트를 하다보니, 생각보다 진행 속도가 빨라서 2주에 한번 진행하는 sprint는 유명무실해져버렸습니다. 실제로는 daily meeting만 진행을 했습니다.</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">outro</h2>
<p>내용이 너무 길어져서 2편에 계속 포스팅 하겠습니다.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>agile</category>
  <category>github action</category>
  <category>42 seoul</category>
  <guid>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/1.html</guid>
  <pubDate>Thu, 16 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>ft_transcendence - block chain</title>
  <link>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/3.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>아직 작성중인 노트입니다.</p>
</div>
</div>
</div>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">intro</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/42-course-6.png" class="img-fluid figure-img"></p>
<figcaption>42 seoul 공통과정 6서클 과제</figcaption>
</figure>
</div>
<p><a href="../../../../posts/02_areas/42_seoul/notes/0.html">1편 github action</a>과 <a href="../../../../posts/02_areas/42_seoul/notes/1.html">2편 JWT</a>에 이어서 block chain 파트에 대해 설명하겠습니다.</p>
</section>
<section id="프로젝트-및-구현-설명" class="level2">
<h2 class="anchored" data-anchor-id="프로젝트-및-구현-설명">프로젝트 및 구현 설명</h2>
<section id="block-chain" class="level3">
<h3 class="anchored" data-anchor-id="block-chain">Block Chain</h3>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>블록 체인의 개념적인 자세한 설명은 생략하겠습니다.</p>
</div>
</div>
</div>
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-16-20-40-25.png" class="img-fluid"> <img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-16-20-40-38.png" class="img-fluid" alt="block chain 요구사항"></p>
<p><strong>이더리움</strong>은 비트코인과 함께 가장 잘 알려진 블록체인 플랫폼 중 하나입니다. 하지만 비트코인이 단순히 디지털 화폐에 중점을 둔 반면, 이더리움은 <strong>스마트 컨트랙트 기능</strong>을 통해 <strong>더 다양한 응용 프로그램</strong>(Decentralized Applications, DApps)을 지원합니다.</p>
<p><strong>스마트 컨트랙트</strong>는 블록체인 상에서 동작하는 자동화된 계약입니다. 이는 코드로 작성된 계약 조건을 블록체인에 저장하고, <strong>특정 조건이 충족되면 자동으로 실행되는 프로그램</strong>입니다. 스마트 컨트랙트의 주요 특징은 다음과 같습니다:</p>
<ul>
<li><p><strong>자동 실행</strong>: 계약 조건이 충족되면 코드가 자동으로 실행됩니다. 중간에 인간의 개입이 필요하지 않습니다.</p></li>
<li><p><strong>투명성</strong>: 블록체인에 저장되기 때문에 모든 거래 내역이 공개되고 검증 가능합니다.</p></li>
<li><p><strong>불변성</strong>: 한 번 배포된 스마트 컨트랙트는 수정이 불가능합니다. 이는 신뢰성을 보장합니다.</p></li>
<li><p><strong>분산화</strong>: 중앙 집중형 서버가 필요 없이 블록체인 네트워크 상에서 실행됩니다.</p></li>
</ul>
<p>명세서에 따르면, 스마트 컨트랙트를 테스트하기 위한 로컬 개발 환경이 필요합니다. 이를 위해 <strong>가나슈(Ganache)</strong>를 사용했습니다. 가나슈는 이더리움 블록체인의 로컬 테스트넷을 제공하는 도구로, 개발자가 스마트 컨트랙트를 배포하고 테스트할 수 있는 가상 환경을 만들어 줍니다. 스마트 컨트랙트 작성 후, solidity로 컴파일해서 가나슈 블록체인 환경에 저장을 해주겠습니다.</p>
<p>먼저 가나슈 테스팅 환경 세팅입니다.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> node:alpine</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">npm</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> ganache</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ganache</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> 0.0.0.0 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--wallet.accounts</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${BLOCK_CHAIN_PRIVATE_KEY}</span>,0x1000000000000000000 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--miner.coinbase</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${BLOCK_CHAIN_ACCOUNT}</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--database.dbPath</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${BLOCK_CHAIN_DB_PATH}</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--chain.networkId</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${BLOCK_CHAIN_NETWORK_ID}</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--chain.asyncRequestProcessing</span></span></code></pre></div>
<p>docker container로 실행되도록 설정했습니다.</p>
<pre class="solidity"><code>// SPDX-License-Identifier: GPL-3.0
pragma solidity &gt;=0.4.22 &lt;0.9.0;
contract TournamentHistory {
    struct Tournament {
        uint    tournament_id;
        uint    datetime;
        string  winner;
        Game[3] games;
    }
    struct Game {
        uint    datetime;
        uint[2] players;
        string  winner;
        string  rally;
    }
    address public  chairperson;
    uint private tournament_total;
    mapping(uint =&gt; uint) private user_log_total;

    event TournamentDetail(
        uint indexed    tournament_id,
        uint            datetime,
        string          winner,
        Game[3]         games
    );

    event TournamentDetailForUser(
        uint            tournament_id,
        uint indexed    user_id,
        uint indexed    user_log_key,
        uint            datetime,
        string          winner,
        Game[3]         games
    );

    constructor() {
        chairperson = msg.sender;
    }

    function addTournament(
        uint            datetime,
        string  memory  winner,
        uint[4] memory  user_id,
        Game[3] memory  games
    ) 
        external
    {
        require(msg.sender == chairperson, "You dont have permission to add a tournament.");
        emit TournamentDetail(++tournament_total, datetime, winner, games);
        for (uint i = 0; i &lt; 4; i++) {
            emit TournamentDetailForUser(
                tournament_total,
                user_id[i], 
                user_log_total[user_id[i]]++,
                datetime, 
                winner, 
                games
            );
        }
    }
}</code></pre>
<p>Pong Game의 Tournament 경기 정보를 저장하는 smart contract 입니다.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json, os</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> web3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Web3</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> solcx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> compile_standard, install_solc, set_solc_version</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/block_chain/contracts/TournamentHistory.sol"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb3-6">    contract_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb3-7"></span>
<span id="cb3-8">install_solc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.8.20"</span>)</span>
<span id="cb3-9">set_solc_version(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.8.20"</span>)</span>
<span id="cb3-10">compiled_sol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compile_standard(</span>
<span id="cb3-11">    {</span>
<span id="cb3-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"language"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Solidity"</span>,</span>
<span id="cb3-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sources"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory.sol"</span>: {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: contract_file}},</span>
<span id="cb3-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"settings"</span>:{</span>
<span id="cb3-15">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outputSelection"</span>: {</span>
<span id="cb3-16">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>: {</span>
<span id="cb3-17">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abi"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"evm.bytecode"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"evm.sourceMap"</span>]}</span>
<span id="cb3-18">            }</span>
<span id="cb3-19">        }, </span>
<span id="cb3-20">    }</span>
<span id="cb3-21">)</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/block_chain/contracts/compiled_code.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb3-24">    json.dump(compiled_sol, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb3-25"></span>
<span id="cb3-26">bytecode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compiled_sol[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contracts"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory.sol"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"evm"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytecode"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>]</span>
<span id="cb3-27">abi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(compiled_sol[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contracts"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory.sol"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abi"</span>]</span>
<span id="cb3-28">w3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Web3(Web3.HTTPProvider(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://block_chain:8545"</span>))</span>
<span id="cb3-29">chain_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLOCK_CHAIN_NETWORK_ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-30">account_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLOCK_CHAIN_ACCOUNT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-31">private_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLOCK_CHAIN_PRIVATE_KEY"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-32"></span>
<span id="cb3-33">TournamentHistory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w3.eth.contract(abi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>abi, bytecode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bytecode)</span>
<span id="cb3-34">nonce <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w3.eth.get_transaction_count(account_address)</span>
<span id="cb3-35">transaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TournamentHistory.constructor().build_transaction(</span>
<span id="cb3-36">    {</span>
<span id="cb3-37">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chainId"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(chain_id),</span>
<span id="cb3-38">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gasPrice"</span>: w3.eth.gas_price,</span>
<span id="cb3-39">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>: account_address,</span>
<span id="cb3-40">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nonce"</span>: nonce,</span>
<span id="cb3-41">    }</span>
<span id="cb3-42">)</span>
<span id="cb3-43">signed_txn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w3.eth.account.sign_transaction(transaction, private_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>private_key)</span>
<span id="cb3-44">tx_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w3.eth.send_raw_transaction(signed_txn.rawTransaction)</span>
<span id="cb3-45">tx_receipt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w3.eth.wait_for_transaction_receipt(tx_hash)</span>
<span id="cb3-46"></span>
<span id="cb3-47">compiled_sol[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contracts'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TournamentHistory.sol'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TournamentHistory'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contract_address'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tx_receipt.contractAddress</span>
<span id="cb3-48">compiled_sol[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'contracts'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TournamentHistory.sol'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TournamentHistory'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nonce'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(nonce)</span>
<span id="cb3-49"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/block_chain/contracts/compiled_code.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb3-50">    json.dump(compiled_sol, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span></code></pre></div>
<p>위 로직으로 compile 후, 가나슈에 베포되도록 했습니다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">This module is for storing and retrieving tournament data from the blockchain.</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json, os</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> web3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Web3</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> django.conf <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> settings</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Tournament:</span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Store and retrieve tournament data from the blockchain.</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-12">    chain_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLOCK_CHAIN_NETWORK_ID"</span>))</span>
<span id="cb4-13">    account_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLOCK_CHAIN_ACCOUNT"</span>)</span>
<span id="cb4-14">    private_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.environ.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLOCK_CHAIN_PRIVATE_KEY"</span>)</span>
<span id="cb4-15">    </span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Web3(Web3.HTTPProvider(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://block_chain:8545"</span>))</span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/etc/block_chain/contracts/compiled_code.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-19">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb4-20">        abi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contracts"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory.sol"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metadata"</span>])[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abi"</span>]</span>
<span id="cb4-21">        contract_address <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config_file[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contracts"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory.sol"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TournamentHistory"</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"contract_address"</span>]</span>
<span id="cb4-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.contract <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3.eth.contract(address<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>contract_address, abi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>abi)</span>
<span id="cb4-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tournament_detail_event <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.contract.events.TournamentDetail</span>
<span id="cb4-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tournament_detail_for_user_event <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.contract.events.TournamentDetailForUser</span>
<span id="cb4-25"></span>
<span id="cb4-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> store_tournament(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tournament_date, winner, players, games):</span>
<span id="cb4-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Store tournament data in the blockchain.</span></span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        argument means:</span></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        1. tournament date 2. winner:string 3. players:uint[4] 4. games:tuple[3]</span></span>
<span id="cb4-32"></span>
<span id="cb4-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The games what is tuple means:</span></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        (game start time, players:uint[2], winner:string, rally:string)</span></span>
<span id="cb4-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-36">        nonce <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3.eth.get_transaction_count(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.account_address)</span>
<span id="cb4-37">        transaction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.contract.functions.addTournament(</span>
<span id="cb4-38">            tournament_date,</span>
<span id="cb4-39">            winner,</span>
<span id="cb4-40">            players,</span>
<span id="cb4-41">            games</span>
<span id="cb4-42">        ).build_transaction({</span>
<span id="cb4-43">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chainId"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chain_id,</span>
<span id="cb4-44">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gasPrice"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3.eth.gas_price,</span>
<span id="cb4-45">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.account_address,</span>
<span id="cb4-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nonce"</span>: nonce,</span>
<span id="cb4-47">        })</span>
<span id="cb4-48">        signed_txn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3.eth.account.sign_transaction(transaction, private_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.private_key)</span>
<span id="cb4-49">        tx_hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3.eth.send_raw_transaction(signed_txn.rawTransaction)</span>
<span id="cb4-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w3.eth.wait_for_transaction_receipt(tx_hash)</span>
<span id="cb4-51">        </span>
<span id="cb4-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_tournament_for_user(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, user_id, page, total):</span>
<span id="cb4-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieve tournament data from the blockchain for a specific user.</span></span>
<span id="cb4-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Please give page argument directly from the request.</span></span>
<span id="cb4-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        You will get max 10 logs per page if exist.</span></span>
<span id="cb4-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If no data in given page, empty array will return</span></span>
<span id="cb4-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Also, if argeuments are invalid (not unsigned int), empty array will return.</span></span>
<span id="cb4-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> user_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> []</span>
<span id="cb4-62">        page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-63">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> settings.PAGE_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(settings.PAGE_SIZE)]</span>
<span id="cb4-64">        logs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tournament_detail_for_user_event.create_filter(</span>
<span id="cb4-65">            fromBlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb4-66">            toBlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latest'</span>, </span>
<span id="cb4-67">            argument_filters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_id'</span>: user_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_log_key'</span>: target})</span>
<span id="cb4-68">        ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> log <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> logs.get_all_entries():</span>
<span id="cb4-70">            ret.insert(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, log.args)</span>
<span id="cb4-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ret</span>
<span id="cb4-72"></span>
<span id="cb4-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_tournament(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, tournament_id):</span>
<span id="cb4-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieve tournament data from the blockchain with id.</span></span>
<span id="cb4-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If tournament_id is not exist, None will return.</span></span>
<span id="cb4-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> tournament_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-79">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-80">        logs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.tournament_detail_event.create_filter(</span>
<span id="cb4-81">            fromBlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, </span>
<span id="cb4-82">            toBlock<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latest'</span>, </span>
<span id="cb4-83">            argument_filters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tournament_id'</span>: tournament_id})</span>
<span id="cb4-84">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [log.args <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> log <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> logs.get_all_entries()]</span>
<span id="cb4-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> target[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> target <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<p>web3.0을 이용해 모듈화 해줬습니다.</p>
</section>
</section>
<section id="결과" class="level2">
<h2 class="anchored" data-anchor-id="결과">결과</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/printf-score.png" class="img-fluid figure-img"></p>
<figcaption>최종 점수</figcaption>
</figure>
</div>
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-13-20-12-05.png" class="img-fluid"></p>
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-13-20-12-58.png" class="img-fluid"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-13-20-13-50.png" class="img-fluid figure-img"></p>
<figcaption>최종 평가</figcaption>
</figure>
</div>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">outro</h2>
<p>ft_transcendence 과제는 통상 5인 팀이 2-3개월에 걸쳐 완성하는 대형 과제입니다. 이런 과제를 고작 3인이 한 달 만에 완료한것은 보통 일이 아니라고 생각합니다.</p>
<p>처음 계획했던 것보다 빠른 진행이 가능했던 건 팀원들의 기술적 역량이 높았던 것도 있지만, 팀원 전원이 지속적인 몰입과 집중력을 유지했던 것과, 매일 아침 미팅을 진행하며 지속적으로 팀원간 의사소통을 했던 것이 크게 작용했던 것 같습니다. 앞으로 이 과제를 수행하실 분들도 협업 능력을 키우는 용도로 해당 과제를 수행해 나가시면 큰 도움이 될거라 생각합니다.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>solidity</category>
  <category>42 seoul</category>
  <guid>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/3.html</guid>
  <pubDate>Thu, 16 Jan 2025 15:00:00 GMT</pubDate>
</item>
<item>
  <title>ft_transcendence - JWT</title>
  <link>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/2.html</link>
  <description><![CDATA[ 




<p><img src="https://cryscham123.github.io/img/stat-thumb.jpg" class="post-thumbnail img-fluid"></p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>아직 작성중인 노트입니다.</p>
</div>
</div>
</div>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">intro</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/img/42-course-6.png" class="img-fluid figure-img"></p>
<figcaption>42 seoul 공통과정 6서클 과제</figcaption>
</figure>
</div>
<p><a href="../../../../posts/02_areas/42_seoul/notes/0.html">1편 github action</a>에 이어서 JWT 파트에 대해 설명하겠습니다.</p>
</section>
<section id="프로젝트-및-구현-설명" class="level2">
<h2 class="anchored" data-anchor-id="프로젝트-및-구현-설명">프로젝트 및 구현 설명</h2>
<section id="jwt" class="level3">
<h3 class="anchored" data-anchor-id="jwt">JWT</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-16-20-37-17.png" class="img-fluid figure-img"></p>
<figcaption>security 요구사항</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://cryscham123.github.io/posts/02_areas/42_seoul/notes/img/2025-01-16-20-38-52.png" class="img-fluid figure-img"></p>
<figcaption>JWT 요구사항</figcaption>
</figure>
</div>
<p>비밀번호를 저장할 때는 암호화를 해야 한다는 요구사항이 있습니다. 이번 포스팅에서는 다루지 않지만, 우리의 구현에서는 비밀번호 없이 OAuth만으로 로그인이 가능하도록 설계했습니다. 따라서 사용자가 직접 비밀번호를 설정하지는 않습니다.</p>
<p>다만, JWT 구현 과정에서 비밀번호로 간주될 수 있는 부분이 있다고 판단하여 해시 처리를 추가했습니다. 이는 명세서의 해당 요구사항을 반영한 것입니다.</p>
<section id="개념" class="level4">
<h4 class="anchored" data-anchor-id="개념">개념</h4>
<p>구현에 대해 설명하기 전에, 먼저 <strong>JWT(JSON Web Token)가 무엇인지 이해</strong>해야 합니다. JWT는 <strong>토큰 기반 암호화 방식의 표준화된 형식</strong>으로, 다음과 같은 형태를 가지고 있습니다.</p>
<ol type="1">
<li><strong>Header</strong>: 토큰의 유형(예: JWT)과 사용된 암호화 알고리즘(예: HMAC SHA256)을 지정합니다.</li>
<li><strong>Payload</strong>: 토큰에 담을 정보를 포함합니다. 여기에는 클레임(Claim)이라고 불리는 키-값 쌍이 포함됩니다.</li>
<li><strong>Signature</strong>: 헤더와 페이로드를 합친 후, 지정된 알고리즘과 비밀 키를 사용해 서명한 값입니다. 이 서명은 토큰의 무결성을 보장합니다.</li>
</ol>
<p>각 부분은 점(.)으로 구분되며, Base64Url로 인코딩되어 있습니다.</p>
<p>토큰 암호화 방식은 왜 등장했을까요? 우리가 일반적으로 알고 있는 <strong>세션-쿠키 방식과는 어떤 차이</strong>가 있을까요?</p>
<ul>
<li><p><strong>세션-쿠키 방식</strong>: 사용자가 로그인하면 서버는 세션 ID를 생성하고 이를 사용자의 정보와 함께 <strong>데이터베이스나 메모리에 저장</strong>합니다. <strong>이후 클라이언트는 쿠키에 세션 ID를 저장</strong>하고, 요청마다 이를 서버로 전송합니다. 서버는 세션 ID를 검증하여 사용자를 인증합니다. 이 방식은 <strong>사용자가 증가할수록 서버의 메모리나 데이터베이스에 부담이 커집니다.</strong></p></li>
<li><p><strong>토큰 암호화 방식</strong>: 인증에 필요한 정보와 사용자의 정보(클레임)가 <strong>토큰 자체에 포함</strong>되어 있습니다. 서버는 토큰의 서명만 검증하면 되기 때문에 별도의 <strong>저장 공간이 필요하지 않습니다.</strong> 따라서 서버의 부하를 줄일 수 있습니다.</p></li>
</ul>
<p>즉, 기존의 세션-쿠키에서는 서버에 저장하던 정보를 토큰에 담아서 사용자한테 전달하는게 토큰 인증방식입니다. 언뜻 보기에는 토큰 암호화 방식이 세션-쿠키 방식의 상위호환처럼 보이지만, 토큰 방식에는 몇 가지 <strong>보안상의 위협</strong>이 존재합니다. 주요 위협과 그에 대한 대응 방법은 다음과 같습니다.</p>
<ul>
<li><p><strong>토큰 탈취</strong>: 토큰이 노출되면 공격자가 이를 악용할 수 있습니다.</p>
<p>대응 방법: <strong>HTTPS</strong>를 사용하여 통신을 암호화하고, 토큰의 <strong>유효 기간을 짧게</strong> 설정합니다. 또한, <strong>Refresh Token을 사용</strong>하여 Access Token의 유효 기간을 더욱 단축할 수 있습니다.</p></li>
<li><p><strong>XSS(Cross-Site Scripting) 공격</strong>: 악성 스크립트를 통해 토큰을 탈취할 수 있습니다.</p>
<p>대응 방법: <strong>HttpOnly와 Secure 플래그를 사용해 쿠키에 토큰을 저장</strong>합니다.</p></li>
<li><p><strong>CSRF(Cross-Site Request Forgery) 공격</strong>: 사용자의 권한을 도용해 악의적인 요청을 보낼 수 있습니다.</p>
<p>대응 방법: <strong>CSRF 토큰을 사용</strong>하거나, <strong>SameSite 속성을 설정</strong>해 쿠키를 보호합니다.</p></li>
<li><p>토큰 재생 공격: 탈취한 토큰을 재사용하는 공격입니다.</p>
<p>대응 방법: <strong>토큰에 일회용 nonce 값을 포함</strong>시키거나, <strong>토큰 블랙리스트를 관리</strong>합니다.</p></li>
</ul>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>토큰 탈취의 대응방법이 조금 허술하다고 느껴질 수 있습니다.<br>
더 많은 정보는 <a href="https://mgyo.tistory.com/832">이 포스팅</a>이 도움이 될것 같습니다.</p>
</div>
</div>
</div>
<p>인증 방식은 상황에 맞게 알맞은 선택을 하는게 중요합니다. 서버 확장성이나 경량화 측면에서는 토큰 인증 방식이 매력적인 이점을 가져다 줍니다. 하지만, <strong>보안이 중요한 서비스의 경우 session-cookie 방식이 더 유리</strong>할 수 있습니다.</p>
</section>
<section id="구현" class="level4">
<h4 class="anchored" data-anchor-id="구현">구현</h4>
<p>그럼 이제 구현 내용을 보도록 하겠습니다.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>middleware.py</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="middleware.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> JWTMiddleware:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, get_response):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_response</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request):</span>
<span id="cb1-6">        access <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.COOKIES.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>)</span>
<span id="cb1-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> access <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> request.path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/auth/ft'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> request.path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/auth/refresh'</span>:</span>
<span id="cb1-8">            request.META[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HTTP_AUTHORIZATION'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Bearer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>access<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-9">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_response(request)</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> responseclass JWTMiddleware:</span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, get_response):</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_response</span>
<span id="cb1-13"></span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request):</span>
<span id="cb1-15">        access <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.COOKIES.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>)</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> access <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> request.path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/auth/ft'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> request.path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/auth/refresh'</span>:</span>
<span id="cb1-17">            request.META[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HTTP_AUTHORIZATION'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Bearer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>access<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-18">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_response(request)</span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>settings.py</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="settings.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">SIMPLE_JWT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AUTH_HEADER_TYPES"</span>: (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bearer"</span>,),</span>
<span id="cb2-3">    </span>
<span id="cb2-4">    ...</span>
<span id="cb2-5">}</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>아_정리하기_귀찮아</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="아_정리하기_귀찮아" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_info_from_token(token, key):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-3">        payload <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jwt.decode(</span>
<span id="cb3-4">            token,</span>
<span id="cb3-5">            settings.SECRET_KEY,</span>
<span id="cb3-6">            algorithms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[settings.SIMPLE_JWT[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ALGORITHM'</span>]],</span>
<span id="cb3-7">            options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"verify_signature"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"verify_exp"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>}</span>
<span id="cb3-8">        )</span>
<span id="cb3-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> jwt.InvalidTokenError:</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb3-11">    ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> payload.get(key)</span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ret</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomTokenRefresh(APIView):</span>
<span id="cb3-15">    permission_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> post(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request):</span>
<span id="cb3-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-19">            refresh_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.COOKIES.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refresh'</span>)</span>
<span id="cb3-20">            access_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.COOKIES.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>)</span>
<span id="cb3-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> refresh_token <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-22">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> TokenError</span>
<span id="cb3-23">            user_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_info_from_token(refresh_token, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_id'</span>)</span>
<span id="cb3-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> user_id <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-25">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> TokenError</span>
<span id="cb3-26">            user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User.objects.get(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>user_id)</span>
<span id="cb3-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> access_token <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-28">                ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_info_from_token(access_token, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2FA'</span>)</span>
<span id="cb3-29">                is_weak <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ret <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span></span>
<span id="cb3-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-31">                is_weak <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> user.two_factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> user.refresh_token <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> check_password(refresh_token, user.refresh_token):</span>
<span id="cb3-33">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> TokenError</span>
<span id="cb3-34">            validate_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RefreshToken(refresh_token)</span>
<span id="cb3-35">            validate_token.check_exp()</span>
<span id="cb3-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> (TokenError, User.DoesNotExist) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb3-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(e, TokenError):</span>
<span id="cb3-38">                user.refresh_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-39">                user.save()</span>
<span id="cb3-40">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detail'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Given token not valid for any token type'</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">401</span>)</span>
<span id="cb3-41">            res.delete_cookie(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>)</span>
<span id="cb3-42">            res.delete_cookie(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refresh'</span>)</span>
<span id="cb3-43">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span>
<span id="cb3-44">        refresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RefreshToken.for_user(user)</span>
<span id="cb3-45">        user.last_login <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timezone.now()</span>
<span id="cb3-46">        user.refresh_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_password(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(refresh), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'md5'</span>)</span>
<span id="cb3-47">        user.save()</span>
<span id="cb3-48">        access <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> refresh.access_token</span>
<span id="cb3-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_weak:</span>
<span id="cb3-50">            access[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2FA'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span></span>
<span id="cb3-51">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Response(status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb3-52">        response.set_cookie(</span>
<span id="cb3-53">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>, </span>
<span id="cb3-54">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(access), </span>
<span id="cb3-55">            httponly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb3-56">            secure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-57">            samesite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lax'</span>)</span>
<span id="cb3-58">        response.set_cookie(</span>
<span id="cb3-59">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refresh'</span>, </span>
<span id="cb3-60">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(refresh), </span>
<span id="cb3-61">            httponly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb3-62">            path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/auth/refresh;"</span>,</span>
<span id="cb3-63">            secure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-64">            samesite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strict'</span>)</span>
<span id="cb3-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response</span>
<span id="cb3-66"></span>
<span id="cb3-67"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> AuthProvider(APIView):</span>
<span id="cb3-68">    permission_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-69"></span>
<span id="cb3-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, request, auth_name):</span>
<span id="cb3-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> auth_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ft'</span>:</span>
<span id="cb3-72">            ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_ft_user(request)</span>
<span id="cb3-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-74">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> Http404</span>
<span id="cb3-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(ret, HttpResponse) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(ret, Response):</span>
<span id="cb3-76">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ret</span>
<span id="cb3-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-78">            user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User.objects.get(oauth__id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>], oauth__provider<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"provider"</span>])</span>
<span id="cb3-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> User.DoesNotExist:</span>
<span id="cb3-80">            user_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User.objects.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>()</span>
<span id="cb3-81">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>):</span>
<span id="cb3-82">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb3-83">                    username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default_username'</span>]</span>
<span id="cb3-84">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-85">                    username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default_username"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:03d}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-86">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> user_list.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username).exists():</span>
<span id="cb3-87">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb3-88">            random_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>.join(random.choices(string.ascii_letters, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)) </span>
<span id="cb3-89">            user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User(</span>
<span id="cb3-90">                username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> username, </span>
<span id="cb3-91">                email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>],</span>
<span id="cb3-92">                oauth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb3-93">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>],</span>
<span id="cb3-94">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"provider"</span>: ret[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"provider"</span>],</span>
<span id="cb3-95">                },</span>
<span id="cb3-96">                password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_password(random_str, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'md5'</span>),</span>
<span id="cb3-97">            )</span>
<span id="cb3-98">            user.save()</span>
<span id="cb3-99">            user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> User.objects.get(username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username)</span>
<span id="cb3-100">            sync_user_to_game_db(user.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>, user.username)</span>
<span id="cb3-101">        user.last_login <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timezone.now()</span>
<span id="cb3-102">        refresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RefreshToken.for_user(user)</span>
<span id="cb3-103">        user.refresh_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_password(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(refresh), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'md5'</span>)</span>
<span id="cb3-104">        user.save()</span>
<span id="cb3-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> user.two_factor:</span>
<span id="cb3-106">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HttpResponseRedirect(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>settings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>BASE_URL<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/two-factor'</span>)</span>
<span id="cb3-107">            access <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> refresh.access_token</span>
<span id="cb3-108">            access[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2FA'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F'</span></span>
<span id="cb3-109">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-110">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HttpResponseRedirect(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>settings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>BASE_URL<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/home'</span>)</span>
<span id="cb3-111">            access <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> refresh.access_token</span>
<span id="cb3-112">        res.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">303</span></span>
<span id="cb3-113">        res.set_cookie(</span>
<span id="cb3-114">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>, </span>
<span id="cb3-115">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(access), </span>
<span id="cb3-116">            httponly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb3-117">            secure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-118">            samesite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lax'</span>)</span>
<span id="cb3-119">        res.set_cookie(</span>
<span id="cb3-120">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refresh'</span>, </span>
<span id="cb3-121">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(refresh), </span>
<span id="cb3-122">            httponly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb3-123">            path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/auth/refresh;"</span>,</span>
<span id="cb3-124">            secure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-125">            samesite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Strict'</span>)</span>
<span id="cb3-126">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span>
<span id="cb3-127"></span>
<span id="cb3-128"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_ft_user(request):</span>
<span id="cb3-129">    code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.GET.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'code'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb3-130">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>:</span>
<span id="cb3-131">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HttpResponseRedirect(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(settings, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AUTH_42_CLIENT_URL'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>))</span>
<span id="cb3-132">        response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">303</span></span>
<span id="cb3-133">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> response</span>
<span id="cb3-134">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb3-135">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.post(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'https://api.intra.42.fr/oauth/token?</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>urlencode({</span>
<span id="cb3-136">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grant_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'authorization_code'</span>,</span>
<span id="cb3-137">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'client_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(settings, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AUTH_42_CLIENT_ID'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb3-138">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'client_secret'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(settings, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AUTH_42_CLIENT_SECRET'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>),</span>
<span id="cb3-139">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'code'</span>: code,</span>
<span id="cb3-140">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'redirect_uri'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>settings<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>BASE_URL<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/auth/ft'</span>,</span>
<span id="cb3-141">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scope'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'public'</span>,</span>
<span id="cb3-142">        })<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-143">        response.raise_for_status()</span>
<span id="cb3-144">        response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://api.intra.42.fr/v2/me'</span>, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb3-145">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Authorization'</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Bearer </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>json()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access_token'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb3-146">        })</span>
<span id="cb3-147">        response.raise_for_status()</span>
<span id="cb3-148">        user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb3-149">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb3-150">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default_username"</span>: user[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"login"</span>],</span>
<span id="cb3-151">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"provider"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"42"</span>,</span>
<span id="cb3-152">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: user[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>],</span>
<span id="cb3-153">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>: user[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"email"</span>],</span>
<span id="cb3-154">        }</span>
<span id="cb3-155">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> (requests.exceptions.RequestException, JSONDecodeError, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">KeyError</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb3-156">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">401</span>:</span>
<span id="cb3-157">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"detail"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"잘못된 권한입니다"</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">401</span>)</span>
<span id="cb3-158">        logger.error(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: response code: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>status_code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and response body: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-159">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"detail"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Internal Server Error"</span>}, status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb3-160"></span>
<span id="cb3-161"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@api_view</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'POST'</span>])</span>
<span id="cb3-162"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@permission_classes</span>([IsAuthenticated])</span>
<span id="cb3-163"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> logOut(request):</span>
<span id="cb3-164">    user <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request.user</span>
<span id="cb3-165">    user.last_logout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>timezone.now()</span>
<span id="cb3-166">    user.refresh_token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-167">    user.save()</span>
<span id="cb3-168">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Response(status<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">204</span>)</span>
<span id="cb3-169">    res.delete_cookie(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'access'</span>)</span>
<span id="cb3-170">    res.delete_cookie(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refresh'</span>)</span>
<span id="cb3-171">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="outro" class="level2">
<h2 class="anchored" data-anchor-id="outro">outro</h2>
<p>3편에 block chain 관련 설명으로 이어서 진행하겠습니다.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> 맨 위로</a> ]]></description>
  <category>django</category>
  <category>jwt</category>
  <category>42 seoul</category>
  <guid>https://cryscham123.github.io/posts/02_areas/42_seoul/notes/2.html</guid>
  <pubDate>Thu, 16 Jan 2025 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
